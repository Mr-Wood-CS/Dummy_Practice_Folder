{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BGE and Senior Phase Computing Science","text":""},{"location":"Homepages/5.0_L5_Home/","title":"","text":""},{"location":"Homepages/5.0_L5_Home/#welcome-to-national-45-computing-science","title":"Welcome to National 4/5 Computing Science","text":"<p>This exciting and future-focused qualification will gives you the opportunity to explore how computers and digital systems are used to solve real-world problems, empowering you with essential skills for the modern world.</p> <p>Through practical, hands-on tasks and engaging theory, you will develop your understanding of key Computing Science concepts such as:</p> <ul> <li> <p>Software Design and Development \u2013 Learn how to design, write, and test computer programs using industry-standard programming languages.</p> </li> <li> <p>Database Design and Development \u2013 Discover how data is structured, stored, and queried in relational databases.</p> </li> <li> <p>Computer Systems \u2013 Explore how hardware and software work together, with a focus on binary, data representation, and system architecture.</p> </li> </ul> <p>The qualification promotes problem-solving, logical thinking, and digital literacy, all of which are vital skills for further study, work, or everyday life in an increasingly digital society whilst also building a solid foundation in Computing Science.</p>"},{"location":"Homepages/6.0_L6_Home/","title":"","text":""},{"location":"Homepages/6.0_L6_Home/#welcome-to-higher-computing-science","title":"Welcome to Higher Computing Science","text":"<p>This qualification offers you the opportunity to continue developing your understanding of how computers and digital technologies are applied to solve complex, real-world problems, equipping you with advanced skills essential for today\u2019s digital environment.</p> Through a combination of practical programming projects and comprehensive theoretical study, you will explore core Computing Science topics including: <ul> <li>Software Design and Development \u2013 Develop your ability to design, implement, test, and evaluate software solutions using widely-used programming languages and methodologies.</li> </ul> <ul> <li>Database Design and Development \u2013 Gain in-depth knowledge of relational database systems, learning to design efficient databases and write advanced queries to manipulate and retrieve data.</li> </ul> <ul> <li>Computer Systems \u2013 Study the principles of computer architecture, data representation, and how hardware and software interact to deliver effective computing solutions.</li> </ul> <p>This qualification devlops your critical problem-solving, analytical thinking, and technical proficiency, preparing you for higher education or professional careers in technology. </p>"},{"location":"Homepages/7.0_L7_Home/","title":"Home","text":""},{"location":"Homepages/7.0_L7_Home/#welcome-to-advanced-higher-computing-science","title":"Welcome to Advanced Higher Computing Science","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/","title":"Turtle Programming","text":"<p>This term, you will start developing your knowledge of Python code to learn how to draw graphics on to the computer screen. </p> <p>To do this, you will be using the Turtle module \u2013 which is simply an extra part of Python. </p> <p>A module is a library of code written by a very intelligent person. </p> <p>What does the Turtle Looks Like</p> <p>When you run your first program with the Turtle, you will see a little symbol appear on the screen that will draw your graphics. </p> <p>Even though it doesn\u2019t look like one, this is the Turtle.</p> <p>What can the Turtle do?</p> <p>The Turtle is a great way to learn how to code using Python. </p> <p>By using graphics, it\u2019s a bit more interesting that the usual boring text you see on the screen when coding. </p> <p>The Turtle is capable of drawing almost anything you dream up \u2013 you just need to know how to code it! </p> Lesson One - Movement and Colour Lesson Notes 01 - Importing the Turtle CExplanantion <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <p>This line reads \u201cfrom the turtle module, import all of the functions inside of it.\u201d </p> <p>This means you will have access to all the code to allow you to draw graphics on the screen.</p> <p>We need to import the functions (snippets of code) inside of the library so that we can use these extra features in our code. </p> <p>To import all of the functions in the Turtle module, we need to add the following line of code to the start of every program we write this term:</p> <pre><code>from turtle import *\n</code></pre> <p>This line reads \u201cfrom the turtle module, import all of the functions inside of it.\u201d </p> <p>This means you will have access to all the code to allow you to draw graphics on the screen.</p> <p>Moving the Turtle</p> <p>You need to think of the Turtle as a pen \u2013 as it moves across your screen (which is your canvas), it will draw a line. We can move the Turtle forward and back. </p> <p>The bigger the number, the further your turtle will go. Obviously, the smaller the number, the smaller the line that the Turtle will draw. Try it out!</p> <p> </p> <p>Changing Direction</p> <p>By default, your Turtle will always start facing to the right. </p> <p>It is, however, easy to change the direction in which the Turtle will draw a line. </p> <p>To do this, you will need to tell the Turtle which direction to turn (left or right) and at how many degrees. </p> <p>Below is an example of how many degrees you would need to turn the Turtle to head off towards the bottom right of the page. </p> <p>You could either turn left or right \u2013 it\u2019s just the number of degrees that you turn that will change.</p> <p> </p> <p>Examples</p> <p>Let\u2019s move your Turtle to create a right angle (90-degrees):</p> <p> </p> <p>If we were to run the same code, but turn to the left, it would look like this:</p> <p> </p> <p>By continuing to turn at 90-degrees, you are able to make your first shape:</p> <p> </p> <p>Changing Colour &amp; Size</p> <p>You are able to add a splash of colour to your lines by using the color function. </p> <p>A list of all the different colours you can use can be seen below:</p> <p> </p> <p>Changing the Colour of the Pen</p> <p>You can change the color of your pen by using the <code>color</code> function. </p> <p> </p> <p>Changing the Line Thickness</p> <p>You can change the thickness of your line by using the <code>pensize</code> function. </p> <p>The higher the number, the thicker the line becomes:</p> <p> </p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#turing-and-hopper","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-triangle","title":"1 - Triangle","text":"<p>Write a program that will draw an equilateral triangle. Each side needs to be 100 steps in length. The angle at which you need to turn is 120-degrees.</p> <p><code>Save this program into your computing folder as 01-01-Triangle.py</code></p> <p> </p> \ud83c\udd98 Help! <p> Code a Triangle Tutorial</p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-rectangle","title":"2 - Rectangle","text":"<p>Write a program that will draw a rectangle. The longer sides should be 200 steps in size. The shorter sides need to be 100 steps.</p> <p><code>Save this program into your computing folder as 01-02-Rectangle.py</code></p> <p> </p> \ud83c\udd98 Help! <p> Code a Square Tutorial</p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#hopper","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#3-house","title":"3 - House","text":"<p>Write a program that will draw a simple house. All sides of the house and roof need to be 100 steps long. When drawing the house, try and do it so that the house is drawn with one single line \u2013 meaning, you should not draw over any existing lines.</p> <p><code>Save this program into your computing folder as 01-03-House.py</code> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-heartbeat","title":"1 - Heartbeat","text":"<p>Create a red heartbeat pattern that you would see on a heartbeat monitor.</p> <p>It will have 3 pulses that:</p> <ul> <li>Moves 20 steps forward before the start of the pulse;</li> <li>Turns 80\u00b0 left to draw the start of the pulse;</li> <li>Moves 20 steps up to draw the start of the pulse;</li> <li>Turns 160\u00b0 right at the top of the pulse;</li> <li>Moves 40 steps to draw the main part of the pulse;</li> <li>Turns 160\u00b0 left at the bottom of the pulse;</li> <li>Moves another 20 steps to draw the last part of the pulse;</li> <li>Has a gap of 40 steps between each pulse</li> </ul> <p><code>Save this program into your computing folder as ECT-01-Pattern.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-square-pattern","title":"2 - Square Pattern","text":"<p>Write a program that will recreate the coloured pattern in the image on the right. You will need to use any 2 colours and a line thickness of 10.</p> <p><code>Save this program into your computing folder as ECT-02-Pattern.py</code></p> <p>It might seem tricky, but once you work out the pattern, it is quite easy!</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#lesson-two","title":"Lesson Two","text":"Lesson Notes Understanding Co-ordinates <p>Understanding Co-ordinates</p> <p>The screen in Python has been setup with an x-axis and a y-axis. The default Turtle window size is approximately 750 x 640 steps. </p> <p>It looks like this:</p> <p> </p> <p>When you run your code, Python automatically positions your Turtle at the coordinates (0, 0) \u2013 which is the centre of the screen. </p> <p>You can, however, move the Turtle to any position you like on the screen. </p> <p>You will need to lift your Turtle up off the page, go to the desired coordinates and then put your Turtle back down on the page ready for drawing.</p> <p> </p> Tasks Extra Credit Tasks <p>To complete these tasks you will need the following extra bits of code:</p> Shape &amp; Background Colour Fill<pre><code>from turtle import *\n\nbgcolor(\"skyblue\")  # Change background to sky blue\nfillcolor(\"yellow\") # Select Fill Colour\nbegin_fill()        # Start Fill\n\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\n\nend_fill()          # Stop fill\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#turing-and-hopper_1","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-squares","title":"1 - Squares","text":"<p>Write a program that will draw a square anywhere in the top left quadrant of the page with a green outline.</p> <p>Draw a second square anywhere in the bottom right quadrant of the page with an orange outline.</p> <p>Both squares must have equal sides of 100 steps and a pen size of 10.</p> <p><code>Save this program into your computing folder as 02-01-Squares.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#hopper_1","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-name","title":"2 - Name","text":"<p>Write a program that will draw your name on the screen using only lines. Each letter in your name needs to be a different colour and a different thickness to the other letters in your name.</p> <p>Feel free to use a nickname or your last name if it makes things easier.</p> <p><code>Save this program into your computing folder as 02-02-Name.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-pyramids-pt-1","title":"1 - Pyramids pt. 1","text":"<p>Change the background to pink, draw three triangles in a row, fill each with a different colour.</p> <p><code>Save this program into your computing folder as ECT-03-Pattern.py</code></p> <ul> <li>All sides should be 100 Steps</li> <li>All angles should be 120</li> <li>The trinagles should be Red, Green and Blue</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-pyramids-pt-2","title":"2 - Pyramids pt. 2","text":"<p>Draw three triangles and place these inbetween the Triangles from Task 1 </p> <p><code>Save this program into your computing folder as ECT-04-Pattern.py</code></p> <ul> <li>The gap between each each Trinagle should be 80 steps</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#lesson-three","title":"Lesson Three","text":"Lesson Notes Drawing Shapes with Loops <p>Sequencing to Iteration</p> <p>We should now know that drawing shapes with Turtle is quite straightforward. </p> <p>However, it becomes even easier\u2014and much faster\u2014when you use a loop. </p> <p>When creating shapes like squares, rectangles, or triangles, you might have noticed that the same lines of code are repeated over and over. </p> <p>Instead of writing the same instructions multiple times, we can use a loop to reduce repetition and make our code cleaner.</p> <p>Creating a Square</p> <p>Instead of writing the first chunk of code to draw a square like below:</p> <p>Without a Loop<pre><code>from turtle import *\n\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\n</code></pre> It could be easily written with a for loop:</p> With a Loop<pre><code>from turtle import *\n\nfor i in range(4):\n  forward(100)\n  right(90)\n</code></pre> Drawing Patterns with Loops <p>By using the same method that you used to draw basic shapes (like squares and triangles), you can create some pretty cool patterns. Check out the examples below:</p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#examples","title":"Examples","text":"<p>Square</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(4):\n  forward(100)\n  left(90)\n</code></pre> <p> </p> <p>Rectangle</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(2):\n  forward(250)\n  left(90)\n  forward(100)\n  left(90)\n</code></pre> <p> </p> <p>Triangle</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(3):\n  forward(100)\n  left(120)\n</code></pre> <p> </p> <p>Circle</p> CodeExample Square<pre><code>from turtle import *\n\ncircle(100)\n\n# Note: The number in brackets is the radius size \u2013 so, the bigger the number, the bigger the circle.\n</code></pre> <p> </p> <p>Oval</p> CodeExample Square<pre><code>from turtle import *\n\nshape(\"circle\")\nshapesize(10,5,1)\n\n# Note: The shapesize() function allows you to distort the shape.\n</code></pre> <p> </p> <p>Star</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range (5):\n  forward(225)\n  right(144)\n</code></pre> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#examples_1","title":"Examples","text":"<p>Gold Pattern</p> CodeExample Gold Pattern<pre><code>from turtle import *\n\ncolor(\"gold\")\npensize(3)\n\nfor i in range(10):\n  forward(150)\n  right(108)\n</code></pre> <p> </p> <p>Turquoise Pattern</p> CodeExample Turquoise Pattern<pre><code>from turtle import *\n\ncolor(\"turquoise\")\npensize(3)\n\nfor i in range(36):\n  right(10)\n  for i in range(8):\n    forward(50)\n    right(45)\n</code></pre> <p> </p> <p>Orange Pattern</p> CodeExample Orange Pattern<pre><code>from turtle import *\n\ncolor(\"orange\")\npensize(3)\n\nfor i in range(35):\n  left(12)\n  for i in range(8):\n    forward(200)\n    left(90)\n</code></pre> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#turing-and-hopper_2","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-pentagon","title":"1 - Pentagon","text":"<p>Write the code to draw a pentagon with 100 step sides.</p> <p>It must have an outline of <code>size 5</code> and colour of <code>hotpink</code>. </p> <p>Your code needs to be as efficient as possible, meaning that your shape must be drawn with a for loop.</p> <p>Remember, pentagons have 5 sides, so to work out the angle you need at each corner, divide 360 by 5. </p> <p><code>Save this program into your computing folder as 03-01-Pentagon.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#hopper_2","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-8-point-star","title":"2 - 8 Point Star","text":"<p>Write the code to draw an 8 point star with 200 step sides</p> <p>Make sure to set the colour to green.</p> <p>This will take some trial and error to get it looking good. </p> <p>Try a variety of shapes and angles.</p> <p><code>Save this program into your computing folder as 03-02-8-Point-Star.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-pattern-pt-1","title":"1 - Pattern pt. 1","text":"<p>Re-create the pattern below using a for loop.</p> <p>Be sure to make the outline thickness and the colour the same.</p> <p>This will take some trial and error to get it looking good. </p> <p><code>Save this program into your computing folder as ECT-05-Pattern.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-patterns-pt-2","title":"2 - Patterns pt. 2","text":"<p>Fill each of the shapes from Task 1 with a different colour </p> <p><code>Save this program into your computing folder as ECT-06-Pattern.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#lesson-four","title":"Lesson Four","text":"Fill Colours Lesson Notes <p>Sequencing to Iteration</p> <p>We should now know that drawing shapes with Turtle is quite straightforward. </p> <p>However, it becomes even easier\u2014and much faster\u2014when you use a loop. </p> <p>When creating shapes like squares, rectangles, or triangles, you might have noticed that the same lines of code are repeated over and over. </p> <p>Instead of writing the same instructions multiple times, we can use a loop to reduce repetition and make our code cleaner.</p> <p>Creating a Square</p> <p>Instead of writing the first chunk of code to draw a square like below:</p> <p>Without a Loop<pre><code>from turtle import *\n\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\n</code></pre> It could be easily written with a for loop:</p> With a Loop<pre><code>from turtle import *\n\nfor i in range(4):\n  forward(100)\n  right(90)\n</code></pre> Drawing Patterns with Loops <p>By using the same method that you used to draw basic shapes (like squares and triangles), you can create some pretty cool patterns. Check out the examples below:</p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#examples_2","title":"Examples","text":"<p>Square</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(4):\n  forward(100)\n  left(90)\n</code></pre> <p> </p> <p>Rectangle</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(2):\n  forward(250)\n  left(90)\n  forward(100)\n  left(90)\n</code></pre> <p> </p> <p>Triangle</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range(3):\n  forward(100)\n  left(120)\n</code></pre> <p> </p> <p>Circle</p> CodeExample Square<pre><code>from turtle import *\n\ncircle(100)\n\n# Note: The number in brackets is the radius size \u2013 so, the bigger the number, the bigger the circle.\n</code></pre> <p> </p> <p>Oval</p> CodeExample Square<pre><code>from turtle import *\n\nshape(\"circle\")\nshapesize(10,5,1)\n\n# Note: The shapesize() function allows you to distort the shape.\n</code></pre> <p> </p> <p>Star</p> CodeExample Square<pre><code>from turtle import *\n\nfor i in range (5):\n  forward(225)\n  right(144)\n</code></pre> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#examples_3","title":"Examples","text":"<p>Gold Pattern</p> CodeExample Gold Pattern<pre><code>from turtle import *\n\ncolor(\"gold\")\npensize(3)\n\nfor i in range(10):\n  forward(150)\n  right(108)\n</code></pre> <p> </p> <p>Turquoise Pattern</p> CodeExample Turquoise Pattern<pre><code>from turtle import *\n\ncolor(\"turquoise\")\npensize(3)\n\nfor i in range(36):\n  right(10)\n  for i in range(8):\n    forward(50)\n    right(45)\n</code></pre> <p> </p> <p>Orange Pattern</p> CodeExample Orange Pattern<pre><code>from turtle import *\n\ncolor(\"orange\")\npensize(3)\n\nfor i in range(35):\n  left(12)\n  for i in range(8):\n    forward(200)\n    left(90)\n</code></pre> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#turing-and-hopper_3","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-pentagon_1","title":"1 - Pentagon","text":"<p>Write the code to draw a pentagon with 100 step sides.</p> <p>It must have an outline of <code>size 5</code> and colour of <code>hotpink</code>. </p> <p>Your code needs to be as efficient as possible, meaning that your shape must be drawn with a for loop.</p> <p>Remember, pentagons have 5 sides, so to work out the angle you need at each corner, divide 360 by 5. </p> <p><code>Save this program into your computing folder as 03-01-Pentagon.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#hopper_3","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-8-point-star_1","title":"2 - 8 Point Star","text":"<p>Write the code to draw an 8 point star with 200 step sides</p> <p>Make sure to set the colour to green.</p> <p>This will take some trial and error to get it looking good. </p> <p>Try a variety of shapes and angles.</p> <p><code>Save this program into your computing folder as 03-02-8-Point-Star.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#1-pattern-pt-1_1","title":"1 - Pattern pt. 1","text":"<p>Re-create the pattern below using a for loop.</p> <p>Be sure to make the outline thickness and the colour the same.</p> <p>This will take some trial and error to get it looking good. </p> <p><code>Save this program into your computing folder as ECT-05-Pattern.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/1.0_Home/#2-patterns-pt-2_1","title":"2 - Patterns pt. 2","text":"<p>Fill each of the shapes from Task 1 with a different colour </p> <p><code>Save this program into your computing folder as ECT-06-Pattern.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/","title":"Turtle Programming","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#01-introduction-to-turtle-programming","title":"01 - Introduction to Turtle Programming","text":"Lesson Notes 01 - Introducing the Turtle <p>This term, you will start developing your knowledge of Python code to learn how to draw graphics on to the computer screen. </p> <p>To do this, you will be using the Turtle module \u2013 which is simply an extra part of Python. </p> <p>A module is a library of code written by a very intelligent person. </p> <p>We need to import the functions (snippets of code) inside of the library so that we can use these extra features in our code. </p> <p>Importing the Turtle</p> <p>To import all of the functions in the Turtle module, we need to add the following line of code to the start of every program we write this term:</p> <pre><code>from turtle import *\n</code></pre> <p>This line reads \u201cfrom the turtle module, import all of the functions inside of it.\u201d </p> <p>This means you will have access to all the code to allow you to draw graphics on the screen.</p> <p>What the Turtle Looks Like</p> <p>When you run your first program with the Turtle, you will see a little symbol appear on the screen that will draw your graphics. </p> <p><code>Even though it doesn\u2019t look like one, this is the **Turtle**.</code></p> <p>What can the Turtle do?</p> <p>The Turtle is a great way to learn how to code using Python. </p> <p>By using graphics, it\u2019s a bit more interesting that the usual boring text you see on the screen when coding. </p> <p>The Turtle is capable of drawing almost anything you dream up \u2013 you just need to know how to code it! </p> <p>Cool 2D artworks and amazing patterns are just some of the things that the Turtle is capable of drawing.</p> <p> </p> 02 - Movement and Colour <p>Moving the Turtle</p> <p>You need to think of the Turtle as a pen \u2013 as it moves across your screen (which is your canvas), it will draw a line. We can move the Turtle forward and back. </p> <p>The bigger the number, the further your turtle will go. Obviously, the smaller the number, the smaller the line that the Turtle will draw. Try it out!</p> <p> </p> <p>Changing Direction</p> <p>By default, your Turtle will always start facing to the right. </p> <p>It is, however, easy to change the direction in which the Turtle will draw a line. </p> <p>To do this, you will need to tell the Turtle which direction to turn (left or right) and at how many degrees. </p> <p>Below is an example of how many degrees you would need to turn the Turtle to head off towards the bottom right of the page. </p> <p>You could either turn left or right \u2013 it\u2019s just the number of degrees that you turn that will change.</p> <p> </p> <p>Examples</p> <p>Let\u2019s move your Turtle to create a right angle (90-degrees):</p> <p> </p> <p>If we were to run the same code, but turn to the left, it would look like this:</p> <p> </p> <p>By continuing to turn at 90-degrees, you are able to make your first shape:</p> <p> </p> <p>Changing Colour &amp; Size</p> <p>You are able to add a splash of colour to your lines by using the color function. </p> <p>A list of all the different colours you can use can be seen below:</p> <p> </p> <p>Changing the Colour of the Pen</p> <p>You can change the color of your pen by using the <code>color</code> function. </p> <p> </p> <p>Changing the Line Thickness</p> <p>You can change the thickness of your line by using the <code>pensize</code> function. </p> <p>The higher the number, the thicker the line becomes:</p> <p> </p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#turing-and-hopper","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#1-triangle","title":"1 - Triangle","text":"<p>Write a program that will draw an equilateral triangle. Each side needs to be 100 steps in length. The angle at which you need to turn is 120-degrees.</p> <p> </p> \ud83c\udd98 Help! <p> Code a Triangle Tutorial</p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#2-rectangle","title":"2 - Rectangle","text":"<p>Write a program that will draw a rectangle. The longer sides should be 200 steps in size. The shorter sides need to be 100 steps.</p> <p> </p> \ud83c\udd98 Help! <p> Code a Square Tutorial</p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#hopper","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#3-house","title":"3 - House","text":"<p>Write a program that will draw a simple house. All sides of the house and roof need to be 100 steps long. When drawing the house, try and do it so that the house is drawn with one single line \u2013 meaning, you should not draw over any existing lines.</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#1-heartbeat","title":"1 - Heartbeat","text":"<p>Create a red heartbeat pattern that you would see on a heartbeat monitor.</p> <p>It will have 3 pulses that:</p> <ul> <li>Moves 20 steps forward before the start of the pulse;</li> <li>Turns 80\u00b0 left to draw the start of the pulse;</li> <li>Moves 20 steps up to draw the start of the pulse;</li> <li>Turns 160\u00b0 right at the top of the pulse;</li> <li>Moves 40 steps to draw the main part of the pulse;</li> <li>Turns 160\u00b0 left at the bottom of the pulse;</li> <li>Moves another 20 steps to draw the last part of the pulse;</li> <li>Has a gap of 40 steps between each pulse</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#2-square-pattern","title":"2 - Square Pattern","text":"<p>Write a program that will recreate the coloured pattern in the image on the right. You will need to use any 2 colours and a line thickness of 10.</p> <p>It might seem tricky, but once you work out the pattern, it is quite easy!</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#02-co-ordinates","title":"02 - Co-Ordinates","text":"Lesson Notes Understanding Co-Ordinates <p>Moving to Specific Co-Ordinates</p> <p>The screen in Python has been setup with an x-axis and a y-axis. The default Turtle window size is approximately 750 x 640 steps. </p> <p>It looks like this:</p> <p> </p> <p>When you run your code, Python automatically positions your Turtle at the coordinates (0, 0) \u2013 which is the centre of the screen. </p> <p>You can, however, move the Turtle to any position you like on the screen. </p> <p>You will need to lift your Turtle up off the page, go to the desired coordinates and then put your Turtle back down on the page ready for drawing.</p> <p> </p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#turing-and-hopper_1","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#1-squares","title":"1 - Squares","text":"<p>Write a program that will draw an equilateral triangle. Each side needs to be 100 steps in length. The angle at which you need to turn is 120-degrees.</p> <ul> <li> <p>Write a program that will draw a square anywhere in the top left quadrant of the page with a green outline. </p> </li> <li> <p>Draw a second square anywhere in the bottom right quadrant of the page with an orange outline. </p> </li> <li> <p>Both squares must have equal sides of 100 steps and a pen size of 10. </p> </li> </ul> <p><code>Save this program into your Computing folder as squares.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#hopper_1","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#2-name","title":"2 - Name","text":"<p>Write a program that will draw a simple house. All sides of the house and roof need to be 100 steps long. When drawing the house, try and do it so that the house is drawn with one single line \u2013 meaning, you should not draw over any existing lines.</p> <p>**Write a program that will draw your name on the screen using only lines. Each letter in your name needs to be a different colour and a different thickness to the other letters in your name. **</p> <p>Feel free to use a nickname or your last name if it makes things easier.</p> <p>Save this program into your Computing folder as name.py</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#1-heartbeat_1","title":"1 - Heartbeat","text":"<p>Create a red heartbeat pattern that you would see on a heartbeat monitor.</p> <p>It will have 3 pulses that:</p> <ul> <li>Moves 20 steps forward before the start of the pulse;</li> <li>Turns 80\u00b0 left to draw the start of the pulse;</li> <li>Moves 20 steps up to draw the start of the pulse;</li> <li>Turns 160\u00b0 right at the top of the pulse;</li> <li>Moves 40 steps to draw the main part of the pulse;</li> <li>Turns 160\u00b0 left at the bottom of the pulse;</li> <li>Moves another 20 steps to draw the last part of the pulse;</li> <li>Has a gap of 40 steps between each pulse</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/2.0_Introducing_the_Turtle/#2-square-pattern_1","title":"2 - Square Pattern","text":"<p>Write a program that will recreate the coloured pattern in the image on the right. You will need to use any 2 colours and a line thickness of 10.</p> <p>It might seem tricky, but once you work out the pattern, it is quite easy!</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/","title":"Co-Ordinates","text":"Understanding Co-Ordinates <p>Moving to Specific Co-Ordinates</p> <p>The screen in Python has been setup with an x-axis and a y-axis. The default Turtle window size is approximately 750 x 640 steps. </p> <p>It looks like this:</p> <p> </p> <p>When you run your code, Python automatically positions your Turtle at the coordinates (0, 0) \u2013 which is the centre of the screen. </p> <p>You can, however, move the Turtle to any position you like on the screen. </p> <p>You will need to lift your Turtle up off the page, go to the desired coordinates and then put your Turtle back down on the page ready for drawing.</p> <p> </p> Tasks Extra Credit Tasks"},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#turing-and-hopper","title":"Turing and Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#1-squares","title":"1 - Squares","text":"<p>Write a program that will draw an equilateral triangle. Each side needs to be 100 steps in length. The angle at which you need to turn is 120-degrees.</p> <ul> <li> <p>Write a program that will draw a square anywhere in the top left quadrant of the page with a green outline. </p> </li> <li> <p>Draw a second square anywhere in the bottom right quadrant of the page with an orange outline. </p> </li> <li> <p>Both squares must have equal sides of 100 steps and a pen size of 10. </p> </li> </ul> <p><code>Save this program into your Computing folder as squares.py</code></p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#hopper","title":"Hopper","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#2-name","title":"2 - Name","text":"<p>Write a program that will draw a simple house. All sides of the house and roof need to be 100 steps long. When drawing the house, try and do it so that the house is drawn with one single line \u2013 meaning, you should not draw over any existing lines.</p> <p>**Write a program that will draw your name on the screen using only lines. Each letter in your name needs to be a different colour and a different thickness to the other letters in your name. **</p> <p>Feel free to use a nickname or your last name if it makes things easier.</p> <p>Save this program into your Computing folder as name.py</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#1-heartbeat","title":"1 - Heartbeat","text":"<p>Create a red heartbeat pattern that you would see on a heartbeat monitor.</p> <p>It will have 3 pulses that:</p> <ul> <li>Moves 20 steps forward before the start of the pulse;</li> <li>Turns 80\u00b0 left to draw the start of the pulse;</li> <li>Moves 20 steps up to draw the start of the pulse;</li> <li>Turns 160\u00b0 right at the top of the pulse;</li> <li>Moves 40 steps to draw the main part of the pulse;</li> <li>Turns 160\u00b0 left at the bottom of the pulse;</li> <li>Moves another 20 steps to draw the last part of the pulse;</li> <li>Has a gap of 40 steps between each pulse</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/3.0_Movement_and_Colour/#2-square-pattern","title":"2 - Square Pattern","text":"<p>Write a program that will recreate the coloured pattern in the image on the right. You will need to use any 2 colours and a line thickness of 10.</p> <p>It might seem tricky, but once you work out the pattern, it is quite easy!</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/Solutions/","title":"Solutions","text":"<p>1.1 - Triangle</p> <p>``` python linenums=1 from turtle import *</p> <p>forward(100) left(120) forward(100) left(120) forward(100) left(120) <pre><code>1.2 - Rectangle\n\n``` python linenums=1\nfrom turtle import *\n\nforward(200)\nleft(90)\nforward(100)\nleft(90)\nforward(200)\nleft(90)\nforward(100)\nleft(90)\n</code></pre></p> <p>1.3 - House</p> <p>``` python linenums=1 from turtle import *</p> <p>forward(100) left(120) forward(100) left(120) forward(100) left(30) forward(100) left(90) forward(100) left(90) forward(100) <pre><code>3.1 - Pentagon\n``` python linenums=1\nfrom turtle import *\n\nfor in rang(11):\n  forward(200)\n  left(250)\n</code></pre> 3.2 - 11 Point Star</p> <p>``` python linenums=1 from turtle import *</p> <p>for in rang(11):   forward(200)   left(250) <pre><code>3.2 - 8 Point Star\n\n``` python linenums=1\nfrom turtle import *\n\nfor in rang(8):\n  forward(200)\n  left(250)\n</code></pre></p>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/","title":"Python Turtle Programming","text":""},{"location":"Levels/BGE/S1/Turtle_Programming/test/#_1","title":"Turtle Programming1","text":"Introduction <p>This term, you will start developing your knowledge of Python code to learn how to draw graphics on to the computer screen. </p> <p>To do this, you will be using the Turtle module \u2013 which is simply an extra part of Python. </p> <p>A module is a library of code written by a very intelligent person. </p> <p>What does the Turtle Looks Like</p> <p>When you run your first program with the Turtle, you will see a little symbol appear on the screen that will draw your graphics. </p> <p>Even though it doesn\u2019t look like one, this is the Turtle.</p> <p>What can the Turtle do?</p> <p>The Turtle is a great way to learn how to code using Python. </p> <p>By using graphics, it\u2019s a bit more interesting that the usual boring text you see on the screen when coding. </p> <p>The Turtle is capable of drawing almost anything you dream up \u2013 you just need to know how to code it! </p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#_2","title":"Turtle Programming1","text":"Lesson One - Movement and Colour"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#class-notes-movement","title":"Class Notes - Movement","text":"1 - Importing the Turtle2 - Moving Forward3 - Moving Left4 - Moving Right <p>To import all of the functions in the Turtle module, we need to add the following line of code to the start of every program we write:</p> <pre><code>from turtle import *\n</code></pre> <p>You need to think of the Turtle as a pen \u2013 as it moves across your screen (which is your canvas), it will draw a line. We can move the Turtle forward and back. </p> <p>The bigger the number, the further your turtle will go. Obviously, the smaller the number, the smaller the line that the Turtle will draw. </p> Moving Forward<pre><code>from turtle import *\n\nforward(100)\n</code></pre> <p>To change the direction of your turtle, you will need to tell the Turtle which direction to turn (left or right) and at how many degrees. </p> <p>To turn left use:</p> Turning Left linenums=<pre><code>from turtle import *\n\nleft(90) # Turn left 90 Degrees.\n</code></pre> <p>To change the direction of your turtle, you will need to tell the Turtle which direction to turn (left or right) and at how many degrees. </p> <p>To turn right use:</p> Turning Right<pre><code>from turtle import *\n\nright(90) # Turn right 90 Degrees.\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#class-notes-colour","title":"Class Notes - Colour","text":"1 - Changing the Pen Colour2 - Changing the Pen Thickness <p>You can change the color of your pen by using the color function. </p> Changing the Pen Colour<pre><code>from turtle import *\n\ncolor(\"Red\") # This changes the pen colour to red\n</code></pre> <p>You can change the thickness of your line by using the pensize function. </p> <p>The higher the number, the thicker the line becomes:</p> Changing the Pen Colour<pre><code>from turtle import *\n\npensize(10)\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#pupil-tasks","title":"Pupil Tasks","text":"Task 1 (Turing &amp; Hopper)Task 2 (Turing &amp; Hopper)Task 3 (Hopper) <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 01-01-Triangle</p> <p> </p> <p>4 - A Triangle has 3 equal sides. </p> <p>5- Each side of your Triangle will be 100 steps in length.</p> <p>6 - Each angle in your Triangle will be 120 degrees</p> <p>7 - The starter code below gives you your first 2 sides</p> Triangle<pre><code>from turtle import *\n\nforward(100)\nleft(120)\nforward(100)\n</code></pre> <p>8 - Add the starter code to your file and complete the Triangle</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 01-02-Rectangle</p> <p> </p> <p>4 - Each side of your Rectangle will be 100 steps in length.</p> <p>5 - Each angle in your Rectangle will be 90 degrees</p> <p>6 - The starter code below gives you your first side</p> Triangle<pre><code>from turtle import *\n\nforward(100)\n</code></pre> <p>7 - Add the starter code to your file and complete the Rectangle</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p>3 - Save the file as 01-03-House</p> <p>4 - Create the image below using Python Turtle</p> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#_3","title":"Turtle Programming1","text":"Lesson Two - Co-ordinates"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#class-notes-co-ordinates","title":"Class Notes - Co-ordinates","text":"1 - Python Co-ordinates2 - Default X and Y3 - Changing Co-ordinates4 - Example <p>The screen in Turtle has been setup with an x-axis and a y-axis. </p> <p>The default Turtle window size is approximately 750 x 640 steps and looks like this:</p> <p> </p> <p>When you run your code, Python automatically positions your Turtle at the coordinates (0, 0) \u2013 which is the centre of the screen. </p> <p>You can, however, move the Turtle to any position you like on the screen. </p> <p>To change the co-ordinates of the turtle you will need to:</p> <ol> <li>Lift your Turtle up off the page, </li> <li>Go to the selected co-ordinates</li> <li>Put your Turtle back down on the page ready for drawing.</li> </ol> <p>The code snippet below show you how to do this:</p> Changing Co-ordinates<pre><code>from turtle import *\n\npenup() \ngoto(0,0)\npendown\n</code></pre> <p>To change the direction of your turtle, you will need to tell the Turtle which direction to turn (left or right) and at how many degrees. </p> <p>To turn right use:</p> Turning Right<pre><code>from turtle import *\n\npenup()\ngoto(-354, 344)\npendown()\n\nforward(100)\nright(90)\nforward(100)\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#pupil-tasks_1","title":"Pupil Tasks","text":"Task 1 (Turing &amp; Hopper)Task 2 (Hopper)Extra Credit Task 1Extra Credit Task 2 <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 02-01-Squares</p> <p> </p> <p>4 - Draw a square in the top left corner with a green outline.</p> <p>5 - Draw a square in the bottom right corner with a green outline.</p> <p> </p> <p>7 - The starter code below gives you your first 2 sides of the square in the top left corner. You will need to find and enter the co-ordinates.</p> Triangle<pre><code>from turtle import *\n\npenup()\ngoto(Place your co-ordinates here)\npendown()\n\ncolor(\"red\")\nforward(100)\nleft(90)\n</code></pre> <p>8 - Add the starter code to your file and complete the task</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 01-02-Rectangle</p> <p> </p> <p>4 - Each side of your Rectangle will be 100 steps in length.</p> <p>5 - Each angle in your Rectangle will be 90 degrees</p> <p>6 - The starter code below gives you your first side</p> Triangle<pre><code>from turtle import *\n\nforward(100)\n</code></pre> <p>7 - Add the starter code to your file and complete the Rectangle</p> <p>Instructions</p> <p>To complete these tasks you will need the following extra bits of code:</p> Shape &amp; Background Colour Fill<pre><code>from turtle import *\n\nbgcolor(\"skyblue\")  # Change background to sky blue\nfillcolor(\"yellow\") # Select Fill Colour\nbegin_fill()        # Start Fill\n\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\nleft(90)\nforward(100)\n\nend_fill()          # Stop fill\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#pyramids-pt-1","title":"Pyramids pt. 1","text":"<p>Change the background to pink, draw three triangles in a row, fill each with a different colour.</p> <p><code>Save this program into your computing folder as ECT-03-Pattern.py</code></p> <ul> <li>All sides should be 100 Steps</li> <li>All angles should be 120</li> <li>The trinagles should be Red, Green and Blue</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#pyramids-pt-2","title":"Pyramids pt. 2","text":"<p>Draw three triangles and place these inbetween the Triangles from Task 1 </p> <p><code>Save this program into your computing folder as ECT-04-Pattern.py</code></p> <ul> <li>The gap between each each Trinagle should be 80 steps</li> </ul> <p> </p>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#_4","title":"Turtle Programming1","text":"Lesson Three - Loops to Create Shapes"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#class-notes-loops","title":"Class Notes - Loops","text":"1 - Drawing Shapes2 - Using Loops3 - Creating Circles4 - Finding the Angle <p>Drawing shapes with Turtle is quite straightforward. </p> <p>When creating shapes like a square, you might have noticed that the same lines of code are repeated over and over:</p> Simple Square<pre><code>from turtle import *\n\nforward (100)\nleft(90)\nforward (100)\nleft(90)\nforward (100)\nleft(90)\n</code></pre> <p>However, it becomes easier and faster when you use a loop.</p> <p>Example</p> <p>Instead of writing the same lines of code multiple times to create a square, we can use a loop and make our code cleaner:</p> Simple Square using a Loop<pre><code>from turtle import *\n\nfor i in range(4):\n  forward (100)\n  left(90)\n</code></pre> <p>\ud83d\udca1 Notice the diffrence?</p> <p>In the code above line 3 (highlighted) tells the program how many times it is to loop </p> <p>To change how many times it loops you change the number in the brackets ( )</p> <p>When creating circles we don't use a loop, we use the circle keyword. </p> <p>This keyword has a built in loop that we cant see.</p> Creating Circles<pre><code>from turtle import *\n\ncircle(100)\n\n# Note: The number in brackets is the radius size \u2013 so, the bigger the number, the bigger the circle.\n</code></pre> <p>When we are creating shapes we will need to find each internal angle.</p> <p>To this is all we have to do is divide the number of sides the shape has by 360</p> <p>A Hexagon has 6 sides</p> <p>To find the angle we use the sum:</p> <p>360 / 6 = 60</p> <p>The code to create a Hexagon is:</p> Hexagon<pre><code>from turtle import *\n\nfor i in range(6): # We loop 6 times because a Hexagon has 6 sides\n  forward(100)     # Each side of our Hexagon will bee 100 steps long\n  left(60)         # This is the angle from our sum above\n</code></pre>"},{"location":"Levels/BGE/S1/Turtle_Programming/test/#pupil-tasks_2","title":"Pupil Tasks","text":"Task 1 (Turing &amp; Hopper)Task 2 (Turing &amp; Hopper)Task 3 (Hopper)Task 4 (Hopper) <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 02-01-Squares</p> <p> </p> <ul> <li>The starter code below gives you your first 2 sides of the square in the top left corner. You will need to find and enter the co-ordinates.</li> </ul> Triangle <p>8 - Add the starter code to your file and complete the task</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p> </p> <p>3 - Click save and save the file as 01-02-Rectangle</p> <p> </p> Triangle <p>7 - Add the starter code to your file and complete the Rectangle</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p>3 - Click save and save the file as 01-02-Rectangle</p> <p>Instructions</p> <p>1 - Open th MU Editor</p> <p>2 - Add a new file</p> <p>3 - Click save and save the file as 01-02-Rectangle</p>"},{"location":"Levels/BGE/S2/S2_index/","title":"test","text":""},{"location":"Levels/BGE/S2/Python_Programming/1.0_Homepage/","title":"Python Programming","text":"<p>Welcome to Python programming! In this unit, you\u2019ll learn how to talk to a computer by writing your own code using Python \u2013 a simple but powerful programming language. You\u2019ll create interactive programs, make decisions using if statements, and get a taste of how real software is built. Don\u2019t worry if this is your first time coding \u2013 we\u2019ll take it step by step, and there\u2019ll be plenty of chances to try things out and get creative. By the end of the unit, you\u2019ll have the skills to build your own basic programs and understand how computers follow instructions. </p>"},{"location":"Levels/BGE/S2/Python_Programming/1.0_Homepage/#lesson-structure","title":"Lesson Structure","text":"<ul> <li> Lesson 1 - Introduction to Python</li> </ul> <ul> <li> Lesson 2 - Selection</li> </ul>"},{"location":"Levels/BGE/S2/Python_Programming/2.0_Intro_to_Python/","title":"Introducion to Python","text":"<p>In this lesson we are going to concentrate on getting to grips with the Python language and how we can solve problems when things go wrong.</p> <p>To do this we will be using the <code>Raspberry Pi Code Editor</code></p> Part 1 - Using the Raspberry Pi Code Editor <ul> <li> RPI Code Editor</li> </ul> <p>The Raspberry Pi Code Editor is a tool designed to help you write and run Python code on your Raspberry Pi. It provides a simple and user-friendly interface where you can create new Python programs, edit existing ones, and see the results immediately. </p> <p>You can use it to practice writing Python, explore different programming concepts, and even work with hardware projects. The editor makes it easy for both beginners and experienced programmers to get started with coding on the Raspberry Pi.</p> Part 2 - Hello World (Outputs) <p>Python allows us to output all kinds of things such as graphics and text. To simply output some text to the screen we can use the print() instruction. </p> <p>There is a tradition that when all computer science students write their first computer program, the most simple introductory program they write is to make the computer output two words. </p> <p>Those words are \u201cHello World!\u201d.</p> <p>In the <code>Editor Window</code> type in the command :</p> <p><pre><code>print (\u201cHello World!\u201d)\n</code></pre> and press the <code>Run</code> button.</p> <p>Congratulations! You have just issued your first Python instruction, a simple command to output some characters by using the <code>\u201cprint\u201d</code> function.</p> <p>\u23f0 5 Minute Task</p> <p>What else can you get the computer to print out?</p> Part 3 - Fixing Problems (Debugging) <p>Syntax Errors Now we are going to try something else. Every computer programmer makes mistakes and it's important that you know what to do when this happens. </p> <p>Let\u2019s try the same command as before but this time without the quotation marks, type in:</p> <p><pre><code>print (Hello World!)\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Congratulations! You have just made an error! </p> <p>You can tell its an erorr when you should see some writing appear in red that says <code>\u201cSyntaxError\u201d</code>.</p> <p>Question</p> <p>What do we think <code>\u201cSyntaxError\"</code> might mean\u201d?</p> <p>Name Errors</p> <p>This time we are going to make a mistake with the name of the print function.</p> <p>Let's type in this time:</p> <p><pre><code>Print (\"Hello World!\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What do we think <code>\u201cNameError\"</code> might mean\u201d?</p> <p>Note</p> <p>Computers are really, really useful and they can be used to carry out lots of clever things but you have to remember that computers are also really, really dumb.</p> <p>So dumb in fact that they don\u2019t know the difference between print spelled with a capital P or not!</p> Part 4 - Inputs <p>If an output puts data out of the program, an input allows us to put some data in to our program from the outside world. </p> <p>Again, Python has many methods that allow this to happen, the most basic of these methods is called <code>input()</code>.</p> <p>In the <code>Editor Window</code> type in the following instruction:</p> <p><pre><code>print (input(\"What's your name?\"))\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What just happened?</p> Part 5 - Variables <p>Computers use all sorts of data to perform various tasks. </p> <p>Question</p> <p>What do we mean by data?</p> <p>In programming we need a way to store data so that we can come back and work on it at a later point. </p> <p><code>To accomplish this we can use variables.</code></p> <p>So far we have used print() to display a string \u201cHello World\u201d. </p> <p>We are going to do the same kind of thing now but this time the string (in this case a name) is stored in a variable instead. </p> <p>Last time the String was a static, unchanging value but now it is a dynamic, changeable value. </p> <p>We will now going to create <code>two</code> variables, these will be called <code>YourName</code> and <code>BestFriend</code>.</p> <p>Type in the following command:</p> <p><pre><code>YourName = input(\"What's your name?\")\nBestFriend = input(\"What is your friend's name?\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Type in your name and press Enter. </p> <p>Type in your best friends name and press Enter. </p> <p>Question</p> <p>What just happened?</p> <p>It is now possible to always access this data by using the titles you have given those variables in Python.</p> <p>In the <code>Editor Window</code> type in the following instruction:</p> <p><pre><code>print (YourName)\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What just happened?</p> <p>How could we display our BestFriend?</p> <p>Try typing your answer into the editor window and see if it worked....</p> Part 6 - Calculations and Different Types of Data <p>We are now going to learn how to make python process our data by doing some calculations and about how computers treat different types of data.</p> <p>In this part we will see that the input command always reads data in as a string (text). If we want Python to treat data as numbers, we need to specifically tell it do so.</p> <p>Enter the following commands:</p> <p><pre><code>first = input(\"Enter first number\")\nsecond = input(\"Enter second number\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p><code>Enter the first number and press enter</code></p> <p><code>Enter the second number and press enter</code></p> <p>What will happen if we try to:</p> <p><pre><code>print (first + second)\n</code></pre> Try typing it in.....</p> <p><code>What happens?</code></p> <p>We will now re-enter our previous inputs but we are also going to use a function called <code>\u201cint\u201d</code>.</p> <p><code>\u201cInt\u201d</code> tells the computer we want it to treat data as an integer. </p> <p>An integer is a whole number, like 1, -10, 999 and so on.</p> <p>Enter the following commands:</p> <p><pre><code>first = int(input(\"Enter first number\"))\nsecond = int(input(\"Enter second number\"))\nprint (first + second)\n</code></pre> ...and press the <code>Run</code> button.</p> <p><code>Enter the first number and press enter</code></p> <p><code>Enter the second number and press enter</code></p> <p>Now the program is working as we want it to!</p> <p>\u23f0 5 minute task - Write some calculations in the <code>editor window</code> that use the following calculations:</p> <p>Multiply * </p> <pre><code>print (first * second)\n</code></pre> <p>Divide / </p> <p><pre><code>print (first / second)\n</code></pre> Subtract \u2013</p> <pre><code>print (first \u2013 second)\n</code></pre> Tasks: Introducing Python <p>Area of a Triangle</p> <p> </p> Instructions <p>General Problem</p> <p>The <code>Maths Department</code> have asked you to create a program that calculates the area of a triangle.</p> <p>You can calculate the area of a triangle using the formula </p> <p><code>area = half base times height.</code></p> <p>We need to enter Python commands to perform this calculation</p> <p>Instructions</p> <p>Step 1 - \ud83d\udd22 Input the values for base and height and make them integer numbers.</p> <p>Add the code below to your project</p> <pre><code>base = int(input(\u201cWhat is the length of the Triangle base? \u201d))  #(1)\nheight =int(input(\u201cWhat is the height of the Triangle?\u201d))       #(2)\n</code></pre> <ol> <li> <ul> <li> Ask the user <code>\u201cWhat is the length of the base?\u201d</code> and wait for the user to type an answer.</li> <li> The answer is then converted into a number using the <code>int()</code> keyword and stored in the <code>base</code> variable so that the computer can use it again later.</li> </ul> </li> <li> <ul> <li> Ask the user <code>\u201cWhat is the height of the Triangle?\u201d</code> and wait for the user to type an answer.</li> <li> The answer is converted into a number using the <code>int()</code> keyword and stored in the <code>height</code> variable so that the computer can use it again later.</li> </ul> </li> </ol> <p>Step 2 - \ud83d\udda5\ufe0f Display the Answer</p> <pre><code>print(base* height)/ 2 #(1)\n</code></pre> <ol> <li> <p>- \ud83d\udda5\ufe0f Display the answer on your screen</p> </li> </ol> <p>Congratulations , You have just carried out a calculation using the two variables (<code>base and height</code>)and printed the result on the screen!</p> <p>Temperature Convertor</p> <p> </p> Instructions <p>General Problem</p> <p>Convert the temperature from <code>degrees celcius</code> to <code>degrees farenhiet</code></p> <p>To complete this algorithm we will need a single variable called <code>\u201cC\u201d</code> and we are going to carry out calculations and change the value it is storing one step at a time.</p> <p>To convert from Centigrade to Farenheit:</p> <ol> <li>Multiply C by 9,</li> <li>Divide the answer by 5</li> <li>Add 32 to the answer</li> </ol> <p>Instructions</p> <p>Step 1 - \ud83c\udf21\ufe0f Get the Temperature:</p> <pre><code>C = int(input(\u201cWhat is the temperature in C? \u201d)) #(1)\n</code></pre> <ol> <li> <ul> <li>Ask the user to enter the temperature.</li> <li>The answer is converted into a number using the <code>int()</code> keyword and stored in the <code>C</code> variable so that the computer can use it again later.</li> </ul> </li> </ol> <p>Step 2 - \ud83e\uddee Create the Calculation</p> <pre><code>C = C * 9  #(1)\nC = C / 5  #(2)\nF = C + 35 #(3)\n</code></pre> <ol> <li> <ul> <li>This takes the value in C, multiply the value in <code>C</code> by 9 and store the answer back in C again.</li> <li><code>C</code> now contains this new answer.</li> </ul> </li> <li> <ul> <li>Take the new value stored in <code>C</code> and divided it by 5 and </li> <li>Saves the new value back into <code>C</code>.</li> </ul> </li> <li> <ul> <li>Add 32 to the last answer and store it back into the <code>C</code> variable. </li> <li>The number that is now stored in the variable <code>C</code> is the orginal temperature converted into degrees Fahrenheit!</li> </ul> </li> </ol> <p>Step 3 - \ud83d\udda5\ufe0f Display the Answer   <pre><code>print (C)\n</code></pre></p> <p>Extra Credit Tasks</p> <p>\u2705 Finished....... <code>click the link below and work through the extra credit tasks.</code></p> <ul> <li> Input/Ouput Extra Credit Tasks</li> </ul>"},{"location":"Levels/BGE/S2/Python_Programming/3.0_Selection/","title":"Selection","text":"<p>In this lesson we are going to concentrate on getting to grips with the Python language and how we can solve problems when things go wrong.</p> <p>To do this we will be using the <code>Raspberry Pi Code Editor</code></p> Part 1 - Using the Raspberry Pi Code Editor <ul> <li> RPI Code Editor</li> </ul> <p>The Raspberry Pi Code Editor is a tool designed to help you write and run Python code on your Raspberry Pi. It provides a simple and user-friendly interface where you can create new Python programs, edit existing ones, and see the results immediately. </p> <p>You can use it to practice writing Python, explore different programming concepts, and even work with hardware projects. The editor makes it easy for both beginners and experienced programmers to get started with coding on the Raspberry Pi.</p> Part 2 - Hello World (Outputs) <p>Python allows us to output all kinds of things such as graphics and text. To simply output some text to the screen we can use the print() instruction. </p> <p>There is a tradition that when all computer science students write their first computer program, the most simple introductory program they write is to make the computer output two words. </p> <p>Those words are \u201cHello World!\u201d.</p> <p>In the <code>Editor Window</code> type in the command :</p> <p><pre><code>print (\u201cHello World!\u201d)\n</code></pre> and press the <code>Run</code> button.</p> <p>Congratulations! You have just issued your first Python instruction, a simple command to output some characters by using the <code>\u201cprint\u201d</code> function.</p> <p>\u23f0 5 Minute Task</p> <p>What else can you get the computer to print out?</p> Part 3 - Fixing Problems (Debugging) <p>Syntax Errors Now we are going to try something else. Every computer programmer makes mistakes and it's important that you know what to do when this happens. </p> <p>Let\u2019s try the same command as before but this time without the quotation marks, type in:</p> <p><pre><code>print (Hello World!)\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Congratulations! You have just made an error! </p> <p>You can tell its an erorr when you should see some writing appear in red that says <code>\u201cSyntaxError\u201d</code>.</p> <p>Question</p> <p>What do we think <code>\u201cSyntaxError\"</code> might mean\u201d?</p> <p>Name Errors</p> <p>This time we are going to make a mistake with the name of the print function.</p> <p>Let's type in this time:</p> <p><pre><code>Print (\"Hello World!\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What do we think <code>\u201cNameError\"</code> might mean\u201d?</p> <p>Note</p> <p>Computers are really, really useful and they can be used to carry out lots of clever things but you have to remember that computers are also really, really dumb.</p> <p>So dumb in fact that they don\u2019t know the difference between print spelled with a capital P or not!</p> Part 4 - Inputs <p>If an output puts data out of the program, an input allows us to put some data in to our program from the outside world. </p> <p>Again, Python has many methods that allow this to happen, the most basic of these methods is called <code>input()</code>.</p> <p>In the <code>Editor Window</code> type in the following instruction:</p> <p><pre><code>print (input(\"What's your name?\"))\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What just happened?</p> Part 5 - Variables <p>Computers use all sorts of data to perform various tasks. </p> <p>Question</p> <p>What do we mean by data?</p> <p>In programming we need a way to store data so that we can come back and work on it at a later point. </p> <p><code>To accomplish this we can use variables.</code></p> <p>So far we have used print() to display a string \u201cHello World\u201d. </p> <p>We are going to do the same kind of thing now but this time the string (in this case a name) is stored in a variable instead. </p> <p>Last time the String was a static, unchanging value but now it is a dynamic, changeable value. </p> <p>We will now going to create <code>two</code> variables, these will be called <code>YourName</code> and <code>BestFriend</code>.</p> <p>Type in the following command:</p> <p><pre><code>YourName = input(\"What's your name?\")\nBestFriend = input(\"What is your friend's name?\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Type in your name and press Enter. </p> <p>Type in your best friends name and press Enter. </p> <p>Question</p> <p>What just happened?</p> <p>It is now possible to always access this data by using the titles you have given those variables in Python.</p> <p>In the <code>Editor Window</code> type in the following instruction:</p> <p><pre><code>print (YourName)\n</code></pre> ...and press the <code>Run</code> button.</p> <p>Question</p> <p>What just happened?</p> <p>How could we display our BestFriend?</p> <p>Try typing your answer into the editor window and see if it worked....</p> Part 6 - Calculations and Different Types of Data <p>We are now going to learn how to make python process our data by doing some calculations and about how computers treat different types of data.</p> <p>In this part we will see that the input command always reads data in as a string (text). If we want Python to treat data as numbers, we need to specifically tell it do so.</p> <p>Enter the following commands:</p> <p><pre><code>first = input(\"Enter first number\")\nsecond = input(\"Enter second number\")\n</code></pre> ...and press the <code>Run</code> button.</p> <p><code>Enter the first number and press enter</code></p> <p><code>Enter the second number and press enter</code></p> <p>What will happen if we try to:</p> <p><pre><code>print (first + second)\n</code></pre> Try typing it in.....</p> <p><code>What happens?</code></p> <p>We will now re-enter our previous inputs but we are also going to use a function called <code>\u201cint\u201d</code>.</p> <p><code>\u201cInt\u201d</code> tells the computer we want it to treat data as an integer. </p> <p>An integer is a whole number, like 1, -10, 999 and so on.</p> <p>Enter the following commands:</p> <p><pre><code>first = int(input(\"Enter first number\"))\nsecond = int(input(\"Enter second number\"))\nprint (first + second)\n</code></pre> ...and press the <code>Run</code> button.</p> <p><code>Enter the first number and press enter</code></p> <p><code>Enter the second number and press enter</code></p> <p>Now the program is working as we want it to!</p> <p>\u23f0 5 minute task - Write some calculations in the <code>editor window</code> that use the following calculations:</p> <p>Multiply * </p> <pre><code>print (first * second)\n</code></pre> <p>Divide / </p> <p><pre><code>print (first / second)\n</code></pre> Subtract \u2013</p> <pre><code>print (first \u2013 second)\n</code></pre> Tasks: Introducing Python <p>Area of a Triangle</p> <p> </p> Instructions <p>General Problem</p> <p>The <code>Maths Department</code> have asked you to create a program that calculates the area of a triangle.</p> <p>You can calculate the area of a triangle using the formula </p> <p><code>area = half base times height.</code></p> <p>We need to enter Python commands to perform this calculation</p> <p>Instructions</p> <p>Step 1 - \ud83d\udd22 Input the values for base and height and make them integer numbers.</p> <p>Add the code below to your project</p> <pre><code>base = int(input(\u201cWhat is the length of the Triangle base? \u201d))  #(1)\nheight =int(input(\u201cWhat is the height of the Triangle?\u201d))       #(2)\n</code></pre> <ol> <li> <ul> <li> Ask the user <code>\u201cWhat is the length of the base?\u201d</code> and wait for the user to type an answer.</li> <li> The answer is then converted into a number using the <code>int()</code> keyword and stored in the <code>base</code> variable so that the computer can use it again later.</li> </ul> </li> <li> <ul> <li> Ask the user <code>\u201cWhat is the height of the Triangle?\u201d</code> and wait for the user to type an answer.</li> <li> The answer is converted into a number using the <code>int()</code> keyword and stored in the <code>height</code> variable so that the computer can use it again later.</li> </ul> </li> </ol> <p>Step 2 - \ud83d\udda5\ufe0f Display the Answer</p> <pre><code>print(base* height)/ 2 #(1)\n</code></pre> <ol> <li> <p>- \ud83d\udda5\ufe0f Display the answer on your screen</p> </li> </ol> <p>Congratulations , You have just carried out a calculation using the two variables (<code>base and height</code>)and printed the result on the screen!</p> <p>Temperature Convertor</p> <p> </p> Instructions <p>General Problem</p> <p>Convert the temperature from <code>degrees celcius</code> to <code>degrees farenhiet</code></p> <p>To complete this algorithm we will need a single variable called <code>\u201cC\u201d</code> and we are going to carry out calculations and change the value it is storing one step at a time.</p> <p>To convert from Centigrade to Farenheit:</p> <ol> <li>Multiply C by 9,</li> <li>Divide the answer by 5</li> <li>Add 32 to the answer</li> </ol> <p>Instructions</p> <p>Step 1 - \ud83c\udf21\ufe0f Get the Temperature:</p> <pre><code>C = int(input(\u201cWhat is the temperature in C? \u201d)) #(1)\n</code></pre> <ol> <li> <ul> <li>Ask the user to enter the temperature.</li> <li>The answer is converted into a number using the <code>int()</code> keyword and stored in the <code>C</code> variable so that the computer can use it again later.</li> </ul> </li> </ol> <p>Step 2 - \ud83e\uddee Create the Calculation</p> <pre><code>C = C * 9  #(1)\nC = C / 5  #(2)\nF = C + 35 #(3)\n</code></pre> <ol> <li> <ul> <li>This takes the value in C, multiply the value in <code>C</code> by 9 and store the answer back in C again.</li> <li><code>C</code> now contains this new answer.</li> </ul> </li> <li> <ul> <li>Take the new value stored in <code>C</code> and divided it by 5 and </li> <li>Saves the new value back into <code>C</code>.</li> </ul> </li> <li> <ul> <li>Add 32 to the last answer and store it back into the <code>C</code> variable. </li> <li>The number that is now stored in the variable <code>C</code> is the orginal temperature converted into degrees Fahrenheit!</li> </ul> </li> </ol> <p>Step 3 - \ud83d\udda5\ufe0f Display the Answer   <pre><code>print (C)\n</code></pre></p> <p>Extra Credit Tasks</p> <p>\u2705 Finished....... <code>click the link below and work through the extra credit tasks.</code></p> <ul> <li> Input/Ouput Extra Credit Tasks</li> </ul>"},{"location":"Levels/BGE/S2/Python_Programming/Extra_Credit_Tasks/","title":"Extra Credit Tasks","text":"Input/Output \u2b50\ufe0f Task 1 - Double Trouble <p>General Problem</p> <pre><code>You\u2019re helping your friend figure out how many cupcakes they\u2019ll have if they double their batch.\n</code></pre> <p>Instructions</p> <ol> <li> <p>Create a variable called <code>number</code> that will ask the user \"How many cupcakes have you made?\"</p> </li> <li> <p>Create another variable called <code>total</code> that will multiply the total made by 2</p> </li> <li> <p>Finally, print the result.</p> </li> </ol> <p>Example Data</p> <ul> <li><code>Cupcake = 4</code></li> <li><code>Doubled = 8</code></li> </ul> \u2b50\ufe0f\u2b50\ufe0f Task 2 - Area of a Rectangle <p>General Problem</p> <pre><code>You\u2019re measuring your bedroom floor to see how big a rug you need.\n</code></pre> <p>Instructions</p> <ol> <li> <p>Create a variable called <code>height</code> that will ask the user to \"Enter the width of the floor (m):\"</p> </li> <li> <p>Create another variable called <code>total</code> that will that will ask the user to \"Enter the length of the floor (m):\"</p> </li> <li> <p>Calculate the area</p> </li> <li> <p>Finally, print the area.</p> </li> </ol> <p>Example Data</p> <ul> <li><code>Width = 4</code></li> <li><code>Height = 3</code></li> <li><code>Area = 12</code></li> </ul> \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f Task 3 - Journey Calculator <p>General Problem</p> <pre><code>You want to find out how fast you were going on a cycling trip.\n</code></pre> <p>Task</p> <p>Create a program that will ask the user how far they travelled (in km) and how long it took (in hours). Calculate and display the average speed.</p> <p>Example Data</p> <ul> <li><code>Distance = 45</code></li> <li><code>Time = 1.5</code></li> <li><code>Average Speed = 30km/h</code></li> </ul> \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f Task 4 - Magic Number <p>General Problem</p> <pre><code>You\u2019ve made a number trick to amaze your friends. They give you a number, and your program always turns it into something unexpected!\n</code></pre> <p>Task</p> <p>Create a program that will ask the user for a number. Add 5, multiply by 2, subtract 4, then divide by 3. Show the result.</p> <p>Example Data</p> <ul> <li><code>Input = 3</code></li> <li><code>Magic Number = 4.0</code></li> </ul> \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f Task 5 - Simple Shopping Calculator <p>General Problem</p> <pre><code>You\u2019re buying snacks for a movie night. You get a 10% discount at the till!\n</code></pre> <p>Task</p> <p>Create a program that will ask the user how much 3 different items cost. Add them up and calculate the total after a 10% discount.</p> <p>Example Data</p> <ul> <li><code>Items: \u00a32.50, \u00a31.20, \u00a33.00</code></li> <li><code>Total = \u00a36.70</code></li> <li><code>Discount = \u00a30.67</code></li> <li><code>Final Price = \u00a36.03</code></li> </ul>"},{"location":"Levels/BGE/S3/Introduction%20To%20Python/","title":"Introduction to Python Programming","text":"<p>??? \"Lesson One - Displaying Data</p> <pre><code>==The Print Statement==\n\nToday we\u2019ll learn about the print command, which lets us make the computer show messages or answers on the screen:\n``` python linenums=\"1\"\nprint (\"Hello World!\")\n```\n!!! info\n\n    * print() is written in lowercase only\n    * print() displays whatever is between the ()\n    * print() forms part of a sequence\n</code></pre> Lesson Two - Working with Numbers <p>Mathematical Operations</p> <p>Today we will be using the print command to also perform calculations</p> <p>There are four operators that we need to know:</p> <p> Operator Used For + Addition - Subtraction * Multiplication Should be accepted 180 Exceptional Should be rejected </p> Lesson Three - Variables and Numbers Lesson Four - Variables and Words Lesson Five - Simple Selection"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/%28TEMP%29_Spawning_Enemies%20copy/","title":"\ud83d\udc7e 04 - Spawning the Enemy","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll will start to make your game come alive. You will be learning how to make the enemy sprites fall using variables, an array, random and logic statements to make the enemy spawn at different places in your game screen.</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use an Array to store more than one Sprite.</li> <li>How to effectively us Logic statements to make your game think independently.</li> <li>How to use Random to keep the game fun by allowing tdifferent enemy to fall at Random times</li> </ul> <p>By the end of the lesson, your game will have enemys to fight against!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create enemy that falls from the top of the screen.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section select Make a Variable and name it Random Enemy:</p> <p> </p> <p>4 - In the Sprites section out drag out Set mySprite to kind player and add it to the bottom of your enemyFall Function:</p> <p> </p> <p>\ud83d\udea8 Change the mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the of kind Player to Enemy by clicking on the little arrow</p> <p>5 - In the Advanced section, select Arrays:</p> <p> </p> <p>And drag out a get random value from list and add it to the grey square:</p> <p> </p> <p>6 - In the Sprites section drag a set mySprite auto destroy  and add it to the bottom of your enemyFall Function: <p> </p> <p>\ud83d\udea8 Change auto destroy to invisible by clicking on the little arrow</p> <p>\ud83d\udea8 Change the slider from OFF to ON</p> <p>7 - In the Sprites section out drag out Set mySprite x to 0 and add it to the bottom of your enemyFall Function::</p> <p> </p> <p>\ud83d\udea8 Change  my sprite to randomEnemy</p> <p>\ud83d\udea8 Change x to vy (velocity y) by clicking on the little arrow</p> <p>\ud83d\udea8 Change the vy (velocity y) to 60</p> <p>8 - In the Game section drag out on game update every 500ms and add it to your workspace:</p> <p> </p> <p>\ud83d\udea8 Change 500 ms to 200 ms by clicking on the little arrow</p> <p>9 - In the Logic section drag out if  then and add it to your on game update block: <p> </p> <p>11 - In the Logic section drag out &lt; 0 = 0 &gt; and add it to your if  then block: <p> </p> <p>\ud83d\udea8 Change = to &gt; by clicking on the little arrow</p> <p>\ud83d\udea8 Change the 2nd 0 to 120</p> <p>12 - In the Sprites section drag out mySprite x and add it to the first 0:</p> <p> </p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the  x to y</p> <p>13 - From the enemyFall function find the code block below and duplicate it:</p> <p>\ud83d\udea8 To duplicate a block right click on the block and select duplicate.</p> <p></p> <p>add the duplicated block to your if block:</p> <p></p> <p>14 - In the Sprites section drag out set my sprite posistion to x: 0 y: 0 and add it to your if block:</p> <p></p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>15 - In the Math section drag out pick random 0 to 0 and add it to the x co-ordinate in the set random enemy block:</p> <p></p> <p>\ud83d\udea8 Keep the 1st number as 0 and set the 2nd number to 120 </p> <p>16 - Find this block in your enemyFall Function and duplicate it:</p> <p></p> <p>14 - Add your duplicated block to your if......then block:</p> <p></p> <p>15 - Add your duplicated block to your if......then block:</p> <p></p> <p>16 - Finally, in Functions grab a call enemyFall block and add it to the bottom of your start block:</p> <p></p> <p>\ud83e\uddea Checkpoint</p> <p>You will now be able to spawn random enemy in a controlled manner.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a counter to for your game to see how many aliens have fallen</p> <p>\ud83d\udca1 - This will be needed in future lessons</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Create a new variable called count</p> </li> <li> <p>Add a set count to 0 block to the bottome of your start block.</p> </li> <li> <p>In your if block add grab a change count by 1</p> </li> <li> <p>To check if your count is working add this block to the end of your if block. </p> </li> <li> <p>Once you know it is working you can delete your change count by 1 block</p> </li> </ol> <p>\ud83d\udea8 DO NOT DELETE THE Set Count to 0 IN YOUR START BLOCK</p> <p>\ud83c\udfaf Success Criteria: </p> <p>Add a another random enemy spawn to your game.</p> <p>\ud83d\udca1 When we spawn our enemies, the bonus enemies will generate more points or remove more lives\ud83d\udd79\ufe0f</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Duplicate the code blocks from enemyFall that are missing from your bonusEnemy function and add them to your bonusEnemy function</p> </li> <li> <p>Add another if......then block to the if......then block you have already created:</p> </li> </ol> <p></p> <ol> <li>Using  the count variable you have just created, see if you can work out how to make your bonusEnemy  fall when the count variable reaches the number 5.</li> </ol> <p>\ud83d\udea8 Hint: you will need one of these: </p> <p></p> <p>\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f Extra Challenge:</p> <p>Using the blocks below make your bonus enemy fall whenever your count divided by 5 = 0 (doesn't have a remainder):</p> <p></p> <p>This is a math function called modulo </p> <p>Modulo is a key component in computing programming.</p> <p>Once you have mastered this, you can apply this technique to different arrays and different bonuses. </p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/1.0_Setting_up_the_Player/","title":"\ud83d\udc68\u200d\ud83d\ude80 Setting Up the Player","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you will design the player spaceship \u2014 the hero of your game. Your player will be able to move left and right across the bottom of the screen using the arrow keys, just like in the classic arcade game.</p> <p>Sprites are the characters or objects in your game. By the end of this lesson, you will have created a sprite, placed it on the screen, and added controls so the player can move it using the keyboard.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a player spaceship that can move left and right.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Click New Project and name it Space Invaders.</p> <p>3 - In Sprites:</p> <p> </p> <p>4 - Drag out set mySprite to sprite of kind Player and add it to on start:</p> <p> </p> <p>5 - Click on the Grey square:</p> <p> </p> <p>and create your spaceship:</p> <p>\ud83d\udea8 Make sure the canvas size is 16 x 16</p> <p> </p> <p>6 - Drag a set mySprite position to x:0  y:0 and place the sprite at the bottom of the on start block. </p> <p>\ud83d\udea8 Set the coordinates to x: 80 y: 100</p> <p> </p> <p>7 - In controller: </p> <p> </p> <p>Drag move mySprite with buttons and add it to the bottom of the start block:</p> <p>\ud83d\udea8 Click + and set the coordinates to vx: 100, vy: 0 to allow only horizontal movement:</p> <p> </p> <p>8 - In Sprites:</p> <p> </p> <p>Drag move mySprite stay in screen and add it to the bottom of the start block:</p> <p>\ud83d\udea8 Set the slider to on to stop the spaceship from leaving the screen:</p> <p> </p> <p>\ud83e\uddea Checkpoint</p> <p>You should be able to move your ship left and right.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a simple title screen that appears before the game starts.</p> <p>\ud83d\udca1 This helps your game feel more complete and gives players a clear starting point.</p> <p>\u2705 Instructions:</p> <ol> <li>Go to the Game section</li> <li>Drag out the splash block and add it to the top of your start block</li> <li>Type your game name into the splash block e.g. \"Space Invaders\" or \"Alien Blaster!\"</li> </ol> <p>\ud83c\udfaf Success Criteria: </p> <p>Let the player move diagonally using arrow keys.</p> <p>\ud83d\udca1 This allows your spaceship to move up and down as well as left and right.</p> <p>\u2705 Instructions:</p> <ol> <li>Find the block move mySprite with buttons vx vy.</li> <li>Change vy from 0 to 100.</li> <li>Using the blocks below, restrict the Y movement range so the ship stays in the lower part of the screen:</li> </ol> <p> </p> <p>\ud83d\udea8  Some blocks may need to be duplicated</p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/2.0_Shooting_Lasers/","title":"\ud83d\udd2b 02 - Shooting Lasers","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll give your player sprite the ability to fire lasers or bullets when a button is pressed \u2014 just like in a real space shooter!</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use the Space Bar to fire a projectile.</li> <li>Make the projectile move upwards on the screen.</li> <li>Keep the game fun by allowing the player to shoot again and again.</li> </ul> <p>By the end of the lesson, your spaceship will be ready to fight back against enemies in future lessons!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Make the Space bar shoot lasers upwards</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Extensions section:</p> <p> </p> <p>Select Browser Events and return to the workspace:</p> <p> </p> <p>4 - Drag out on A key pressed and add it to your workspace:</p> <p> </p> <p>\ud83d\udea8 Change the A to Space by clicking on the little arrow</p> <p>5 - In the Variables Section:</p> <p> </p> <p>Select Make a Variable:</p> <p> </p> <p>And name it Laser:</p> <p> </p> <p>6 - Drag a set projectile to projectile from mySprite with vx:50  vy:50 and add it to the on Space Pressed block. </p> <p> </p> <p>\ud83d\udea8 Change projectile to Laser and set the coordinates to vx: 0 vy: -100</p> <p>7 - Click on the Grey square:</p> <p> </p> <p>and create your laser:</p> <p> </p> <p>\ud83e\uddea Checkpoint</p> <p>Pressing Space should now shoot a laser upward from your ship.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Make your game play a sound when you press Space to fire.</p> <p>\ud83d\udca1 This helps your game feel more realistic and fun.</p> <p>\u2705 Instructions:</p> <ol> <li>Go to the Music section</li> <li>Drag out the play sound until done block and add it to the top of your on Space key pressed block</li> <li>Change the sound to pew pew</li> </ol> <p>\ud83e\udde9 Challenge Yourself:</p> <p>Try different sounds or make your own by changing the play sound until your done to play melody until done.</p> <p>\ud83c\udfaf Success Criteria: </p> <p>Stop a player from spamming the fire button</p> <p>\ud83d\udca1 This makes your game have a more classic arcade game feel\ud83d\udd79\ufe0f</p> <p>\u2705 Instructions:</p> <ol> <li>Using the blocks below add a short delay between shots to your on Space key pressed block:</li> </ol> <p> </p> <p>\ud83d\udea8  Some blocks may need to be duplicated</p> <p>\ud83d\udea8  You will need to create a Variable called canShoot</p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/3.0_Adding_Enemies/","title":"\ud83d\udc7e 03 - Creating the Enemy","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll give your player sprite the ability to fire lasers or bullets when a button is pressed \u2014 just like in a real space shooter!</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use the Space Bar to fire a projectile.</li> <li>Make the projectile move upwards on the screen.</li> <li>Keep the game fun by allowing the player to shoot again and again.</li> </ul> <p>By the end of the lesson, your spaceship will be ready to fight back against enemies in future lessons!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create enemy that falls from the top of the screen.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section, select Make a Variable. Name the new variable randomEnemyArray:</p> <p>4 - In the Advanced section select Functions and then Make a Function:</p> <p> </p> <p>5 - In the Edit Function pop up, click on doSomething, rename the Function enemyFall and select Done:</p> <p> </p> <p>6 - In the Advanced section, select Arrays:</p> <p> </p> <p>And drag out a set list to array of (0) (1) - + and add it to the function enemyFall block:</p> <p> </p> <p>\ud83d\udea8 Change list to randomEnemyArray by clicking on the little arrow</p> <p>7 - In the Sprites section drag a sprite of kind player into the workspace . </p> <p> </p> <p>8 - Click on the Grey Square:</p> <p> </p> <p>and drag it into array of (0):</p> <p> </p> <p>9 - Double click on the Grey Square and draw your alien:</p> <p> </p> <p>\ud83e\uddea Checkpoint</p> <p>You will now have an enemy in your game that is ready to be spawned in the next lesson!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create another 3 Aliens for your game to add different dimensions to your game.</p> <p>\ud83d\udca1 This helps your game feel more complete and gives players a clear starting point.</p> <p>\u2705 Instructions:</p> <ol> <li>Find the Function enemyFall Game</li> <li>Click on the + sign to add another location to your array.</li> <li>Click on the grey square and create your next enemy</li> <li>repeat the step above to add a third enemy </li> </ol> <p>\ud83c\udfaf Success Criteria: </p> <p>Create another Array to store your bonusEnemy</p> <p>\ud83d\udca1 When we spawn our enemies, the bonus enemies will generate more points or remove more lives\ud83d\udd79\ufe0f</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Create another Array  and name it bonusEnemy </p> </li> <li> <p>Add the array to the enemyFall Function and add at least 3 bonus enemies</p> </li> </ol> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/4.0_Spawning_Enemies/","title":"\ud83d\udc7e 04 - Spawning the Enemy","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll will start to make your game come alive. You will be learning how to make the enemy sprites fall using variables, an array, random and logic statements to make the enemy spawn at different places in your game screen.</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use an Array to store more than one Sprite.</li> <li>How to effectively us Logic statements to make your game think independently.</li> <li>How to use Random to keep the game fun by allowing tdifferent enemy to fall at Random times</li> </ul> <p>By the end of the lesson, your game will have enemys to fight against!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create enemy that falls from the top of the screen.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section select Make a Variable and name it Random Enemy:</p> <p> </p> <p>4 - In the Sprites section out drag out Set mySprite to kind player and add it to the bottom of your enemyFall Function:</p> <p> </p> <p>\ud83d\udea8 Change the mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the of kind Player to Enemy by clicking on the little arrow</p> <p>5 - In the Advanced section, select Arrays:</p> <p> </p> <p>And drag out a get random value from list and add it to the grey square:</p> <p> </p> <p>6 - In the Sprites section drag a set mySprite auto destroy  and add it to the bottom of your enemyFall Function: <p> </p> <p>\ud83d\udea8 Change auto destroy to invisible by clicking on the little arrow</p> <p>\ud83d\udea8 Change the slider from OFF to ON</p> <p>7 - In the Sprites section out drag out Set mySprite x to 0 and add it to the bottom of your enemyFall Function::</p> <p> </p> <p>\ud83d\udea8 Change  my sprite to randomEnemy</p> <p>\ud83d\udea8 Change x to vy (velocity y) by clicking on the little arrow</p> <p>\ud83d\udea8 Change the vy (velocity y) to 60</p> <p>8 - In the Game section drag out on game update every 500ms and add it to your workspace:</p> <p> </p> <p>\ud83d\udea8 Change 500 ms to 200 ms by clicking on the little arrow</p> <p>9 - In the Logic section drag out if  then and add it to your on game update block: <p> </p> <p>11 - In the Logic section drag out &lt; 0 = 0 &gt; and add it to your if  then block: <p> </p> <p>\ud83d\udea8 Change = to &gt; by clicking on the little arrow</p> <p>\ud83d\udea8 Change the 2nd 0 to 120</p> <p>12 - In the Sprites section drag out mySprite x and add it to the first 0:</p> <p> </p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the  x to y</p> <p>13 - From the enemyFall function find the code block below and duplicate it:</p> <p>\ud83d\udea8 To duplicate a block right click on the block and select duplicate.</p> <p></p> <p>add the duplicated block to your if block:</p> <p></p> <p>14 - In the Sprites section drag out set my sprite posistion to x: 0 y: 0 and add it to your if block:</p> <p></p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>15 - In the Math section drag out pick random 0 to 0 and add it to the x co-ordinate in the set random enemy block:</p> <p></p> <p>\ud83d\udea8 Keep the 1st number as 0 and set the 2nd number to 120 </p> <p>16 - Find this block in your enemyFall Function and duplicate it:</p> <p></p> <p>14 - Add your duplicated block to your if......then block:</p> <p></p> <p>15 - Add your duplicated block to your if......then block:</p> <p></p> <p>16 - Finally, in Functions grab a call enemyFall block and add it to the bottom of your start block:</p> <p></p> <p>\ud83e\uddea Checkpoint</p> <p>You will now be able to spawn random enemy in a controlled manner.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a counter to for your game to see how many aliens have fallen</p> <p>\ud83d\udca1 - This will be needed in future lessons</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Create a new variable called count</p> </li> <li> <p>Add a set count to 0 block to the bottome of your start block.</p> </li> <li> <p>In your if block add grab a change count by 1</p> </li> <li> <p>To check if your count is working add this block to the end of your if block. </p> </li> <li> <p>Once you know it is working you can delete your change count by 1 block</p> </li> </ol> <p>\ud83d\udea8 DO NOT DELETE THE Set Count to 0 IN YOUR START BLOCK</p> <p>\ud83c\udfaf Success Criteria: </p> <p>Use the count function to change the firing sound when it is greater than five.</p> <p>\ud83d\udca1 </p> <p>\u2705 Instructions:</p> <p>1 - Add these code blocks to your program:</p> <p></p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/5.0_Adding_the_Bonus/","title":"\ud83d\udc7e 05 - Adding the Bonus","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll will start to make your game come alive. You will be learning how to make the enemy sprites fall using variables, an array, random and logic statements to make the enemy spawn at different places in your game screen.</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use an Array to store more than one Sprite.</li> <li>How to effectively us Logic statements to make your game think independently.</li> <li>How to use Random to keep the game fun by allowing tdifferent enemy to fall at Random times</li> </ul> <p>By the end of the lesson, your game will have enemys to fight against!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a count check in our program to see if a bonus enemy should fall and give the player extra points.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Logic section drag out if true then and add it below the change count by 1 in your enemyFall Function:</p> <p> </p> <p>4 - In the Logic section drag out Comparisson Block and add it to your if true then block:</p> <p> </p> <p>5 - In the Variables section select your count variable and add it your comparison block: </p> <p> </p> <p>\ud83d\udea8 Change the 0 to 5 on the other side</p> <p>6 - Right click on on set randomEnemy to and duplicate the block. Add this duplicated block to your if.....then block:</p> <p> </p> <p>\ud83d\udea8 Change the kind from Enemy to bonusKind by clicking on the little arrow and selecting create new kind</p> <p>7 - From the Sprites section find My sprite say and add it below your bonusKind block:</p> <p> </p> <p>\ud83d\udea8 Change mySprite  to randomEnemy and change the smiley face to Bonus Time</p> <p>8 - Click on the little + sign at the bottom of your if.......then block and move the enemy kind block into it:</p> <p> </p> <p>9 - Now you need to duplicate all the code you have just created and add it your on game update block:</p> <p>\ud83d\udea8 Make sure it looks exactly this or code will not work</p> <p> </p> <p>You will now be able to spawn random enemy in a controlled manner.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a counter to for your game to see how many aliens have fallen</p> <p>\ud83d\udca1 - This will be needed in future lessons</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Click on the little + sign at the bottom of your if.......then block and end more point checks. </p> </li> <li> <p>Make it say bonus at 10, 15 and 20</p> </li> </ol> <p>\ud83c\udfaf Success Criteria: </p> <p>Use the modulo function to make your bonus enemy fall whenever the remainder of a divisible calculation is 0.</p> <p>\ud83d\udca1 Modulo is a key component in computing programming.  Once you have mastered this, you can apply this technique to different arrays and different bonuses. </p> <p>\u2705 Instructions:</p> <p>1 - Using the blocks below, make your bonus enemy fall whenever your count divided by 5 = 0 (doesn't have a remainder):</p> <p>\ud83d\udea8 Note: you will need to change all claculations within your program or it will be break</p> <p></p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/6.0_Polish_and_UI/","title":"\ud83c\udfa8 Lesson 6: Polish and UI","text":"<p>\ud83c\udfaf Goal</p> <p>Improve the look and feel of the game.</p> <p>\u2705 Steps</p> <p>Use info.setScore(0) and info.setLife(3) at start.</p> <p>Add sounds using ||music:Music|| (e.g., on laser or enemy hit).</p> <p>Use game.splash(\"Space Invaders\") to show a title screen.</p> <p>Optional: Add background image using ||scene:Scene||.</p> <p>\ud83e\uddea Checkpoint</p> <p>Game has score, lives, sound, and a title screen.</p> <p>\ud83e\udde0 Extension Tasks (Hopper Pathway)</p> <p>Add multiple enemy types with different images.</p> <p>Create enemy bullets and add dodge mechanics.</p> <p>Add levels or increase difficulty over time.</p> <p>Introduce a boss with more health.</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/Temp/","title":"\ud83d\udc7e 04 - Spawning the Enemy","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, you\u2019ll will start to make your game come alive. You will be learning how to make the enemy sprites fall using variables, an array, random and logic statements to make the enemy spawn at different places in your game screen.</p> <p>You\u2019ll learn how to:</p> <ul> <li>Use an Array to store more than one Sprite.</li> <li>How to effectively us Logic statements to make your game think independently.</li> <li>How to use Random to keep the game fun by allowing tdifferent enemy to fall at Random times</li> </ul> <p>By the end of the lesson, your game will have enemys to fight against!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create enemy that falls from the top of the screen.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section select Make a Variable and name the variable counted</p> <p>4 - In the Variables section grab a set 'variable name' to 0 and add it to the top of your on start block: </p> <p> </p> <p>\ud83d\udea8 Change the variable name to counted by clicking on the little arrow</p> <p>5 - In the Logic section grab a false block and add it to the 0 of your set counted to block:</p> <p> </p> <p>6 - In the Logic section drag out if true then and add it below the change count by 1 in your enemyFall Function:</p> <p> </p> <p>7 - In the Sprites section out drag out Set mySprite to kind player and add it to your if true then block</p> <p> </p> <p>\ud83d\udea8 Change the mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the of kind Player to Enemy by clicking on the little arrow</p> <p>7 - In the Advanced section, select Arrays:</p> <p> </p> <p>And drag out a get random value from list and add it to the grey square:</p> <p> </p> <p>6 - In the Sprites section drag a set mySprite auto destroy  and add it to the bottom of your enemyFall Function: <p> </p> <p>\ud83d\udea8 Change auto destroy to invisible by clicking on the little arrow</p> <p>\ud83d\udea8 Change the slider from OFF to ON</p> <p>7 - In the Sprites section out drag out Set mySprite x to 0 and add it to the bottom of your enemyFall Function::</p> <p> </p> <p>\ud83d\udea8 Change  my sprite to randomEnemy</p> <p>\ud83d\udea8 Change x to vy (velocity y) by clicking on the little arrow</p> <p>\ud83d\udea8 Change the vy (velocity y) to 60</p> <p>8 - In the Game section drag out on game update every 500ms and add it to your workspace:</p> <p> </p> <p>\ud83d\udea8 Change 500 ms to 200 ms by clicking on the little arrow</p> <p>9 - In the Logic section drag out if  then and add it to your on game update block: <p> </p> <p>11 - In the Logic section drag out &lt; 0 = 0 &gt; and add it to your if  then block: <p> </p> <p>\ud83d\udea8 Change = to &gt; by clicking on the little arrow</p> <p>\ud83d\udea8 Change the 2nd 0 to 120</p> <p>12 - In the Sprites section drag out mySprite x and add it to the first 0:</p> <p> </p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the  x to y</p> <p>13 - From the enemyFall function find the code block below and duplicate it:</p> <p>\ud83d\udea8 To duplicate a block right click on the block and select duplicate.</p> <p></p> <p>add the duplicated block to your if block:</p> <p></p> <p>14 - In the Sprites section drag out set my sprite posistion to x: 0 y: 0 and add it to your if block:</p> <p></p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>15 - In the Math section drag out pick random 0 to 0 and add it to the x co-ordinate in the set random enemy block:</p> <p></p> <p>\ud83d\udea8 Keep the 1st number as 0 and set the 2nd number to 120 </p> <p>16 - Find this block in your enemyFall Function and duplicate it:</p> <p></p> <p>14 - Add your duplicated block to your if......then block:</p> <p></p> <p>15 - Add your duplicated block to your if......then block:</p> <p></p> <p>16 - Finally, in Functions grab a call enemyFall block and add it to the bottom of your start block:</p> <p></p> <p>\ud83e\uddea Checkpoint</p> <p>You will now be able to spawn random enemy in a controlled manner.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a counter to for your game to see how many aliens have fallen</p> <p>\ud83d\udca1 - This will be needed in future lessons</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Create a new variable called count</p> </li> <li> <p>Add a set count to 0 block to the bottome of your start block.</p> </li> <li> <p>In your if block add grab a change count by 1</p> </li> <li> <p>To check if your count is working add this block to the end of your if block. </p> </li> <li> <p>Once you know it is working you can delete your change count by 1 block</p> </li> </ol> <p>\ud83d\udea8 DO NOT DELETE THE Set Count to 0 IN YOUR START BLOCK</p> <p>\ud83c\udfaf Success Criteria: </p> <p>Add a another random enemy spawn to your game.</p> <p>\ud83d\udca1 When we spawn our enemies, the bonus enemies will generate more points or remove more lives\ud83d\udd79\ufe0f</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Duplicate the code blocks from enemyFall that are missing from your bonusEnemy function and add them to your bonusEnemy function</p> </li> <li> <p>Add another if......then block to the if......then block you have already created:</p> </li> </ol> <p></p> <ol> <li>Using  the count variable you have just created, see if you can work out how to make your bonusEnemy  fall when the count variable reaches the number 5.</li> </ol> <p>\ud83d\udea8 Hint: you will need one of these: </p> <p></p> <p>\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f Extra Challenge:</p> <p>Using the blocks below make your bonus enemy fall whenever your count divided by 5 = 0 (doesn't have a remainder):</p> <p></p> <p>This is a math function called modulo </p> <p>Modulo is a key component in computing programming.</p> <p>Once you have mastered this, you can apply this technique to different arrays and different bonuses. </p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/_Destroying_Enemies/","title":"\ud83d\udca5 Lesson 4: Destroying Enemies","text":"<p>\ud83c\udfaf Goal</p> <p>\u2705 Steps</p> <p>In ||sprites:Sprites||, use on projectile of kind Projectile overlaps enemy of kind Enemy.</p> <p>Inside it:</p> <p>Use destroy enemy.</p> <p>Add info.changeScoreBy(1) to increase score.</p> <p>Optional: Add a visual effect (like fire or spray).</p> <p>\ud83e\uddea Checkpoint</p> <p>Enemies disappear and score increases when hit by lasers.</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/_Destroying_Enemies/#05-destroying-enemies","title":"\ud83d\udc7e 05 - Destroying Enemies","text":"\ud83d\udd79\ufe0f Introduction\ud83e\uddf1 Building the Foundations\ud83c\udfae Turing\ud83d\udc7e Hopper <p>In this lesson, </p> <p>You\u2019ll learn how to:</p> <ul> <li>Use an Array to store more than one Sprite.</li> <li>How to effectively us Logic statements to make your game think independently.</li> <li>How to use Random to keep the game fun by allowing tdifferent enemy to fall at Random times</li> </ul> <p>By the end of the lesson, your game will have enemys to fight against!</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Destroy enemies when hit by a laser.</p> <p>Note: To make our program work as it should, we will need to change some of our previously created code.</p> <p>\u2705 Instructions</p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section, select Make a Variable. Name the new variable counted:</p> <p>4 - From the Variables section grab a set 'variable name' to 0 and add it to the top of your on start block: </p> <p> </p> <p>\ud83d\udea8 Change the variable name to counted by clicking on the little arrow</p> <p>5 - In the Logic section grab a false block and add it to the 0 of your set counted to block:</p> <p> </p> <p>6 - In the Logic section drag out if true then and add it below your change count by 1 block in your enemyFall Function:</p> <p> </p> <p>1 - Open MakeCode Arcade.</p> <p>2 - Open your Space Invaders project.</p> <p>3 - In the Variables section select Make a Variable and name it Random Enemy:</p> <p> </p> <p>4 - In the Sprites section out drag out Set mySprite to kind player and add it to the bottom of your enemyFall Function:</p> <p> </p> <p>\ud83d\udea8 Change the mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the of kind Player to Enemy by clicking on the little arrow</p> <p>5 - In the Advanced section, select Arrays:</p> <p> </p> <p>And drag out a get random value from list and add it to the grey square:</p> <p> </p> <p>6 - In the Sprites section drag a set mySprite auto destroy  and add it to the bottom of your enemyFall Function: <p> </p> <p>\ud83d\udea8 Change auto destroy to invisible by clicking on the little arrow</p> <p>\ud83d\udea8 Change the slider from OFF to ON</p> <p>7 - In the Sprites section out drag out Set mySprite x to 0 and add it to the bottom of your enemyFall Function::</p> <p> </p> <p>\ud83d\udea8 Change  my sprite to randomEnemy</p> <p>\ud83d\udea8 Change x to vy (velocity y) by clicking on the little arrow</p> <p>\ud83d\udea8 Change the vy (velocity y) to 60</p> <p>8 - In the Game section drag out on game update every 500ms and add it to your workspace:</p> <p> </p> <p>\ud83d\udea8 Change 500 ms to 200 ms by clicking on the little arrow</p> <p>9 - In the Logic section drag out if  then and add it to your on game update block: <p> </p> <p>11 - In the Logic section drag out &lt; 0 = 0 &gt; and add it to your if  then block: <p> </p> <p>\ud83d\udea8 Change = to &gt; by clicking on the little arrow</p> <p>\ud83d\udea8 Change the 2nd 0 to 120</p> <p>12 - In the Sprites section drag out mySprite x and add it to the first 0:</p> <p> </p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>\ud83d\udea8 Change the  x to y</p> <p>13 - From the enemyFall function find the code block below and duplicate it:</p> <p>\ud83d\udea8 To duplicate a block right click on the block and select duplicate.</p> <p></p> <p>add the duplicated block to your if block:</p> <p></p> <p>14 - In the Sprites section drag out set my sprite posistion to x: 0 y: 0 and add it to your if block:</p> <p></p> <p>\ud83d\udea8 Change mySprite to randomEnemy by clicking on the little arrow</p> <p>15 - In the Math section drag out pick random 0 to 0 and add it to the x co-ordinate in the set random enemy block:</p> <p></p> <p>\ud83d\udea8 Keep the 1st number as 0 and set the 2nd number to 120 </p> <p>16 - Find this block in your enemyFall Function and duplicate it:</p> <p></p> <p>14 - Add your duplicated block to your if......then block:</p> <p></p> <p>15 - Add your duplicated block to your if......then block:</p> <p></p> <p>16 - Finally, in Functions grab a call enemyFall block and add it to the bottom of your start block:</p> <p></p> <p>\ud83e\uddea Checkpoint</p> <p>You will now be able to spawn random enemy in a controlled manner.</p> <p>\ud83c\udfaf Success Criteria:</p> <p>Create a counter to for your game to see how many aliens have fallen</p> <p>\ud83d\udca1 - This will be needed in future lessons</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Create a new variable called count</p> </li> <li> <p>Add a set count to 0 block to the bottome of your start block.</p> </li> <li> <p>In your if block add grab a change count by 1</p> </li> <li> <p>To check if your count is working add this block to the end of your if block. </p> </li> <li> <p>Once you know it is working you can delete your change count by 1 block</p> </li> </ol> <p>\ud83d\udea8 DO NOT DELETE THE Set Count to 0 IN YOUR START BLOCK</p> <p>\ud83c\udfaf Success Criteria: </p> <p>Add a another random enemy spawn to your game.</p> <p>\ud83d\udca1 When we spawn our enemies, the bonus enemies will generate more points or remove more lives\ud83d\udd79\ufe0f</p> <p>\u2705 Instructions:</p> <ol> <li> <p>Duplicate the code blocks from enemyFall that are missing from your bonusEnemy function and add them to your bonusEnemy function</p> </li> <li> <p>Add another if......then block to the if......then block you have already created:</p> </li> </ol> <p></p> <ol> <li>Using  the count variable you have just created, see if you can work out how to make your bonusEnemy  fall when the count variable reaches the number 5.</li> </ol> <p>\ud83d\udea8 Hint: you will need one of these: </p> <p></p> <p>\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f Extra Challenge:</p> <p>Using the blocks below make your bonus enemy fall whenever your count divided by 5 = 0 (doesn't have a remainder):</p> <p></p> <p>This is a math function called modulo </p> <p>Modulo is a key component in computing programming.</p> <p>Once you have mastered this, you can apply this technique to different arrays and different bonuses. </p> <p> Back</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/_Game_Over/","title":"Game Over","text":"<p>\ud83d\uded1 Lesson 5: Game Over Conditions</p> <p>\ud83c\udfaf Goal</p> <p>End the game if an enemy reaches the bottom.</p> <p>\u2705 Steps</p> <p>In ||sprites:Sprites||, use on enemy of kind Enemy overlaps player.</p> <p>Inside it:</p> <p>Use info.changeLifeBy(-1).</p> <p>If life reaches 0, the game ends automatically.</p> <p>Alternatively, check if enemy Y &gt; 110 and destroy the enemy + lose life.</p> <p>\ud83e\uddea Checkpoint</p> <p>Game ends if enemy reaches the player or bottom.</p> <p>\ud83c\udfa8 Lesson 6: Polish and UI</p> <p>\ud83c\udfaf Goal</p> <p>Improve the look and feel of the game.</p> <p>\u2705 Steps</p> <p>Use info.setScore(0) and info.setLife(3) at start.</p> <p>Add sounds using ||music:Music|| (e.g., on laser or enemy hit).</p> <p>Use game.splash(\"Space Invaders\") to show a title screen.</p> <p>Optional: Add background image using ||scene:Scene||.</p> <p>\ud83e\uddea Checkpoint</p> <p>Game has score, lives, sound, and a title screen.</p> <p>\ud83e\udde0 Extension Tasks (Hopper Pathway)</p> <p>Add multiple enemy types with different images.</p> <p>Create enemy bullets and add dodge mechanics.</p> <p>Add levels or increase difficulty over time.</p> <p>Introduce a boss with more health.</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/lessons/","title":"Lesson Tiles","text":"<ul> <li> <p>01 - \ud83d\udc68\u200d\ud83d\ude80 Setting up the Player </p> <p> Start lesson</p> </li> <li> <p>02 - \ud83d\udd2b Shooting Lasers</p> <p> Start Lesson</p> </li> <li> <p>03 - \ud83d\udc7e Creating the Enemy</p> <p> Start Lesson</p> </li> <li> <p>04 - \ud83d\udc76 Spawning the Enemy</p> <p> Start Lesson</p> </li> <li> <p>05 - \u2b06\ufe0f\u24f5 Adding the Bonus</p> <p> Start Lesson</p> </li> </ul>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/space_invaders_index/","title":"Space Invaders","text":"<p>Welcome to the Space Invaders unit \u2013 an exciting journey into the world of game development using MakeCode Arcade!</p> <p>Over the course of this unit, you\u2019ll learn how to build your very own version of the classic arcade game Space Invaders. You\u2019ll take on the role of a game developer, learning the key skills needed to bring your ideas to life on screen \u2013 from designing characters and backgrounds to coding player movement, shooting mechanics, and enemy behaviours.</p> <p>\ud83d\udca1 Why this matters:</p> <p>Game development is a fun and creative way to learn computational thinking, problem solving, and real programming logic. You\u2019ll build confidence in your ability to plan, code, and test digital systems \u2013 key skills in Computing Science and beyond.</p> <p>By the end of this unit, you\u2019ll have a working Space Invaders game \u2013 and the knowledge to customise and improve it even further.</p>"},{"location":"Levels/BGE/S3/Makecode%20Arcade/Space_Invaders/space_invaders_index/#pathways","title":"Pathways","text":"<ul> <li> <p> Turing Pathway </p> <p>Structured to help you grow</p> <p>A good starting place to build confidence in Computing and Problem Solving.</p> </li> <li> <p> Hopper Pathway</p> <p>Independent Learning with support</p> <p>Comfortable with Problem Solving and General Computing.</p> </li> </ul> <p> Go to Lessons</p>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/","title":"Analysis","text":""},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#description-of-problem","title":"Description of Problem","text":"<p>I intend to develop a quiz based on well-known historical events. The quiz will have three levels of difficulty so that the user can select a level on either their historical knowledge or how much of a challenge they want to set themselves. I intend to include the following features: login facilities, help screens, each level of difficulty will have a quiz selected at random, each quiz will have multiple choice questions and a leader board that can be sorted. </p> <p>The end-users of my quiz will specifically be S1-S6 students who study history at school but also anybody who is interested in history and wants to test their knowledge.</p> <p>My project meets the advanced higher computing requirements because it will have a user interface suitable for S1-S6 students which will be easy to use and will validate all inputs. </p> <p>My project will interface with stored data within a database for the questions (using SQL) and also with a text file to store the login facilities (these will be processed using an array of records). </p> <p>My project will also use a sort algorithm to arrange the details leader board details.</p>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#uml-case-diagrams","title":"UML Case Diagrams","text":""},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#requirements-specification","title":"Requirements Specification","text":""},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#scope","title":"Scope","text":"<p>The scope of my project will include: </p> <ul> <li> <p>A completed design with pseudocode, data dictionary, query design and wireframes showing the intended interface for the quiz </p> </li> <li> <p>A working quiz and a database with multiple choice quiz questions </p> </li> <li> <p>Completed test plan with descriptions of a test persona, test cases and expected outputs </p> </li> <li> <p>The results of final testing </p> </li> <li> <p>An evaluation report </p> </li> </ul>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#constraints","title":"Constraints","text":"<p>There are a number of technical, economic and time constraints that will apply to this development. </p> <ol> <li> <p>I will use LiveCode version 9 to create the quiz because I have several years\u2019 experience using this language </p> </li> <li> <p>The final solution will run on the Windows systems with ODBC to access my quiz database. </p> </li> <li> <p>Microsoft Access will be used to store my quiz questions </p> </li> <li> <p>There will be no costs involved in the development of my project because I am using software that is fully licensed and readily available in school </p> </li> <li> <p>I will ensure that my project is completed by the deadline of 29th March as it will need to be delivered to SQA for marking. </p> </li> </ol>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#boundaries","title":"Boundaries","text":"<p>My working solution will contain: </p> <ol> <li> <p>A system to allow users to sign up with a new username and password combination</p> <ul> <li>The user cannot have a password of less than 4 characters </li> </ul> </li> <li> <p>A system to allow users to log in with their unique username and password </p> </li> <li> <p>All user input must be validated </p> </li> <li> <p>Three quizzes of different levels of Easy, Medium and Hard will be available </p> </li> <li> <p>Each quiz will contain 10 questions that will be presented to the user in a random order </p> <ul> <li> <p>Users will not be able to choose how many questions per run through of the quiz they do </p> </li> <li> <p>Users will only be able to choose their difficulty level, they will not be able to choose which questions they are asked</p> </li> </ul> </li> <li> <p>The score achieved by each user will be stored in the leader board file corresponding to the correct difficulty level </p> </li> <li> <p>A leader board that will display the top 10 scores and usernames for each difficulty level </p> <ul> <li>The leader board for each level will be sorted in descending order of score</li> </ul> </li> </ol>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#end-user-requirements","title":"End-User Requirements","text":"<p>Through the analysis of my user surveys, I have come up with a list of requirements that were the most common answers amongst the people answering my surveys:</p> <ol> <li>Palatable colour scheme (e.g. light, complimentary colours) </li> <li>Easy to navigate </li> <li>Clutter free and good use of space </li> <li>Easy to use search facility to search for products by name and/or by brand </li> </ol> <p>Because of the user surveys, I will ensure to include these requirements when implementing the website to create the best user experience I can. </p>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#inputs-and-outputs-for-users","title":"Inputs and Outputs For users:","text":"<ol> <li>Email Addresses </li> <li>First Name </li> <li>Last name </li> <li>Home address </li> <li>Telephone Number </li> <li>Username </li> <li>Password </li> <li>Search criteria </li> </ol>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#for-website","title":"For Website:","text":"<p>Inputs: </p> <ol> <li>Populating the website with details of makeup products </li> <li>Login query results </li> <li>Registration query results </li> <li>Search criteria and search query results </li> <li>Size of the browser window</li> </ol> <p>Processes: </p> <ol> <li>Validation of all customer inputs </li> <li>Open and close connection with database </li> <li>Save customer details in database </li> <li>Authenticate customer login </li> <li>Execute SQL queries Search for products and format query results </li> <li>Use of session variables to preserve user login data </li> </ol> <p>Outputs: </p> <ol> <li>Validation error messages </li> <li>Personalised message using session variables on search page </li> <li>Search results showing product details, including an image.</li> </ol>"},{"location":"Levels/Senior_Phase/Advanced_Higher_Project/1.0_Description_of_the_Problem/#project-plan","title":"Project Plan","text":"Task Sub Task Duration Start Date End Date Analysis 6 Days Read requirements for AH project and create idea 1 day 23rd Oct 23rd Oct Write outline of project 0.5 day 24th Oct 24th Oct Create scope, boundaries and constraints 0.5 day 24th Oct 24th Oct Create UML use case diagram 1 day  25th Oct 25th Oct Create user requirements description 1 day 26th Oct 26th Oct Create functional requirements 1 day 30th Oct 30th Oct Project plan 1 day  31st Oct 31st Oct Design 14 Days Interface design - Create wireframes 5 days  1st Nov 8th Nov Design Structure Diagrams 2 days  9th Nov 11th Nov Create Pseudocode 5 days 12th Nov 17th Nov Design SQL 2 days 20th Nov 21st Nov"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/","title":"Development Methodologies","text":"<p>Quick Links</p> <ul> <li>The Waterfall Method</li> <li>The Six Stages of Development</li> <li>Analysis</li> <li>Design</li> <li>Implementation</li> <li>Testing</li> <li>Evaluation</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#what-is-a-software-development-methodology","title":"What is a Software Development Methodology?","text":"<p>To answer this, we will split the question into two parts, Software and Development Methodology.</p> <p>As you already know, all computer systems are made up of hardware and software.</p> <p>The term hardware is easy to understand, because you can touch it. For example, the processor, RAM, network adaptor and graphic cards etc...</p> <p>Software, however, is not so obvious\u2026\u2026\u2026\u2026\u2026\u2026</p> <p>Software is all the programs, instructions and data that allow the hardware to do something useful and interesting. Some of the most used include; word, excel, PowerPoint &amp; Google (other browsers are available!)</p> <p>Tip</p> <p>Software Development is defined as the process of designing, creating, testing, and maintaining computer programs and applications. There are many different  Software Development Methodologies that all follow a different path through the Development Process. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#the-software-development-lifecycle","title":"The Software Development Lifecycle","text":"<p>The Software Development Lifecycle is generally an iterative process that consists of six stages:</p> <ul> <li>Analysis - to fully understand the problem and what the program must do</li> <li>Design - to plan how the program will work before building it</li> <li>Implementation - to write the actual code</li> <li>Testing - to check that the program works correctly and meets the requirements</li> <li>Documentation - to produce materials that help users and future developers understand and use the software.</li> <li>Evaluation - to judge how successful the software is</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#the-waterfall-method","title":"The Waterfall Method","text":"<p>A traditional method of software development is called the Waterfall Method.</p> <p>The Waterfall Method is classified as a linear development process, as the developer or development team works through each stage sequentially with little to no involvement from the client until the final product is delivered.</p> <p>Although it is classified as a linear development process, in practice it is often necessary to revisit earlier stages. For example, if an issue is discovered during testing, the team may need to go back and revise the design, reimplement it, and test it again.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#the-six-stages-of-development","title":"The Six Stages of Development","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#analysis","title":"Analysis","text":"<p>What is the purpose of the program? </p> <p>What features will it have? (This is known as functional requirements)</p> <p>What are the inputs, process and outputs?</p> <p>What data structures and data types will be used?</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#design","title":"Design","text":"<p>The more planning you do the quicker the creation of the final product will be</p> <p>Break a problem into chunks </p> <p>Use diagrams to create and algorithm</p> <p>Pseudocode, Structure Diagrams and Flowcharts</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#implementation","title":"Implementation","text":"<p>Create the solution to the problem</p> <p>Use previously designed Algorithms to signpost the way</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#testing","title":"Testing","text":"<p>All work needs to be checked thoroughly for errors. </p> <p>Rigorous testing to systematically check every single operation/event.</p> <p>Rigorously test a range of scenarios to make sure the program does what it is supposed to.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#documentation","title":"Documentation","text":"<p>Collate diagrams, algorithms and testing tables.</p> <p>These documents together form the wider documentation (user guide &amp; technical guide).</p> <p>It is important that documentation is clear.</p> <p>Documentation should also show what each person did and what has happened thus far. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L5/5.0_Home/#evaluation","title":"Evaluation","text":"<p>Fit for Purpose - does it do what it is supposed to do?</p> <p>Efficient use of Coding Constructs  - correct use of repetition, arrays (instead of variables) and selection statements where possible to reduce the amount of code?</p> <p>Robustness \u2013 can it cope with unexpected or incorrect input?</p> <p>Readability - it is important to write code that can be read and understood by others. This should include internal commentary, meaningful identifiers, indentation and white space.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/","title":"Development Methodologies","text":"<p>Quick Links</p> <ul> <li>The Software Development Lifecycle</li> <li>The Waterfall Method</li> <li>Agile Methods</li> <li>Advantages/Disadvantages</li> <li>Iterative vs. Agile Development Processes (Key Points)</li> </ul> <p>What you need to know</p> <p>You must be able to describe and compare the development methodologies:</p> <ul> <li>iterative development process</li> <li>agile methodologies</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/#the-software-development-lifecycle","title":"The Software Development Lifecycle","text":"<p>The Software Development Lifecycle is generally an iterative process that consists of six stages:</p> <ul> <li>Analysis - to fully understand the problem and what the program must do</li> <li>Design - to plan how the program will work before building it</li> <li>Implementation - to write the actual code</li> <li>Testing - to check that the program works correctly and meets the requirements</li> <li>Documentation - to produce materials that help users and future developers understand and use the software.</li> <li>Evaluation - to judge how successful the software is</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/#the-waterfall-method","title":"The Waterfall Method","text":"<p>A traditional method of software development is called the Waterfall Method.</p> <p>The Waterfall Method is classified as a linear development process, as the developer or development team works through each stage sequentially with little to no involvement from the client until the final product is delivered.</p> <p>Although it is classified as a linear development process, in practice it is often necessary to revisit earlier stages. For example, if an issue is discovered during testing, the team may need to go back and revise the design, reimplement it, and test it again.</p> <p>In the early days of software engineering, this process made sense. </p> <p>However, it is rarely used in modern software development due to its lack of flexibility.</p> <p>In the real world, many developers use Agile methods.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/#agile-methods","title":"Agile Methods","text":"<p>Agile is considered more flexible than traditional iterative methods. </p> <p>Instead of following a rigid sequence of stages, Agile breaks the project down into smaller, manageable units of work based on what the client needs known as User Stories.</p> <p>Each of these User Stories are included in the overal Software Development Plan. The Software Development Plan will also idnetify the timescale for which each User Story should be completed. </p> <p>Teams of developers will work in shorts \u201csprints\u201d to produce working prototypes which can be tested by the client.</p> <p>Each sprint typically lasts one to four weeks and involves a cycle of planning, design, implementation, and testing. This approach allows teams to produce working software early and update it frequently based on feedback.</p> <p>A key benefit of Agile is its emphasis on collaboration and adaptability. Stakeholders, including clients and end-users, are involved throughout the development process, not just at the beginning or end. This ongoing communication helps ensure that the software continues to meet the users\u2019 needs as they evolve.</p> <p>By regularly reassessing priorities and making improvements at each step, Agile teams can respond to changes quickly\u2014something that is much harder to do with more traditional methods like Waterfall. As a result, Agile has become one of the most widely adopted methodologies in modern software development.</p> <p>For a useful comparison of waterfall vs. agile watch the video below:</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/#advantagesdisadvantages","title":"Advantages/Disadvantages","text":"Waterfall MethodAgile Methodology Advantages <p>The Waterfall model is well suited to large-scale projects and big development teams, especially when there is a long lead time. Since the client is usually less involved once development begins, they must clearly define their requirements at the start, as this forms part of the legally binding contract.</p> <p>This model focuses more on producing high-quality software than on rapid development. As a result, the software tends to be thoroughly tested and contains fewer bugs. Projects using the Waterfall approach are often completed on schedule and within budget.</p> <p>Setting clear milestones at the beginning of the project helps both the development team and the client monitor progress more easily.</p> Disadvantages <p>One of the main drawbacks of the Waterfall model is its rigid, step-by-step structure, which makes it difficult to change the plan once development has started. Since client input is usually only gathered at the beginning of the project, they are not involved throughout. This means that if the client is unsure about what they need at the start or if their requirements change during the project, the final software may not meet their expectations.</p> <p>Another issue is that once the software reaches the testing stage, making changes can be challenging. If updates are needed at that point, it can take extra time and increase costs.</p> <p>To reduce this problem, it can help to involve clients at key points during the project so that adjustments can be made earlier in the process.</p> Advantages <p>Agile is ideal for smaller projects, such as developing or regularly updating apps, and works well with small development teams. The client is actively involved throughout the entire development process, and regular feedback is gathered.</p> <p>This close collaboration helps ensure that the final product closely matches what the client wants, even if their initial requirements were unclear. Agile also offers flexibility\u2014if the client changes their mind or wants to add new features, these changes can usually be made without too much difficulty.</p> Disadvantages <p>The Agile methodology has several drawbacks. Initially, there's often no formal, legally binding contract, which can be problematic given the evolving nature of client requirements. Furthermore, Agile is not well-suited for extensive projects or large teams. Clients must also be ready to dedicate significant time to the project, as their continuous involvement is essential.</p> <p>Another major disadvantage lies in the stringent sprint deadlines, which can lead to incomplete projects. In such cases, the client may face increased costs to finalize the project, or they might have to accept a deliverable with a considerably reduced scope. The frequent updates inherent in Agile can also be challenging to monitor and necessitate rigorous version control for each iteration or update.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.0_index/#iterative-vs-agile-development-processes-key-points-comparison","title":"Iterative vs. Agile Development Processes (Key Points Comparison)","text":"Iterative Agile Client Interaction The client is usually involved only at the analysis and evaluation stages. There is little to no client input during design, implementation, and testing phases. Agile encourages frequent client feedback throughout the project. Ongoing collaboration helps shape the product and ensures it meets client needs. Teamwork Separate teams handle different phases independently, such as design, implementation, and testing. Communication between teams can be limited, potentially causing delays if issues arise. Agile teams are cross-functional and collaborative, combining designers, developers, and testers who work together continuously with rapid communication and shared goals. Documentation Relies on a single, detailed project specification created at the start, which guides the entire project. Changes late in the project can be costly. Minimizes formal documentation, favouring lightweight, flexible documents created as needed. Focus is on working software and communication over paperwork. Measurement of Progress Progress is measured by completing each phase in order, with the final product delivered at the end for client evaluation. Progress is measured by how quickly features are delivered and demonstrated. Agile teams deliver working software regularly with frequent client feedback. Adaptive vs Predictive Iterative development is more predictive, relying on detailed upfront planning and following a set sequence of phases. Agile is highly adaptive, embracing change and continuously adjusting based on feedback and testing throughout the project. Testing Testing happens mainly after implementation in a distinct phase, often late in the process, risking discovering problems late. Testing is continuous and integrated throughout development. Each part is tested as it is built, reducing costly late fixes."},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.1_The_Iterative_Development_Process/","title":"The Iterative Development Process (Waterfall Model)","text":"<p>The Waterfall model is a structured, linear approach to software development. In this methodology, the stages followed include analysis, design, implementation, testing, documentation, evaluation, and maintenance. Although the process is often referred to as iterative because stages can be revisited, one of its main challenges is that these stages are followed sequentially.</p> <p>As development progresses, new ideas and requirements will often emerge that were not foreseen during the initial planning stages. This leads to the need to revisit earlier phases of the project to address new issues and correct errors which slows the development process considerably. </p> <p>As a result, the Waterfall model is often criticized for being overly rigid, slow, and dependent on excessive documentation as each step strictly follows the last.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/1.0_Development_Methodologies/L6/6.2_Agile_Methodologies/","title":"Agile Methodologies","text":"<p>Agile methodologies generally follow the same development stages (Analysis, Design, Implementation, Testing, Documentation, Evaluation, and Maintenance) but approach them more flexibly. The focus is on quickly getting started while allowing movement between stages as needed. This iterative process enables collaboration between different developer teams, allowing the project\u2019s requirements and solution to evolve step by step.</p> <p>The Agile methodology places a strong emphasis on teamwork, with regular interaction among developers and frequent engagement with clients or users to create prototypes. </p> <p>By showing working prototypes as the system develops, teams can gather real-time feedback, allowing for adjustments and improvements throughout the process. </p> <p>Key Point</p> <p>A key aspect of agile methodologies is their ability to respond to change, recognizing that requirements are often fluid and that software projects are inherently dynamic.</p> <p>Rapid Application Development (RAD) is one such example of an agile approach to software and information system creation. Its primary goal is to implement solutions quickly, minimizing upfront planning. RAD involves producing incremental versions or prototypes to refine requirements and address issues as they arise.</p> <p>While RAD can significantly reduce development time, it may lead to an overemphasis on the Graphical User Interface (GUI) rather than the core functionality of the software. Continuous iteration can also result in a disorganized process, increased errors, and long-term maintenance challenges. Therefore, RAD is best suited for smaller, dynamic projects like apps or websites, but is less ideal for large-scale or mission-critical systems.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/","title":"Analysis","text":"<p>Quick Links</p> <ul> <li>Inputs</li> <li>Proccesses</li> <li>Outputs</li> <li>Functional Requirements - Example 1</li> <li>Functional Requirements - Example 2</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#functional-requirements-inputs-processes-and-outputs","title":"Functional Requirements (Inputs, Processes and Outputs)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#inputs","title":"Inputs","text":"<p><code>Inputs</code> are what goes \u2018in\u2019 to the program - a common example would be anything the user is asked to type in.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#processes","title":"Processes","text":"<p><code>Processes</code> are the \u2018thinking\u2019 done by the program. It might be a calculation (adding to a score), checking something (has the player won yet?) or any other \u2018thinking\u2019 the program has to do.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#outputs","title":"Outputs","text":"<p><code>Outputs</code> are what goes \u2018out\u2019 of the program - for National 5, these are often  messages printed on the screen.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#functional-requirements-example-1","title":"Functional Requirements Example 1","text":"<p>You\u2019ve been asked to write a program that asks for the name and age of everyone in the class. It then calculates the average, and displays that on the screen.</p> <ul> <li> <p>The inputs are the names and ages.</p> </li> <li> <p>The process is calculating the average.</p> </li> <li> <p>The output is the average that is displayed.</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L5/5.0_index/#functional-requirements-example-2","title":"Functional Requirements Example 2","text":"<p>You have been asked to write a program for a GPS car navigation system. The program asks the user for their destination. It connects to a satellite to get its current position. It calculates a route, and tells the user how long it expects the journey to take, as well as displaying the route on a map.</p> <ul> <li> <p>The inputs are the user\u2019s destination, and the satellite position.</p> </li> <li> <p>The process is calculating the route.</p> </li> <li> <p>The outputs are how long the journey should take and the displayed map.</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/","title":"Analysis","text":"<p>Quick Links</p> <ul> <li>Purpose</li> <li>Scope</li> <li>Boundaries</li> </ul> <p>What you need to know</p> <p>You must be able to identify the:</p> <ul> <li> <p>purpose</p> </li> <li> <p>scope</p> </li> <li> <p>boundaries</p> </li> <li> <p>functional requirements</p> </li> </ul> <p>of a problem that relates to the design and implementation at this level, in terms of:</p> <ul> <li> <p>inputs</p> </li> <li> <p>processes</p> </li> <li> <p>outputs</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#purpose","title":"Purpose","text":"<p>The Purpose is a really important part of the analysis stage. It\u2019s all about clearly stating what the software is meant to do \u2013 basically, what problem it\u2019s solving or what task it needs to complete. </p> <p>A clear purpose helps everyone involved understand what the end goal is, and it makes sure the rest of the project stays on track. </p> <p>In addition, it also helps when you\u2019re thinking about what the program will need to take in (inputs), what it will do (processes), and what it should produce (outputs). </p> <p>If the purpose isn\u2019t clear, it\u2019s easy for the software to end up doing the wrong thing or not meeting the user\u2019s needs. A good purpose is simple, focused, and makes it easy to check if the final product works the way it\u2019s supposed to.</p> <p>The SQA define purpose as a general description of the software. </p> <p>This is often summarised using the IPO model:</p> <ul> <li>Inputs \u2013 What information the program receives  </li> <li>Processes \u2013 What the program does with that information  </li> <li>Outputs \u2013 What the program produces or displays  </li> </ul> <p>This model helps developers stay focused on what the software is meant to do, and it links closely to the functional requirements.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#scope","title":"Scope","text":"<p>The Scope is where you set the boundaries of what the software will and won\u2019t do. </p> <p>Once the purpose is clear, the scope builds on that by outlining exactly what features or tasks will be included in the project \u2013 and just as importantly, what\u2019s being left out. </p> <p>This helps keep the project realistic and manageable, especially if there are time or resource limits. It also stops feature creep, where new ideas get added in along the way and make everything more complicated. </p> <p>A clear scope gives everyone \u2013 from developers to users \u2013 a shared understanding of what to expect, which makes planning and development much smoother.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#boundaries","title":"Boundaries","text":"<p>The Boundaries identify what\u2019s outside the system \u2013 in other words, the parts the software won\u2019t deal with. While the scope tells us what\u2019s included in the system, boundaries help make it clear where the system ends and where other systems or people take over. </p> <p>For example, if a program needs information from a database but doesn\u2019t manage the database itself, that database would be outside the boundary. </p> <p>Setting boundaries is useful because it helps avoid confusion about what the software is responsible for. It also makes it easier to plan and design the system by focusing only on what actually needs to be built.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#functional-requirements","title":"Functional Requirements","text":"<p>The Functional Requirements describe what the software must do \u2013 the specific features and functions it must include to solve the problem.</p> <p>They are usually based on the purpose, and they describe how the software will handle:</p> <ul> <li>Inputs \u2013 what data the user or other systems will enter into the software  </li> <li>Processes \u2013 what the software will do with the data  </li> <li>Outputs \u2013 what the software should produce or display</li> </ul> <p>These requirements are often written as a list of tasks or actions the software should be able to perform. They help programmers understand exactly what they need to build, and they\u2019re used later for testing to make sure everything works correctly.</p> <p>Example: </p> <p>A lunch ordering system might have the following functional requirements: - The user can select items from a menu (input) - The system calculates the total cost (process) - The system displays the final order and price (output)</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#worked-example-school-club-registration-system","title":"Worked Example: School Club Registration System","text":"<p>A school wants a simple system for pupils to sign up for after-school clubs.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#purpose_1","title":"Purpose","text":"<p>To allow pupils to register for clubs online and allow teachers to view a list of attendees.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#scope_1","title":"Scope","text":"<ul> <li>Pupils can view a list of clubs.</li> <li>Pupils can choose a club and enter their name to register.</li> <li>Teachers can access a list of attendees.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#boundaries_1","title":"Boundaries","text":"<ul> <li>The system will not include login or password protection.</li> <li>It won\u2019t manage room bookings or send notifications.</li> <li>It won\u2019t store data beyond a single session (unless stated).</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L6/6.0_index/#functional-requirements_1","title":"Functional Requirements","text":"<ul> <li>Display list of clubs (output)</li> <li>Accept pupil name and club selection (input)</li> <li>Store registration in memory (process)</li> <li>Display confirmation message (output)</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.0_index/","title":"Analysis","text":"<p>In this section, we will explore the first phase of the software development process: Analysis. This phase is crucial as it lays the groundwork for a successful system by clearly understanding what the problem is and what the system must do to solve it.</p> <p>You will develop your skills, knowledge, and understanding in line with the SQA Advanced Higher Computing Science course assessment by studying the following key areas:</p> Identifying the purpose and functional requirements of a problem, including: <ul> <li>Inputs</li> <li>Processes</li> <li>Outputs</li> </ul> Conducting feasibility studies, with a focus on: <ul> <li>Economic feasibility</li> <li>Time feasibility</li> <li>Legal feasibility</li> <li>Technical feasibility</li> <li>User surveys</li> </ul> Planning techniques and documentation, including: <ul> <li>Scheduling</li> <li>Resource planning</li> <li>Gantt charts</li> </ul> Producing detailed requirement specifications: <ul> <li>End-user requirements</li> <li>System scope, boundaries, and constraints</li> <li>Functional requirements</li> </ul> Creating and interpreting Unified Modelling Language (UML) diagrams, specifically: <ul> <li>Use case diagrams</li> <li>Actors, use cases, and relationships</li> </ul> \ud83d\udeab Please note: we have already studied how to: <ul> <li>Identify functional requirements in terms of inputs, processes, and outputs</li> <li>Produce requirement specifications including end-user requirements, scope, and constraints</li> </ul> <p>These topics will not be revisited in detail here. If you need a refresher, please go to either National4/5 Computing Science or Higher Computing Science in the navigation bar above.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.0_index/#key-topics","title":"Key Topics","text":"<p>Choose a section below to explore each of the key areas in more detail.</p> <ul> <li> <p> Feasibility Studies</p> <p>Explore the factors that determine whether a system should be developed, including economic, time, legal, technical, and user-based feasibility.</p> <p> Go to Feasibility Notes</p> </li> <li> <p> Project Management</p> <p>Learn how to plan and manage a software project using scheduling, resource planning, and Gantt charts.</p> <p> Go to Planning Notes</p> </li> <li> <p> Unified Modelling Language</p> <p>Understand and create use case diagrams using UML to model actors, system interactions, and functional requirements.</p> <p> Go to UML Notes</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.1_Economic/","title":"Economic Feasibility","text":"<p>\ud83d\udcb7 What is Economic Feasibility?</p> <p>Economic Feasibility deals with the cost implications involved. </p> <p>Management will want to know how much each option will cost, what is affordable within the company\u2019s budget and what they get for their money.</p> Economic feasibility asks:  <p>Can we afford this system, and is it worth it?</p> A system is economically feasible if: <ul> <li> <p>Its benefits outweigh the costs</p> </li> <li> <p>It reaches break-even within a realistic timeframe</p> </li> </ul> Example:   <p>A school wants a new timetable system. If the software costs \u00a310,000 but saves \u00a315,000 in admin time over a year, then it\u2019s economically feasible.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.1_Economic/#cost-benefit-analysis","title":"Cost-Benefit Analysis","text":"<p>A cost-benefit-analysis is part of the budgetary feasibility study. </p> <p>If the project is not cost-effective then there is no point proceeding. Setting up a new computer system is an investment and involves capital outlay. </p> <p>The costs of a new system include:</p> <ul> <li> <p>the costs of acquiring it in the first place (consultancy fees, program development including cost of any resources required for development, etc.)</p> </li> <li> <p>the costs of installing it (disruption of current operations, cost of new equipment, alteration of workplace, etc.)</p> </li> <li> <p>the costs of maintaining it which also includes training. </p> </li> </ul> <p>In the long term, management will also want to know the \u2018break-even point\u2019 when the new system stops costing money and starts to make money. </p> <p>Economic Feasability is Difficult to Estimate</p> <p>It's often difficult to accurately calculate future costs and benefits.</p> <p>Estimations depend heavily on the expertise and experience of the systems analyst.</p> <p>Once the system begins to generate value, it's important to distinguish the types of benefits it brings. These can be divided into two categories: tangible(something you can see, touch, or easily quantify) and intangible(something that is not easily measured or quantified).</p> <p>Benefits generated by a system can be tangible or intangible, as shown below: </p> <p> Tangible Benefits Intangible Benefits Reduced running costs Improved staff morale Increased operational speed Better customer perception Increased throughput Easier communication Better reporting facilities Increased job satisfaction <p>\ud83d\udea8 Note: Not all the costs and benefits lend themselves to direct measurement.  </p> <p>Key Points</p> <ul> <li> <p>The client will want to know the cost of each option and what they get for their money.</p> </li> <li> <p>A system is only economically feasible if the benefits of the development outweigh the costs. For this reason a cost benefit analysis is carried out.</p> </li> </ul> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.2_Time/","title":"Time Feasibility","text":"<p>\u23f1\ufe0f What is Time Feasibility?</p> Time feasibility asks: Can the system be developed and implemented within the available time, and will it be ready when it is needed? It considers: <p>The time needed for development, installation, and training</p> <p>The effect on the client\u2019s schedule or operations</p> Example <p>A school wants to install a new report-writing system in time for the October break. If development, testing, and training will take 4 months and it\u2019s already July, the project may not be time feasible.</p> <p>If the project can be completed within a realistic timeframe and without disrupting important business operations, it is considered time feasible.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.2_Time/#factors-that-affect-time-feasibility","title":"Factors That Affect Time Feasibility","text":"<ul> <li>Total time required for system development  </li> <li>Client\u2019s calendar \u2014 busy periods, deadlines, seasonal events  </li> <li>When installation and training can take place  </li> <li>When the system must be fully operational  </li> <li>Availability of staff and resources  </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.2_Time/#questions-to-ask","title":"Questions to Ask","text":"<ul> <li>How long will the system take to develop?</li> <li>When is the least disruptive time to install it?</li> <li>Will it be ready by the required date?</li> </ul> <p>\ud83d\udea8 Note: A system can be technically and economically feasible but still not time feasible if it won\u2019t be finished in time to be useful. Delays can make the system pointless or even harmful to the organisation.</p> <p>Key Points</p> <ul> <li> <p>Time feasibility focuses on scheduling and deadlines</p> </li> <li> <p>A system must be ready when the client needs it.</p> </li> <li> <p>Development, training, and installation must fit within the timeline.</p> </li> <li> <p>Failing to meet the deadline can make the system unusable, even if it works perfectly</p> </li> </ul> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.3_Legal/","title":"Legal Feasibility","text":"<p>Legal feasibility is about ensuring the proposed system complies with all relevant laws and regulations. Organisations must assess any legal risks that may arise from developing, deploying, or using the system.</p> <p>\u2696\ufe0f What is Legal Feasibility?</p> <p>Legal feasibility considers whether the new system complies with relevant laws and regulations, including:</p> <ul> <li>Contracts and liability: Will the system change responsibilities under existing contracts?</li> <li>Health and safety: Will it meet workplace and digital safety standards?</li> <li>Data protection laws (e.g. GDPR): Will it handle personal data legally and securely?</li> <li>International regulations: Will it comply with laws in other countries where users or data may reside (e.g. EU, USA)?</li> <li>Software licensing: Are appropriate licenses available and affordable?</li> </ul> <p>Software Licensing Considerations</p> <p>Software licensing can be complex and must be carefully checked. The organisation must ensure that:</p> <ul> <li>The right type of licence is used:</li> <li>Client licence (per seat)</li> <li>Server licence</li> <li>Network licence</li> <li> <p>Site licence</p> </li> <li> <p>The licence duration is appropriate:</p> </li> <li>Annual subscription</li> <li>Perpetual (one-off) purchase</li> </ul> <p>Different vendors have different rules, so licensing terms should be verified before proceeding.</p> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.4_Technical/","title":"Technical Feasibility","text":"<p>Technical feasibility examines whether the proposed system can be developed and implemented using available technology, hardware, and expertise. It helps identify whether the organisation has the technical capability or needs additional resources.</p> <p>\ud83d\udda5\ufe0f What is Technical Feasibility?</p> <p>Technical feasibility assesses whether the system can be built and run using the organisation\u2019s current or accessible technology. It includes:</p> <ul> <li>Required hardware and software: Are the necessary tools available or affordable?</li> <li>Technical skills: Do staff or developers have the expertise to implement and maintain the system?</li> <li>Integration: Can the new system work with existing systems?</li> <li>Support and maintenance: Are updates, patches, and technical support available?</li> </ul> <p>Example</p> <p>If a school wants to run a new multimedia learning platform but only has outdated computers, the system may not be technically feasible unless upgrades are made.</p> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1.5_User_Surveys/","title":"User Surveys","text":"<p>In addition to to the Feasability study, surveys and questionnaires help gather feedback from users, especially when many opinions are needed. This helps ensure the system meets real needs.</p> <p>\ud83d\udccb What is User Feasibility?</p> <p>User feasibility ensures that the proposed solution aligns with user expectations and requirements, which is essential for the project's success. It helps determine:</p> <ul> <li>User needs: Will the system actually solve the users\u2019 problems?</li> <li>Ease of use: Is the system user-friendly and intuitive?</li> <li>User acceptance: Are users willing to adopt the system?</li> <li>Usability challenges: Are there barriers that could prevent adoption?</li> </ul> <p>Here's why user feasibility is important: - It identifies potential roadblocks early, such as usability issues or resistance to change, allowing adjustments to the design or implementation plan. - It ensures the project addresses real user needs, increasing its relevance and value. - It improves the overall user experience by considering preferences and behaviours. - It increases adoption rates \u2013 if users find the system easy to use and beneficial, they're more likely to embrace it.</p> <p>In short, user feasibility isn't just a nice-to-have \u2013 it's essential for determining whether a project is practical, usable, and likely to succeed.</p> <p>For example, a new library system would be developed following some time spent capturing the experience of existing librarians and how they operate.</p> <p>The users of a particular program are often best placed to identify problems and suggest improvements based on real experience. If the system is brand new, the target user group should still understand the domain well enough to provide useful input.</p> <p>When the opinion of a number of users is required, it is often easier to create a survey or questionnaire which will capture the information that the project team require.</p> <p>Example: A college developing a new library system might survey librarians to ask what features they need most.</p> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1_Feasability_Studies/","title":"Feasability Studies","text":"<p>What you Need to Know</p> <p>Describe, exemplify, and implement research for:</p> <ul> <li>feasibility studies:<ul> <li>economic</li> <li>time</li> <li>legal</li> <li>technical</li> </ul> </li> <li>user surveys</li> </ul> <p>Before starting a new system, it\u2019s important to decide if it\u2019s worth the time and money. </p> <p>This is where a feasibility study comes in as it helps determine:</p> <ul> <li>Is the project realistic?</li> <li>Can it be achieved within time and budget?</li> <li>Will it meet the goals set in the problem definition?</li> </ul> <p>A feasibility study should:</p> <ul> <li> <p>Be low-cost and quick to complete</p> </li> <li> <p>Involve no legal commitment to proceed</p> </li> <li> <p>Suggest options or alternatives</p> </li> <li> <p>End with a clear report for the client, showing:</p> <ul> <li>Costs</li> <li>Benefits</li> <li>Possible solutions</li> <li>Recommendations</li> </ul> </li> </ul> <p>Key Points</p> <ul> <li> <p>The feasibility study should be conducted relatively cheaply and within a fairly short time frame. </p> </li> <li> <p>There are no legal or contractual requirements at this stage.</p> </li> <li> <p>The findings of the feasibility study are presented to the client in the form of a report.</p> </li> <li> <p>This report indicates costs, benefits, alternatives and appropriate recommendations.</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.1_Feasability_Studies/#feasibility-studies","title":"Feasibility Studies","text":"<p>A feasibility study should look at the following five main areas:</p> <ul> <li> <p> Economic Feasibility</p> <p>Can the organisation afford the system? </p> <p>Will the benefits outweigh the costs?</p> <p> Notes</p> </li> <li> <p> Time Feasibility</p> <p>Can the system be developed and installed within the required timeframe?</p> <p> Notes</p> </li> <li> <p> Legal Feasibility</p> <p>Will the new system comply with laws and regulations?</p> <p> Notes</p> </li> <li> <p> Technical Feasibility</p> <p>Does the organisation have the hardware, software, and skills to support the system?</p> <p> Notes</p> </li> <li> <p> User Feasibility</p> <p>Gather feedback and opinions from users to ensure the system meets real needs.</p> <p> Notes</p> </li> </ul> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/","title":"Project Planning","text":"<ul> <li> AH Analysis - Gantt Charts</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#what-is-in-a-project-plan","title":"What is in a project plan?","text":"<p>The primary aspects of a project plan are:</p> <ol> <li>Tasks/Subtasks</li> <li>Identify Timescales</li> <li>Gantt Chart</li> <li>Identify Budget/Resources</li> </ol>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#tasks-and-deadlines","title":"Tasks and Deadlines","text":"<p>A project should be broken down into an appropriate set of tasks. Tasks should be broken down into sub tasks. Once subtasks are identified timescales and deadlines will have to be assigned - people work more effectively to deadlines.</p> <p>Advantages of sub tasks:</p> <ol> <li>Concurrent processes can be identified,</li> <li>Indication of % complete/tracking progress,</li> <li>Allow identification of the dependency of tasks on the completion of others.</li> <li>Critical Path Analysis</li> <li>Delegation of responsibility for subtasks</li> </ol>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#dependencies","title":"Dependencies","text":"<p>If a task has a relationship with another task then there may be a dependency between the tasks:</p> <p>Finish to Start: Activity A must finish before Activity B can begin</p> <p><code>Example</code></p> <p>A : Foundations Dug</p> <p>B : Concrete Poured</p> <p>Finish to Finish: Activity A must be complete before activity B can finish</p> <p><code>Example</code></p> <p>A : Last chapter written </p> <p>B (Entire book written)</p> <p>Start to Start: <code>Activity B</code> can only start after <code>Activity A</code> has started</p> <p>Start to Finish: <code>Activity B</code> cannot finish before <code>Activity A</code> has finished</p> <p><code>Example</code></p> <p>A : New shift started</p> <p>B Previous Shift finish</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#gantt-charts","title":"Gantt Charts","text":"<p>Gannt Charts are diagrams used to represent the scheduling of tasks and sub tasks along with start and completion dates. </p> <p>An example is shown below:</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#critical-path-analysis","title":"Critical Path Analysis","text":"<p>Critical path analysis identifies all tasks that must be complete and their minimum time length. </p> <p>An extension to any of these tasks would result in the delay of completion of the entire project. </p> <p>The sample of the Gantt chart below shows that certain tasks have been pattern shaded as they are in the critical path.</p> <p>This shows that if any of these tasks take any extra time then that will delay the completion time of the project.</p> <p>Some of the other tasks will have some slippage time, that is they can run over by some time without the project completion time changing.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.6_Project_Planning/#resources-and-scheduling","title":"Resources and Scheduling","text":"<p>Resources can include access to development tools and end users.</p> <p>These could be: * Personnel - particularly those with specific skill sets * Physical resources/money/software</p> <p>Some of these could be available at any time, while others may only be available at certain times. </p> <ul> <li>You need to plan to ensure that your project is not held up waiting for resources.</li> <li>Timings should allow for holidays, or other events that affect how much time you can spend on your project.</li> </ul> <p>The tab below in the Gantt project shows the demand placed on particular resources, in this instance they are personnel but resources could be physical resources such as hardware/rooms.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/","title":"UML Use Case Diagrams","text":"<p>What You Need to Know</p> <p>You must be able to describe, identify and implement Unified Modelling Language (UML):</p> <ul> <li>Use Case Diagrams<ul> <li>Actors</li> <li>Use Cases</li> <li>Relationships</li> </ul> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/#video-guide","title":"Video Guide","text":"<p> <p></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/#what-is-uml","title":"What is UML?","text":"<p>UML (Unified Modelling Language) is a way of planning how a system will work before you start building it.</p> <p>One type of UML is a Use Case Diagram which shows how users (called actors) will interact with the system, and what tasks (called use cases) they can do. </p> <p>Use Case Diagrams are used during the analysis stage of the Software Development Process to help plan out what a system should do.</p> <p>In short, it helps you understand what the system needs to do and who will use it.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/#key-terms","title":"Key terms:","text":"<ul> <li>System Boundaries: </li> </ul> <p>A system boundary is a box that surrounds all the use cases in a diagram. It shows what is included in the system and separates it from everything outside of it. Anything inside the boundary is part of the system being designed, while anything outside (like users or other systems) interacts with it from the outside. This helps clearly define the scope of the system.</p> <p></p> <ul> <li> <p>Actors: These are the people or systems that interact with what you're designing. For example, a \u201cCustomer\u201d or \u201cAdmin.\u201d For Advanced Higher we will use two types of actors:</p> <ul> <li> <p>Primary: Always placed on the left hand side of the boundary. Primary actors are the people who will be interacting with the system. There is no limit to how many primary actors you can have but your system must have at least one.</p> </li> <li> <p>Secondary: Always placed on the right hand side of the boundary. Secondary actors are support systems that the main system will use. For example:</p> <ul> <li>Databases</li> <li>Verification systems</li> <li>Servers</li> </ul> </li> </ul> <p></p> </li> <li> <p>Use Cases: These are the actions that the system performs, like \u201cLog in,\u201d \u201cView Orders,\u201d or \u201cSend Email.\u201d</p> <p></p> </li> <li> <p>Relationships: These are the lines that show how actors and use cases are connected. For advanced higher there are 5 types of relationship that you must know: </p> <ul> <li>Association: Association happen between actors and use cases. Associations are drawn as a single solid line with NO arrows on the end.</li> </ul> <p></p> <ul> <li>Generalisation of an Actor: Generalisation of an actor means one actor CAN inherit from another actor. This allows you to share associations and keep your diagram easier to understand and follow.</li> </ul> <p></p> <ul> <li> <p>Extend: Extends are shown with a dashed line with an arrow pointing towards the original use case with extend written above the line. Extend allows for extra functionality for your use cases. For example:</p> <ul> <li>A user can pay for a purchase however a bank would need to approve the transaction. </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Include: Include adds a mandatory process to your original use case. For example:</p> <ul> <li>When a user attempts to log into a system the username and password must be checked before providing authorisation.</li> </ul> </li> </ul> <p></p> <ul> <li>Generalisation of a Use Case: This allows your system to inherit two similar use case. For example: a user will have the same log in use case as an admin however the user and admin login are both seperate. </li> </ul> <p></p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/#example-question","title":"Example Question","text":"<p>Scenario:</p> <p>At Johns Town Academy, the library system is used by both students and librarians. To begin, both must log in to the system. Students can search for books and request to borrow them. Librarians can add new books to the system and approve borrowing requests from students.</p> <p></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/2.0_Analysis/L7/7.7_UCD/#summary","title":"Summary","text":"<ul> <li>UML Use Case Diagrams help you plan a system from the user's point of view.</li> <li>Actors are the users or systems.</li> <li>Use Cases are the actions the system allows.</li> <li>Relationships show which actor is linked to which use case.</li> <li>Use Case Diagrams are used in the analysis phase of software development.</li> </ul> <p> Analysis</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/","title":"Design","text":"<p>Quick Links</p> <ul> <li>Identfying Data Types and Structures</li> <li>Structure Diagrams</li> <li>Flowcharts</li> <li>Pseudocode</li> <li>Wireframe Diagrams</li> </ul> <p>What you Need to Know</p> <p>Identify the data types and structures required for a problem that relates to the implementation at this level, as listed below.</p> <p>Describe, identify, and be able to read and understand:</p> <ul> <li> <p>structure diagrams</p> </li> <li> <p>flowcharts</p> </li> <li> <p>pseudocode</p> </li> </ul> <p>Exemplify and implement one of the above design techniques to design efficient solutions to a problem.</p> <p>Describe, and implement user-interface design, in terms of input and output, using a wireframe.</p> <p>Efficient problem-solving in computing begins with careful planning and the use of appropriate design techniques to ensure solutions are both effective and easy to implement. </p> <p>A key aspect of this process involves identifying the data types and structures required to solve a problem. These choices are critical, as they influence how efficiently a program can handle inputs, process data, and deliver outputs.</p> <p>To design and understand solutions, several tools and techniques are used:</p> <ul> <li> <p>Structure diagrams provide a visual breakdown of a system, showing its components and how they interact.</p> </li> <li> <p>Flowcharts illustrate the logical flow of processes, making it easier to follow the sequence of steps within an algorithm.</p> </li> <li> <p>Pseudocode bridges the gap between natural language and programming by offering a simplified, language-agnostic way to represent a solution.</p> </li> </ul> <p>In addition, user-interface design (<code>wireframes</code>) are another essential element that usees simple sketches or digital drafts that outline the layout of a user interface, detailing how input and output are managed.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#variables-and-data-structures","title":"Variables and Data Structures","text":"<p>At National 5, the two data structures you need to know are:</p> <ul> <li>Variable \u2013 stores a single value (e.g. age = 15)</li> <li>Array \u2013 stores multiple values of the same type (e.g. scores = [14, 18, 20])</li> </ul> <p>You must be able to identify both as data structures in the exam.</p> <p>A variable is used to store a single value during the running of a program. </p> <pre><code>name1 = (\"Alice\")\nname2 = (\"Ben\")\nname3 = (\"Carla\")\nname4 = (\"David\")\nname5 = (\"Eilidh\")\n</code></pre> <p>Even though it holds only one value, the SQA considers a variable to be a data structure, because it is a named place in memory where data is stored.</p> <p>A data structure is a way to store and organise multiple values. At National 5, the most common structure you will use is an array (also called a list).</p> <p>An array lets you store many values in one place. For example, if you wanted to store the names of five pupils, instead of creating five separate variables, you could use one array:</p> <pre><code>names = [\"Alice\", \"Ben\", \"Carla\", \"David\", \"Eilidh\"]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#identifying-data-types-and-structures","title":"Identifying Data Types and Structures","text":"<p>Data types are important when programming. The computer has to know whether to expect numbers, text, or other types of values. </p> <p>We could look at the data types in terms of the inputs, processes, and outputs from our analysis.</p> <p>There are five data types for National 5:  Data Type Used For Integer Whole numbers (positive or negative), e.g. 7, -12 Real Numbers with decimal places, e.g. 3.14, -0.5 Boolean True or False values, often used in decisions or conditions Character A single letter, number, or symbol, e.g. 'A', '3', '?' String Text made up of multiple characters, e.g. \"Hello123!\" <p></p> <p>If you are given an example, you need to be able to say which data type it belongs to.</p> <p> Example Value Data Type \"Ella\" String 15 Integer 15.5 Real True Boolean <p></p> <p>Example</p> <p>You have been asked to create a program asks the user for the names and ages of everyone in the class. When finished, it displays a message saying how many people are in the class, and their average age.</p> <p>If you were asked to explain the data types used in this program, in the exam, you would say something like:</p> <ul> <li> <p>The <code>names</code> are <code>strings</code>, because they are <code>text</code></p> </li> <li> <p>The <code>ages</code> are <code>integers, e.g. someone is</code>15` years old</p> </li> <li> <p>The number of people in the class is an <code>integer</code>, because you can\u2019t have <code>0.5</code> of a person</p> </li> <li> <p>The average is a <code>real</code> number, because it might have a <code>decimal point</code> in it.</p> </li> </ul> <p>The last point is really important - quite often, you could be asked to calculate an average. </p> <p>Think about it yourself - if three people are 15, 15 and 16, those are integers - but the average is 15.333, a real number.</p> <p>Remeber to fully think through the problems!</p> <p>The data types are really important, because we\u2019ll be talking about them all the time during this topic. You\u2019ll be using and discussing these five basic types in every program.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#practice","title":"Practice","text":"<p>Look at the following scenario and identify the data types:</p> <p>A program records whether a pupil has handed in homework, their mark out of 20, and their name.</p> <p>What data types would be used?</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#structure-diagrams","title":"Structure Diagrams","text":"<p>A structure diagram (or structure chart) is the first design notation. </p> <p>We use these to break down the task into smaller chunks.</p> <p>The structure diagram is useful for showing the sequence of steps needed to solve the problem. It is always read from top-to-bottom and left-to-right.</p> Example 1 <p>You have been asked to create a program that asks for the user\u2019s username and password, checks if they are correct, and tells them whether or not they have been granted access.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the username and password</li> <li>Check if they are valid</li> <li>Tell the user if they have access</li> </ol> <p> </p> <p>However, we can break this diagram down further. </p> <p>The first step (get the username and password) can be broken down into two more blocks: </p> <ul> <li> <p>get the username</p> </li> <li> <p>get the password</p> </li> </ul> <p> </p> Example 2 <p>You have been asked to create a program that asks for two numbers, calculates the total and displays the total on screen.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the two numbers</li> <li>Calculate the total</li> <li>Display the total on screen</li> </ol> <p> </p> <p>So far, you structure diagrams have used the same symbol (process, meaning it does something).</p> <p>There are four different symbols that can be used on a structure diagram.</p> <p>Look at the example below to see how they can be used.</p> Example 3 <p>You have been asked to create a program that asks for five numbers, calculates the total and displays the total on screen.</p> <ul> <li> <p>We start with the main task/problem, and put this in the top box.</p> </li> <li> <p>We can break the structure diagram into roughly three parts: the <code>inputs</code>, the <code>process</code> and the <code>outputs</code>.</p> </li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the five numbers</li> <li>Calculate the total</li> <li>Display the total on screen</li> </ol> <p> </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#flowcharts","title":"Flowcharts","text":"<p>Flowcharts are used to show the sequence of steps in a program. We read the flowchart from top-to-bottom, following the arrows.</p> <p>You can use a flowchart with any program, but they are good for clearly showing decisions and loops.</p> <p>Flowcharts don\u2019t have a specific symbol for loops. Instead, they have to show a loop as a decision, with the arrows going up/backwards.</p> <p>In this example, if the password is not correct, the program shows an error message, and then the arrow points back towards asking for the password again. </p> <p>This loop will continue until the user enters a correct password, breaking the loop.</p> <p>Info</p> <p>Some people prefer flowcharts to other notations, and others don\u2019t. </p> <p>According to the course spec, you should never be in a position where you have to draw a flowchart from scratch: you usually have a choice of at least two design notations (e.g. a flowchart or a structure diagram). </p> <p>However, you do need to be able to read and understand a flowchart, and answer questions on one that you are given.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode (pronounced sudo-code) is a way of planning your program line-by-line, without writing actual code. </p> <p>Key Points</p> <p>Pseudocode isn\u2019t as strict as a real programming language. </p> <p>We write pseudocode in English. </p> <p>There are no fixed rules for how it should look. </p> <p>So long as you break the problem down into steps, and your meaning is clear, you can be awarded the marks.</p> <p>You will get more used to seeing pseudocode as you work on practical tasks, as lots of the examples will use it for their design.</p> <p>The SQA gives the following example of pseudocode to calculate the volume of a swimming pool.</p> <p>First, we break the problem down into steps:</p> <ol> <li> <p>Ask user to enter dimensions of the swimming pool in metres</p> </li> <li> <p>Calculate volume of pool (<code>length * width * depth</code>)</p> </li> <li> <p>Display message stating the volume of the pool</p> </li> </ol> <p>For step 1 (ask the user to enter dimensions), we can break this down further into <code>1.1</code>, <code>1.2</code> and <code>1.3</code>. </p> <p>These are called refinements. </p> <p>Each refined line could later be translated straight into a line of program code.</p> <p><code>1.1</code> Ask user to enter length</p> <p><code>1.2</code> Ask user to enter width</p> <p><code>1.3</code> Ask user to enter height</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index%20copy/#wireframe-diagrams","title":"Wireframe Diagrams","text":"<p>For software development, all you have to do is sketch a (<code>rough</code>) interface based on the inputs and outputs.</p> <p>The actual programs we create in Python don\u2019t have buttons. However, you can draw a wireframe design with buttons and textboxes if you wish.</p> <p>In practice, most of your program interfaces will be made up of lines of text:</p> <pre><code>Please enter your name: John\nPlease enter how many tickets you would like: 5\n\nYou have asked for 5 tickets. That will cost \u00a325\n</code></pre> <p>In this example, there are two inputs (name and number of tickets), and one output (the cost).</p> <p>All you have to do is draw a (<code>reasonable</code>) interface with the right inputs and outputs. </p> <p>If you were asked to draw an interface for a calculator program, that asks for two numbers, and multiplies the result, it could be something like:</p> <pre><code>Please enter first number:________\nPlease enter second number:_______ \n\nTotal multiplied is_______________\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index/","title":"Design","text":"<p>What you Need to Know</p> <p>You must be able to:</p> <p>Identify the data types and structures required for a problem that relates to the implementation at this level, as listed below.</p> Describe, identify, and be able to read and understand: <ul> <li>structure diagrams</li> </ul> <ul> <li>flowcharts</li> </ul> <ul> <li>pseudocode</li> </ul> <p>Exemplify and implement one of the above design techniques to design efficient solutions to a problem.</p> <p>Describe, and implement user-interface design, in terms of input and output, using a wireframe.</p> <p>Efficient problem-solving in computing begins with careful planning and the use of appropriate design techniques to ensure solutions are both effective and easy to implement. </p> <p>A key aspect of this process involves identifying the data types and structures required to solve a problem. These choices are critical, as they influence how efficiently a program can handle inputs, process data, and deliver outputs.</p> <p>To design and understand solutions, several tools and techniques are used:</p> <ul> <li> <p>Structure diagrams provide a visual breakdown of a system, showing its components and how they interact.</p> </li> <li> <p>Flowcharts illustrate the logical flow of processes, making it easier to follow the sequence of steps within an algorithm.</p> </li> <li> <p>Pseudocode bridges the gap between natural language and programming by offering a simplified, language-agnostic way to represent a solution.</p> </li> </ul> <p>In addition, user-interface design (wireframes) are another essential element that usees simple sketches or digital drafts that outline the layout of a user interface, detailing how input and output are managed.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.0_index/#key-topics","title":"Key Topics","text":"<p>Choose a section below to explore each of the key areas in more detail.</p> <ul> <li> <p> Data Types and Structures</p> <p>Learn how different data types and structures are used to store and manage information in a program.</p> <p> Go to Data Types and Structures Notes</p> </li> <li> <p> Structure Diagrams</p> <p>Discover how structure diagrams break down a system into components for easier understanding and planning.</p> <p> Go to Structure Diagram Notes</p> </li> <li> <p> Flowcharts</p> <p>Find out how flowcharts visually represent the logical steps and decisions within an algorithm or process.</p> <p> Go to Flowchart Notes</p> </li> <li> <p> Pseudocode</p> <p>Learn how pseudocode helps describe the steps of a program using clear and simple language before coding.</p> <p> Go to Pseudocode Notes</p> </li> <li> <p> Wireframes</p> <p>Explore how wireframes help design user interfaces by outlining layouts for input, output, and navigation.</p> <p> Go to Wireframe Notes</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.1_Data_Types_and_Structures/","title":"Data Types and Data Structures","text":"<p>What you Need to Know</p> <p>You must be able to identify the data types and structures required for a problem that relates to the implementation at this level.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.1_Data_Types_and_Structures/#data-structures","title":"Data Structures","text":"<p>At National 5, the two data structures you need to know are:</p> <ul> <li>Variable \u2013 stores a single value (e.g. age = 15)</li> <li>Array \u2013 stores multiple values of the same type (e.g. scores = [14, 18, 20])</li> </ul> <p>You must be able to identify both as data structures in the exam.</p> <p>Variables</p> <p>A variable is used to store a single value during the running of a program. </p> <p>Although a variable only holds one value, it is still considered a data structure because it stores data in a named place in memory.</p> Variables<pre><code>name1 = (\"Alice\")\nname2 = (\"Ben\")\nname3 = (\"Carla\")\nname4 = (\"David\")\nname5 = (\"Eilidh\")\n</code></pre> <p>Even though it holds only one value, the SQA considers a variable to be a data structure, because it is a named place in memory where data is stored.</p> <p>Arrays</p> <p>At National 5, the 2nd most common structure you will use is an array (also called a list).</p> <p>An array lets you store many values in one place. For example, if you wanted to store the names of five pupils, instead of creating five separate variables, you could use one array:</p> Arrays<pre><code>names = [\"Alice\", \"Ben\", \"Carla\", \"David\", \"Eilidh\"]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.1_Data_Types_and_Structures/#data-types","title":"Data Types","text":"<p>Data types are important when programming. The computer has to know whether to expect numbers, text, or other types of values. </p> <p>There are five data types you must know for National 5:</p> <p> Data Type Used For Integer Whole numbers (positive or negative), e.g. 7, -12 Real Numbers with decimal places, e.g. 3.14, -0.5 Boolean True or False values, often used in decisions or conditions Character A single letter, number, or symbol, e.g. 'A', '3', '?' String Text made up of multiple characters, e.g. \"Hello123!\" <p></p> <p>If you are given an example, you need to be able to say which data type it belongs to.</p> <p> Example Value Data Type \"Ella\" String 15 Integer 15.5 Real True Boolean <p></p> <p>Example</p> <p>You have been asked to create a program that asks the user for the names and ages of everyone in the class.</p> <p>When finished, it displays a message saying how many people are in the class, and their average age.</p> <p>If you were asked to explain the data types used in this program, in the exam, you would say something like:</p> <ul> <li> <p>The names are strings, because they are text</p> </li> <li> <p>The ages are integers, e.g. someone is 15 years old</p> </li> <li> <p>The number of people in the class is an integer, because you can\u2019t have <code>0.5</code> of a person</p> </li> <li> <p>The average is a real number because it might include a decimal point.</p> </li> </ul> <p>The last point is really important - quite often, you could be asked to calculate an average. </p> <p>Think about it yourself - if three people are 15, 15 and 16, those are integers - but the average is 15.333, a real number.</p> <p>Remember to fully think through the problems!</p> <p>These data types are really important \u2014 you\u2019ll use and discuss them in every program, and being confident with them will really help you in the exam.</p> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.2_Structure_Diagrams/","title":"Structure Diagrams","text":"<p>What you Need to Know</p> You must be able to describe, identify, understand and be able to read: <ul> <li>structure diagrams</li> </ul> <p>A structure diagram (also known as a structure chart) is a visual design tool used to break down a problem into smaller, manageable parts. It helps identify the order in which tasks or components must be completed.</p> <p>A structure diagram is always designed from top-to-bottom and left-to-right:</p> <p>There are four different symbols that can be used on a structure diagram.</p> Using the shapes above we can now break down our get the username and password further by adding:  <ul> <li>get username</li> </ul> <ul> <li>get password</li> </ul> <ul> <li>is name valid?</li> </ul> <ul> <li>is password valid?</li> </ul> <p>Example</p> You have been asked to create a program that asks for five numbers, calculates the total and displays the total on screen. <ul> <li>We start with the main task/problem, and put this in the top box.</li> </ul> <ul> <li>We can break the structure diagram into roughly three parts: the inputs, the process and the outputs.</li> </ul> <p>These have to be done in order from left to right:</p> <ol> <li>Get the five numbers</li> <li>Calculate the total</li> <li>Display the total on screen</li> </ol> <p>Key Points</p> <ul> <li>Structure diagrams are designed top-to-bottom, left-to-right.</li> <li>Each level breaks the problem into smaller parts.</li> <li>They use standard symbols to represent inputs, processes, decisions, and outputs.</li> <li>Diagrams help visualise the overall program structure before coding.</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.3_Flowcharts/","title":"Flowcharts","text":"<p>What you Need to Know</p> You must be able to describe, identify, understand and be able to read: <ul> <li>flowcharts</li> </ul> <p> <p></p> <p>Flowcharts are a type of design notation used to show the sequence of steps in a program. They are read from top to bottom, following the arrows that show the flow of control.</p> <p>Flowcharts can be used to represent any kind of program but are especially useful for clearly showing decisions (using selection) and loops (using repetition).</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.3_Flowcharts/#loops-in-flowcharts","title":"Loops in Flowcharts","text":"<p>Flowcharts don\u2019t have a specific symbol for loops. Instead, a loop is shown using a decision symbol with one arrow looping back to a previous step.</p> <p>For example, in the diagram below, if the password is incorrect, the program shows an error message and then loops back to ask for the password again. This loop continues until the user enters the correct password.</p> <p>Flowcharts don\u2019t have a specific symbol for loops. Instead, they have to show a loop as a decision, with the arrows going up/backwards.</p> <p>In this example, if the password is not correct, the program shows an error message, and then the arrow points back towards asking for the password again. </p> <p>This loop will continue until the user enters a correct password, breaking the loop.</p> <p>Do I Need to Draw Flowcharts?</p> <p>Some people prefer flowcharts over other design methods, while others do not. According to the course specification:</p> <p>You will not be expected to draw a flowchart from scratch.</p> <p>You will usually be given a choice of design notations, such as a flowchart or a structure diagram.</p> <p>However, you must be able to:</p> <ul> <li>read and understand flowcharts</li> <li>answer questions based on flowcharts you are given</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.4_Pseudocode/","title":"Pseudocode","text":"<p>What you Need to Know</p> You must be able to describe, identify, understand and be able to read: <ul> <li>Pseudocode</li> </ul> <p> <p></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.4_Pseudocode/#what-is-pseudocode","title":"What is Pseudocode?","text":"<p>Pseudocode is a way of writing down the steps of a program without worrying about the exact programming language.  </p> <p>It uses structured English and looks a bit like code, but it is not meant to run on a computer.  </p> <p>We use pseudocode to show the design of a program before we write it in Python or another language.  </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.4_Pseudocode/#key-rules","title":"Key Rules","text":"<ul> <li>Pseudocode is written in simple, structured English.</li> <li>Variables should have sensible names.</li> <li>Arithmetic and string operations are written in standard symbols.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.4_Pseudocode/#why-use-pseudocode","title":"Why Use Pseudocode?","text":"<ul> <li>Easy to read.  </li> <li>Works the same no matter what language you use later.  </li> <li>Good for explaining ideas in exams.  </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L5/5.4_Pseudocode/#example","title":"Example","text":"<pre><code>Main Steps\n\n1 Enter valid temperatures for each day of the week and calculate the total\n2 Calculate the average temperature\n3 Work out if the average temperature is above or below freezing\n4 Display all results\n\nRefinements\n\n1.1 totalTemp = 0\n1.2 start fixed loop 7 times\n1.3 enter dailyTemp\n1.4 while dailyTemp &lt; -50 or dailyTemp &gt; 50\n1.5     display \"Invalid, temperature must be between -50 and 50\"\n1.6     re-enter dailyTemp\n1.7 end while\n1.8 totalTemp = totalTemp + dailyTemp\n1.9 end fixed loop\n\n2.1 averageTemp = totalTemp / 7\n2.2 round averageTemp to 1 decimal place\n\n3.1 if averageTemp &lt; 0\n3.2     message = \"The week was below freezing on average\"\n3.3 else\n3.4     message = \"The week was above freezing on average\"\n3.5 end if\n\n4.1 start fixed loop 7 times\n4.2 display each dailyTemp\n4.3 end fixed loop\n4.4 display totalTemp\n4.5 display averageTemp\n4.6 display message\n</code></pre> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.0_index/","title":"Design","text":"<p>What You Need to Know</p> <p>You must be able to:</p> <ul> <li>Identify appropriate data types and structures required to solve a problem.</li> <li>Read, interpret, and implement design solutions using the following recognised design techniques:<ul> <li>Structure diagrams (including top-level design, refinements, and data flow)</li> <li>Pseudocode</li> </ul> </li> <li>Use a recognised technique to design an efficient solution to a problem.</li> <li>Describe and design user interfaces using wireframes to show input, output, and layout clearly.</li> </ul> <p>Effective problem-solving at Higher level begins with careful planning and selecting the right design techniques to produce efficient, modular, and maintainable code.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.0_index/#modular-design","title":"Modular Design","text":"At Higher level, you use a modular approach to break complex problems into smaller, manageable parts. <p>Top Down Design</p> <ul> <li>Start with the complete problem</li> <li>Break it into high-level tasks</li> <li>Each task becomes a module</li> <li>These modules are refined further using stepwise refinement</li> </ul> <p>Top-down design helps you plan a solution before coding begins.</p> <p>Top Level Design</p> <p>The top level shows the main steps of your program.</p> <ul> <li>It identifies the main components that will be refined into smaller tasks.</li> </ul> <p>Stepwise Refinement</p> <p>This is the process of breaking each module into smaller sub-tasks.</p> <ul> <li>Keep breaking each task down until it\u2019s simple enough to implement</li> <li>Each refinement should do just one job</li> <li>This is reflected by designing each module in increasing detail, until it\u2019s ready to be implemented.</li> </ul> <p>Refinements</p> <p>Refinements are the smaller sub-tasks created by applying stepwise refinement.</p> <ul> <li>Each one is a sub-task that contributes to solving the overall problem</li> <li>You continue refining until each task is simple enough to implement directly in code.</li> </ul> <p>Data Flow</p> <p>Data flow shows how information moves between modules.</p> <ul> <li>This can be represented visually by showing which data is passed between modules</li> <li>Inputs and outputs must be labelled</li> <li>This helps you understand how modules work together</li> </ul> <p>Once a modular design has been created, a recognised design technique can be used to represent and refine it.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.0_index/#recognised-design-techniques","title":"Recognised Design Techniques","text":"<p>To plan and understand solutions, the following techniques are used:</p> <ul> <li> <p>Structure diagrams show the hierarchical breakdown of a program into modules. They help visualise top-level design, refinement, and the flow of data between components.</p> </li> <li> <p>Pseudocode expresses a solution using structured, language-agnostic steps. It allows you to refine algorithms in plain, logical terms before coding.</p> </li> </ul> <p>In addition, user interface design (via wireframes) outlines how input and output are managed. Wireframes use annotated sketches or mockups to show how users interact with a system.</p> <p>Choose a section below to explore each of the Design Techniques in more detail.</p> <ul> <li> <p> Structure Diagrams</p> <p>Discover how structure diagrams break a system into smaller parts using top-down design, stepwise refinement, and data flow between modules.</p> <p> Go to Structure Diagram Notes</p> </li> <li> <p> Pseudocode</p> <p>Learn how pseudocode outlines the steps in a solution using clear, structured logic to plan and refine algorithms before they are implemented.</p> <p> Go to Pseudocode Notes</p> </li> <li> <p> Wireframes</p> <p>Explore how wireframes help design user interfaces by showing how input, output, and layout are organised for effective user interaction.</p> <p> Go to Wireframe Notes</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/","title":"Structure Diagrams","text":"<p>What You Need to Know</p> <p>You must be able to read, interpret, and implement efficient design solutions to problems, demonstrating the ability to:</p> <ul> <li>Create and understand structure diagrams</li> <li>Identify and apply top-level design</li> <li>Illustrate the flow of data between components</li> <li>Use stepwise refinement to break down problems into manageable sub-tasks</li> </ul> <p> <p></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/#what-is-a-structure-diagram","title":"What is a Structure Diagram?","text":"<p>A structure diagram is a visual tool used during the design stage to break a program into smaller, manageable modules (also called sub-programs). Each module handles a specific task in the overall algorithm.</p> <p>This is part of a top-down design approach, known as modular programming. It helps developers:</p> <ul> <li>Focus on one part of the program at a time</li> <li>Reuse and test individual modules</li> <li>Work in teams, where each member can be assigned different modules</li> </ul> <p>Top-down design means breaking the problem into successively smaller sub-tasks \u2014 each represented as a module.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/#example-structure-diagram","title":"Example Structure Diagram","text":"<p>Below is a structure diagram for a program that finds and displays the most-downloaded song on a streaming platform:</p> <p>Each box represents a module. The box at the top is known as the top-level design \u2014 it outlines the main steps of the algorithm.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/#data-flow","title":"Data Flow","text":"<p>Data flow describes how values are passed between modules. For example:</p> <ul> <li> <p>Module 1 reads song data \u2192 passes it to Module 2</p> </li> <li> <p>Module 2 counts downloads \u2192 passes results to Module 3</p> </li> <li> <p>Module 3 identifies the most popular song \u2192 passes details to Module 4</p> </li> </ul> <p>You can show data flow in two ways:</p> <p>1 - With arrows on a structure diagram</p> <ul> <li>Arrows pointing into a module show incoming data</li> <li>Arrows pointing out of a module show outgoing data</li> </ul> <p>2 - In a data flow table</p> <p>Important</p> <p>Input from a user or reading/writing a file is not considered data flow. Data flow only refers to values passed between modules.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/#refinement","title":"Refinement","text":"<p>Each module in the structure diagram can be broken down using stepwise refinement \u2014 describing more detailed sub-tasks for implementation.</p> <p>For example, the module 'Find song with most downloads' could be broken into steps like: set a starting value, compare downloads, and store the result. This level of detail helps when turning the design into code.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.1_Structure_Diagrams/#summary","title":"Summary","text":"<p>Structure diagrams help you:</p> <ul> <li>Break a program into logical modules</li> <li>Apply a top-down design by identifying the top-level structure and refining it step by step</li> <li>Represent the flow of data between modules using arrows or data flow tables</li> <li>Prepare for writing refined pseudocode</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.3-Data-Flow-In-Out/","title":"Data Flow In / Out","text":"<p>When data is passed between modules, this is called the data flow.</p> <p>There are two ways of indicating data flow - either in a table, or as arrows on a structure diagram. The data flow design tells you (directly) which parameters you will need when implementing.</p> <p>The data flow can be variables or arrays. This data is passed in or passed out of a module.</p> <p>You can think of data flow like inputs and outputs from the analysis stage: what does each module need to know?</p> <p>The structure diagram on the previous page had four modules:</p> <ol> <li> <p>Read song data from text file</p> </li> <li> <p>Count number of downloads for each song</p> </li> <li> <p>Find song with most downloads [<code>the position of the most popular song in the list</code>]</p> </li> <li> <p>Display info of song with the most downloads</p> </li> </ol> <p>Data will have to be passed between these modules:</p> <ul> <li> <p>The song data will need to be passed from module 1 to module 2.</p> </li> <li> <p>How many times a song has been downloaded will need to go from module 2 to module 3</p> </li> <li> <p>Which song ID, and the details of all songs, will need to go to module 4 (<code>So that it can display the details matching the most popular song</code>)</p> </li> </ul> <p>We can note the data flow on the structure diagram:</p> <p>Arrows that point up are <code>IN</code>, arrows that point down are <code>OUT</code>. </p> <p>You will often be given this part of the design, as it helps you to decide which parameters are needed in your modules.</p> <p>The Rules of Data Flow</p> <ul> <li>Input from the user is not data flow. It\u2019s only data flow if it\u2019s being passed to/from another module</li> <li>Reading from (or writing to) a file is not data flow. The data can be read from a file (not data flow) but then passed out to another module (this is data flow)</li> </ul> <p>Note: We can represent the same information in a table.</p> <p><code>Songdata[]</code> and <code>howmany[]</code> are going to be arrays (multiple pieces of data, not a single value), so brackets have been added, whereas mostpopular is a variable (one piece of data).</p> <p>You will notice that the first module is reading from a file. </p> <p>Remember, File input is not counted as data flow going in. </p> <p>The data flow on the diagram only shows data that is being passed as a parameter.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L6/6.3-Main-Algorithm-and-Refinements/","title":"Pseudocode","text":"<p>The main algorithm is also known as the top-level design.</p> <p>The example on the previous page is the main algorithm, it shows the main steps of the program, but not the detail of how each step works.</p> <p>We could list the same algorithm as numbered lines of pseudocode. This is the main algorithm. </p> <pre><code>1.0 Read song data from text file\n\n2.0 Count number of downloads for each song\n\n3.0 Find song with most downloads\n\n4.0 Display song info\n</code></pre> <p>Important</p> <p>Write your main algorithm first when implementing, then you can fill in the details for each step.</p> <p>These details are known as refinements. </p> <p><code>Step 3</code> from the algorithm above tells us to find the song with the most downloads. </p> <p>We can assume that, by this point, we have an array of songs, telling us how many downloads each song has. </p> <p>We can refine step 3 to write detailed pseudocode that says how to do this:</p> <p><pre><code>3.1 Set most popular to first song in the list\n3.2 Loop for the number of songs\n3.3        If popularity of song is &gt; popularity of most popular\n3.4              Set most popular to current song\n3.5        End if\n3.6 End loop\n</code></pre> Don\u2019t worry too much about how the algorithm above works, the important thing is that it refines step 3 by adding the detail of how this module will work.</p> <p>Example Question</p> <p>Q1 - Read the main algorithm below</p> <p>Main Algorithm:</p> <p><pre><code>1.0 Load password data from file\n2.0 Ask user to enter a valid password\n3.0 Check if user password is in the file data\n4.0 Output whether password has been changed\n</code></pre> Step 2 could be refined further.</p> <p>Refine step 2 below.</p> <pre><code>2.1 Ask user to enter password\n2.2 While password is not valid \n2.3        Display error message\n2.4        Ask user to enter password again\n2.5 End while loop\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L7/7.1_UML/","title":"UML (Unified Modelling Language)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/3.0_Design/L7/7.1_UML/#what-is-uml","title":"What Is UML?","text":"<p>Unified Modelling Language (UML) is a graphical standardised design language used to model a system. The system may be software or non-software. </p> <p>UML provides a clear visual representation of the system making that system easier to understand and maintain. </p> <p>Using UML, you can model just about any type of application, running on any type and combination of hardware, operating system, programming language, and network. </p> <p>Built upon fundamental object-oriented concepts including class and operation, UML is particularly useful in object-oriented software development where it is used to create visual models of software systems.</p> <p>There are many different applications of UML diagrams but we will only be looking at two, they are:</p> <p>Use case diagram shows the functionality of the system from the users\u2019 perspective and is essentially non-technical. </p> <p>Class diagrams show a class represented by a rectangle labelled by its name, attributes and operations. Classes may be associated similar to entity relationships.  (These will be covered in the Object Oriented Programming Pages)</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.0_Home/","title":"Software Implementation","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.0_Home/#data-types-and-structures","title":"Data Types and Structures","text":"<p> Input and Output</p> <p> Variables and Data Types</p> <p> Arrays</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.0_Home/#computational-constructs","title":"Computational Constructs","text":"<p> Selection Constructs with Simple Conditional Statements</p> <p> Selection Constructs using Complex Conditional Statements (AND,OR,NOT)</p> <p> Fixed Loops (for)</p> <p> Conditional Loops (while)</p> <p> Pre-Defined Functions</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.0_Home/#algorithm-specification","title":"Algorithm Specification","text":"<p> Traversing a 1D Array</p> <p> Running Total within a Loop</p> <p> Input Validation</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.10_Running_Total_Within_a_Loop/","title":"Running Total Within a Loop","text":"<p>Quick Links</p> <ul> <li>Running total from User Input</li> <li>Running Total from an Array</li> <li>Running Total within a Conditional Loop</li> </ul> <p>The running total in a loop algorithm (or running total) is used to keep a running total of some numbers.</p> <p>These numbers can be either:</p> <ul> <li> <p>Values entered by the user</p> </li> <li> <p>A list of values in an array</p> </li> </ul> <p>In addition, a running total will typically use a fixed loop. </p> <p>Running Total Algorithm</p> <pre><code>1.0 - Set total to 0\n\n2.0 - Start a for loop (with a loop counter)\n        3.0 - Add current item to the total or increase total by 1 depending on the program.\n4.0 - End for loop\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.10_Running_Total_Within_a_Loop/#running-total-from-user-input","title":"Running total from User Input","text":"<p>In this example, the user is asked to enter ten numbers. </p> <p>As each number is entered, it is added to the total. </p> <p>The programmer might then choose to display this total at the end:</p> <p>Pseudocode Example:</p> <pre><code>1.0 - Set total to 0\n\n2.0 - For counter from 0 to 9\n        3.0 - Get number from user\n        4.0 - Set total to total + number\n5.0 - End for loop\n</code></pre> <p>Running Total From User Input</p> CodeExplanation <pre><code>total = 0\n\nfor counter in range(0, 10):\n    num = (int(input(\"Enter number\"))\n    total = total + num         \n</code></pre> <p><code>Line 1</code></p> <p>Create a variable called total and set it to 0.</p> <p><code>Line 3</code></p> <p>This line starts a loop that will run 10 times.</p> <p>The for loop also creates another variable called <code>counter</code> which counts from <code>0 to 9</code> (10 numbers in total).</p> <p><code>Line 4</code></p> <p>Ask the user to input a number.</p> <p><code>Line 5</code> </p> <p>Update the total by adding the number you just entered (num) to whatever is already in total.</p> <p>For example: If total is <code>5</code> and you enter <code>3</code>, the new total becomes <code>5 + 3 = 8</code>.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.10_Running_Total_Within_a_Loop/#running-total-from-an-array","title":"Running Total from an Array","text":"<p>Below is an array of five daily temperatures:</p> <p>The name of the array is <code>temps[]</code></p> <p>We want to add up a total of all these temperatures. </p> <p>The algorithm reads one value at a time from the array, and adds it to the current total variable.</p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Add values to the array \n2.0 - Set total to 0\n\n3.0 - Start a for loop (with a loop counter)\n        4.0 - Add current item from the array to the total\n5.0 - End for loop\n\n6.0 - Display total\n</code></pre> <p>Running Total From an Array</p> CodeExplanation <pre><code>temps =  [18.2, 19.1, 20.1, 19.8, 21.4]\ntotal = 0.0\n\nfor counter in range(len(temps)):\n    total = total + temps[counter]\n\nprint (total)\n</code></pre> <p><code>Line 1</code></p> <p>Creates a list called temps that contains five temperature values (in degrees). </p> <p>Each number in the list represents a temperature reading.</p> <p><code>Line 2</code></p> <p>Initialises a variable called total to 0.0. </p> <p>It will be used to store the sum of all the temperatures in the list.</p> <p><code>Line 4</code></p> <p>Starts a for loop that goes through each index of the <code>temps</code> list.</p> <ul> <li> <p>len(temps) gives the length of the list, which is 5 in this case.</p> </li> <li> <p>range(len(temps)) creates a sequence of numbers from 0 to 4 (the indices of the list).</p> </li> <li> <p>The variable counter will take each of these values (0, 1, 2, 3, and 4) one by one during the loop.</p> </li> </ul> <p><code>Line 5</code> </p> <p>Inside the loop, the program adds the temperature at the current index (temps[counter]) to the total. For example:</p> <ul> <li> <p>On the first iteration (counter = 0), it adds temps[0] (18.2) to total.</p> </li> <li> <p>On the second iteration (counter = 1), it adds temps[1] (19.1) to total.</p> </li> <li> <p>This continues for all the temperatures in the list.</p> </li> </ul> <p><code>Line 7</code> </p> <p>After the loop finishes (all temperatures have been added to total), the program outputs the total sum of the temperatures.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.10_Running_Total_Within_a_Loop/#running-total-within-a-conditional-loop","title":"Running Total within a Conditional Loop","text":"<p>Very rarely, you might be asked to use a running total with a conditional loop (while). </p> <p>A question like this was used in the 2019 exam (Q19b). </p> <p>he only change is that you use a while / conditional loop instead of a fixed loop.</p> <p>This example asks the user to keep entering numbers, until the overall total reaches 100 or more.</p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Set total to 0\n\n2.0 - While total is less than 100\n        3.0 - Ask user to input a number\n        4.0 - Set total to total + number\n5.0 - End for loop\n</code></pre> <p>Running Total within a Conditional Loop</p> CodeExplanation <pre><code>total = 0\n\nwhile total &lt; 100:\n    num = (int(input(\"Enter number\"))\n    total = total + num\n</code></pre> <p><code>Line 1</code></p> <p>Create a variable called <code>total</code> and set it to 0.</p> <p><code>Line 3</code></p> <p>Start a loop that will run whilst <code>total</code> is less than 100.</p> <p><code>Line 4</code></p> <p>Ask the user to input a number.</p> <p><code>Line 5</code> </p> <p>Update the total by adding the number you just entered (num) to total.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.11_Input_Validation/","title":"Input Validation","text":"<p>Quick Links</p> <ul> <li>Input Validation Using Complex Conditional Statements</li> <li>Real World Example</li> </ul> <p>When you\u2019re filling in a form - on a website, for example - it will often contain input validation. </p> <p>This means that it checks you have entered the right type of data in each place. </p> <p>Note: it\u2019s not checking that the data is actually correct, just that it is the right sort of data. If it wants a number, it (hopefully)  won\u2019t let you enter \u201chello123dinosaur$\u201d</p> <p>Other everyday examples of input validation:</p> <ul> <li> <p>Your password must be (for example) at least 6 characters long.</p> </li> <li> <p>Your age must be an integer (whole number) and cannot be less than 0.</p> </li> <li> <p>A percentage that cannot be less than 0 or greater than 100</p> </li> </ul> <p>Input validation will always use a conditional loop. The steps of this algorithm are:</p> <pre><code>1.0 - Ask the user to input something\n\n2.0 - Start a while loop, while the input does not meet the condition (e.g. while age &lt; 15)\n\n        3.0 - Show an error message\n\n        4.0 - Ask the user to input (again)\n\n5.0 - End while loop\n</code></pre> <p>Below is an example of an Input Validation <code>Standard Algorithm</code> that is required at National 5. </p> <p>Number Check Program (using simple conditional statements)</p> CodeExplanation <pre><code>user_input = int(input(\"Please enter a number that is greater the 14\"))\n\nwhile user_input &lt; 16:\n\n    print(\"Sorry, your number must be greater than 15\")\n\n    user_input = int(input(\"Please enter a valid number\")) \n\nprint(\"Number accepted.\")\n</code></pre> <p><code>Line 1</code></p> <p>The program asks the user to enter a number greater than 15.</p> <p><code>Line 3</code></p> <p>A Conditional Loop (<code>while loop</code>) checks if the inputted number is less than 16.</p> <p><code>Line 5</code></p> <p>If <code>line 3</code> = true, the program informs the user that the number must be greater than 15.</p> <p><code>Line 7</code> </p> <p>The program asks the user to input another number.</p> <p><code>Line 9</code> </p> <p>If the number is greater than 15 <code>Number accepted is displayed</code> outside of the while loop. </p> <p>Important</p> <p>If <code>Number accepted</code>is placed inside the while loop, your program will become stuck in an indefinate loop! This is an easy way to fail your practical assessment. Remember to always double check your code!</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.11_Input_Validation/#input-validation-using-complex-conditional-statements","title":"Input Validation Using Complex Conditional Statements","text":"<p>Using the above as a template, we can now edit our program to include more advanced programming techniques.</p> <p>Number Check Program (using complex conditional statements)</p> CodeExplanation <pre><code>user_input = int(input(\"Please enter a number between 1 and 10: \"))\n\nwhile user_input &lt; 1 and user_input &gt; 10:\n\n    print(\"Sorry, your number must be greater than 0 and less than 11\")\n\n    user_input = int(input(\"Please enter a valid number\")) \n\nprint(\"Number accepted.\")\n</code></pre> <p><code>Line 1</code></p> <p>The program asks the user to enter a valid age</p> <p><code>Line 3</code></p> <p>A while loop checks if the entered age is less than 15.</p> <p><code>Line 4</code></p> <p>If <code>line 3</code> = true, the program informs the user that they must be 15 or over.</p> <p><code>Line 3</code> </p> <p>The program asks the user to enter their age again.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.11_Input_Validation/#real-world-example","title":"Real World Example","text":"<p>User Account Login Program</p> CodeExplanation <pre><code>username = \"user1\"\npassword = \"pass1\"\n\nattempts = 0\naccount_access = False\n\nwhile attempts &lt; 3:\n\n    user_username = input(\"Please enter your username: \")\n    user_password = input(\"Please enter your password: \")\n\n    if user_username == username and user_password == password:\n\n        print(\"Username and Password Accepted\")\n\n        account_access = True\n\n        break\n\n    else:\n        print(\"Incorrect, please try again\")\n\n        attempts = attempts + 1\n\nif not account_access:\n\n    print(\"Too many attempts. Account locked. Please try later\")        \n</code></pre> <p><code>Line 1</code></p> <p>Sets the correct username to <code>user1</code>.</p> <p><code>Line 2</code></p> <p>Sets the correct password to <code>pass1</code>. </p> <p><code>Line 4</code></p> <p>Keeps track of how many times you have tried to log in. </p> <p>At the start, you haven't tried yet, so it is set to <code>0</code>.</p> <p><code>Line 5</code> </p> <p>This is like a switch that starts as <code>off</code>.</p> <p>It will only turn <code>on</code> (become True) if you enter the correct username and password.</p> <p><code>Line 7</code> </p> <p>Start of the conditional loop that will keep running as long as you've tried fewer than 3 times. </p> <p>Once you reach 3 tries, the loop stops.</p> <p><code>Line 9</code> </p> <p>The user is asked to input their username.</p> <p>This is stored in the user_username <code>variable</code>.</p> <p><code>Line 10</code> </p> <p>The user is asked to input their password.</p> <p>This is stored in the user_password <code>variable</code>.</p> <p><code>Line 12</code> </p> <p>Performs a check to see if the input (user_username and user_password) matches the correct username and password. </p> <p>Both must be correct to continue.</p> <p><code>Line 14</code> </p> <p>If both the <code>username</code> and <code>password</code> are correct, the \"Username and Password Accepted\" message is ouputted. </p> <p><code>Line 16</code> </p> <p>This turns the <code>switch</code> to <code>on</code> and lets the program know that you now have access to your account.</p> <p><code>Line 18</code> </p> <p>This stops the loop because you have successfully logged in.</p> <p><code>Line 20</code> </p> <p>If the username and password are incorrect, \u00e8lse`is selected.</p> <p><code>Line 21</code> </p> <p>Outputs the message \"Incorrect, please try again\"</p> <p><code>Line 23</code> </p> <p>Adds 1 to the <code>Attempts</code> variable.</p> <p>Doing so allows the program to keep track of how many times you\u2019ve tried to log in.</p> <p><code>Line 25</code> </p> <p>After the loop ends, the program checks if you managed to log in. <code>if not account_access</code> is simply asking \" Is user_access now set to True?\"</p> <p><code>Line 27</code></p> <p>As <code>account_access</code> is still set to <code>False</code> the message \"Too many attempts. Account locked. Please try later\" is outputted.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/","title":"Input and Output","text":"<p>Quick Links</p> <ul> <li>Adding Comments</li> <li>Print Statements</li> <li>Inputs</li> <li>Inputting Numbers</li> <li>Input Example</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#what-you-need-to-know","title":"What you need to know","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#python-comments","title":"Python Comments","text":"<p>All of the programs you see will have lines that start with #</p> <p>Example</p> <pre><code># This is a comment\n# The computer ignores lines that start with this symbol\n</code></pre> <p>The computer ignores lines that start with a #. </p> <p>We call these Internal Comments.  </p> <p>It is good practice to write these comments in your code, to remind you what particular parts do.</p> <p>Info</p> <p>At National 5, you will be expected to use comments in your code.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#print-statement","title":"Print Statement","text":"<p>During most National 5 programs, you will be asked to display things on the screen. In Python, you do this with the print() statement.</p> <p>Example</p> <pre><code>print (\"Hello world\")\nprint (\"Welcome to\", \"National 5\")\nprint (\"My name is\", name)\n</code></pre> <p>In the brackets, put the message you want to print. </p> <p>If you want to display a variable, do not use quotation marks:</p> <p>Example</p> <pre><code>print(age)\nprint(name)\n</code></pre> <p>Note</p> <p>This would print whatever is in the variable, not the word age or name.</p> <p>If you want to print a string and a variable, use a comma between the strings:</p> <p>Example</p> <pre><code>print(\"Welcome to\", \"National 5\")\nprint(\"My name is\", name)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#input-statement","title":"Input Statement","text":"<p>When you want the user to enter data, use an input statement.</p> <p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n</code></pre> <p>This shows a message on the screen 'Please enter your name' and asks the user to type in some data. The data they enter is stored in a variable.</p> <p>Example</p> <pre><code># Enter some data from the keyboard\nname = input(\"Please enter your name\")\n\ntitle = input(\"Enter book title\")\nauthor = input(\"Enter book author\")\ngenre = input(\"Enter book genre\")\n</code></pre> <p>Info</p> <p>The input statement will be used in almost all of your programs.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#inputting-numbers","title":"Inputting Numbers","text":"<p>When you input numbers, there is an extra step you must take.</p> <p>Any data that you input is automatically assumed to be a string.</p> <p>Strings can contain any sort of characters, including digits.</p> <p>Note</p> <p>It's important, if we want to use the data as a number (for example, doing a calculation with it) that we cast (convert) it from string to a number type.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.1_Input_and_Output/#input-example","title":"Input Example","text":"<p>Example</p> <pre><code># When you input a string\nname = input(\"Please enter your name\")\n\n# When you input an integer number, use int( )\nage = int(input(\"Enter age\"))\n\n# When you input a real number, use float( )\nprice = float(input(\"Enter price\"))\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/","title":"Variables and Data Types","text":"<p>Quick Links</p> <ul> <li>What are Variables</li> <li>Python Variable Naming Rules</li> <li>Types of Variables</li> <li>Calculations</li> <li>String Concatenation</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/#what-are-variables","title":"What are Variables?","text":"<p>A variable is something that can be assigned a value.</p> <p>Example</p> <pre><code>x = 5\ny = 2\n</code></pre> <p>You will already have used similar in Maths. What is x + y? (the answer is 7)</p> <p>In computing however, we usually give them a longer (more meaningful) name, such as:</p> <p>Example</p> <pre><code>age = 15\nname = \"Bob\"\nemail = \"bob@gmail.com\"\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/#python-variable-naming-rules","title":"Python Variable Naming Rules","text":"<ul> <li>A variable name must start with a letter or the underscore character</li> <li>A variable name cannot start with a number</li> <li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li> <li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li> <li>A variable name cannot be any of the Python keywords.</li> </ul> <p>and although this one is not a rule....</p> <ul> <li>It is important to use meaningful or sensible variable names. </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/#types-of-variables","title":"Types of Variables","text":"<p>In programming variables have a particular type and for National 5 there are five data types that you need to know:</p> Data Type Description Integer Whole number: 12, -50, 100 Real number With a decimal point: 22.5, 0.001 String Words and symbols: hello, abc123 Character A single letter, digit or symbol: a, Z, $, # Boolean True (1) or False (0) <p>Warning</p> <p>Once a variable has been set up with a particular type, you can only assign it data of that type.</p> <p>Example</p> <pre><code># This is an integer\nmyage = int(15)\n\n# This is a real number\nprice = float(0.99)\n\n# This is a string\nfaveSubject = str(\"Computing\")\n\n# This is a character\nfirstInitial = char(\"F\")\n\n# This is a Boolean\nisStudent = bool(1)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/#calculations","title":"Calculations","text":"<p>Python programs will often carry out calculations with operators. The result is usually stored in a variable:</p> <p>Example</p> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\n</code></pre> <p>You can use the following operators:</p> <p>Example</p> <pre><code># Three variables\nnum1 = 5\nnum2 = 7\nsum = 0.0\n\n# Addition\nsum = num1 + num2\n\n# Subtraction\nsum = num1 - num2\n\n# Division\nsum = num1 / num2\n\n# Multiplication\nsum = num1 * num2\n\n# Raise to a power\nsum = num1 ** num2\n\n#Note that \u201craising to the power\u201d means, for example, num1**num2. \n\n#To square or cube a number, you would say:\nsquare = num1 ** 2\ncube = num1 ** 3\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.2_Variables_and_Data_Types/#string-concatenation","title":"String Concatenation","text":"<p>String concatenation is the term used when joining two strings.</p> <p>Example</p> <pre><code>word1 = \u201cHello\u201d\nword2 = \u201cWorld\u201d\n\nsentence = word1 + word2\n</code></pre> <p>Tip</p> <p>The example above doesn\u2019t include a space, you would have to add a space to the end of \u201cHello\u201d or the beginning of \u201cWorld\u201d.\u2003</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.3_Arrays/","title":"Arrays","text":"<p>Quick Links</p> <ul> <li>Accessing Elements in an Array</li> <li>Updating Values in an Array</li> <li>Appending (Adding) to an Array</li> </ul> <p>Imagine you have been asked to create a program that asks for 3 test scores, adds them together, and prints out the total.</p> <p>It could probably start with something like this:</p> <pre><code>score1 = int(input(\"Please enter first score\"))\nscore2 = int(input(\"Please enter second score\"))\nscore3 = int(input(\"Please enter third score\"))\n</code></pre> <p>What happens when we need a program that asks for 20 scores? Or 100? </p> <p>We could write out every variable, but it would be a very long program, and the chance for mistakes is high. </p> <p>Instead, we need an array.</p> <p>An array is simaler to a variable. </p> <p>Only this variable, can store multiple values. </p> <p>This is called an array. Where a normal variable stores data in one memory location , an array reserves a whole set of memory locations, one after the other. </p> <p>In <code>Python</code> an array is known a list:</p> <p>In the example array above, there are 9 elements. Each item makes up one element of the array. </p> <p>We start counting the elements from 0 (instead of 1). </p> <p>So element 0 in that array is 15, element 1 is 20, and element 7 is 19 and so on.</p> <p>Like variables, arrays have data types (a string array, an integer array, a Boolean array, etc.)</p> <p>When you see the term data structure, this refers to a variable or an array.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.3_Arrays/#accessing-elements-in-an-array","title":"Accessing Elements in an Array","text":"<p>If we want to use one of the elements in the array, we can refer to it by number.</p> <p>So, to get 18 from the list of scores (element 3), we would say:</p> <p><pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nfind_score = scores[3]\n</code></pre> We put the number of the element in square brackets. </p> <p>Remember that element numbers start at zero.</p> <p>It doesn\u2019t ,however, need to be a literal number in the square brackets. </p> <p>If we had a variable (this one is called counter), we could put that in the square brackets to get the <code>\u201ccounter-nth\u201d</code> element:</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\ncounter = 4\n\nprint(scores[counter])\n</code></pre> <p>The above program would output the <code>4th element</code>, <code>17</code></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.3_Arrays/#changing-the-values-in-array","title":"Changing the Values in Array","text":"<p>In addition, we can also change the data stored in each element, including with calculations:</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nscores[0] = 17\nscores[1] = 19\nscores[4] = scores[2]\nscores[5] = 5 * 3\nscores[6] = scores[2] + 1\n</code></pre> <p>The updated list would now look like this:</p> <pre><code>scores = [17, 19, 19, 18, 19, 15, 20, 19, 12]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.3_Arrays/#appending-to-an-array","title":"Appending to an Array","text":"<p>Python <code>append()</code> function enables us to add an element to the end of an array. </p> <p>You would use Python <code>append()</code> when you are adding to new items to the end of a list</p> <pre><code>scores = [15, 20, 19, 18, 17, 20, 16, 19, 12]\n\nscores.append(56)\n</code></pre> <p>The updated list would now look like this:</p> <pre><code>scores = [17, 19, 19, 18, 19, 15, 20, 19, 12, 56]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.4_Simple_Conditional_Statements/","title":"Simple Conditional Statements","text":"<p>Quick Links</p> <ul> <li>Selection Explanation</li> <li>If statements</li> <li>Else Statements</li> <li>Elif Statements</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.4_Simple_Conditional_Statements/#selection-explanation","title":"Selection Explanation","text":"<p>Programs have to make decisions.</p> <p>You have seen how these decisions can be represented on a flowchart (notice the diamond shapes with yes/no decisions).</p> <p>In National 5, you will often be asked to follow a design that has these decisions. You will implement the decisions in Python with if statements.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.4_Simple_Conditional_Statements/#if-statements","title":"If statements","text":"<p>Your programs will often react to something input by the user:</p> <p>The user is asked to enter a password. If they enter \u201chello123\u201d, access is granted.</p> <pre><code>    # Ask the user to enter a password\n    passwd = input(\"Please enter the password\")\n\n    # Is access granted?\n    if passwd == \u201chello123\u201d:\n        print(\"Access granted\")\n</code></pre> <p>The if statement always starts with the word if, followed by a condition. A condition checks that something is equal to, greater than or less than something else. In this case, it checks if passwd (what the user entered) is equal to the string \u201chello123\u201d.</p> <p>We use indentation for any code that we want to be inside the if statement (this means we tab it in). Notice that the print statement is tabbed in slightly from the left. This means that it only happens if the if statement above it is true. We could have multiple lines of code inside the if statement. The if statement always ends in a colon :</p> <p>** Note the use of the double-equals ==. We use two equals signs when checking for equality in an if statement. We can use the == signs for testing if any variable matches any other data. When our data is a number (whether it is an integer or a real number), we can see if it is less than or greater than another number **</p> Symbols Description <code>==</code> Equal to, e.g. 5 == 5, score == 12 or faveSubject == \"Computing\" <code>&lt;</code> Less than, e.g. 40 and 62 are both &lt; 99 <code>&gt;</code> Greater than, e.g. 50.4 and 85.1 are both &gt; 10.8 <code>&lt;=</code> Less than or equal to, e.g. 22 and 70 are both &lt;= 70 <code>&gt;=</code> Greater than or equal to, e.g. 100 and 105 are both &gt;= 100"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.4_Simple_Conditional_Statements/#else-statements","title":"Else Statements","text":"<p>Sometimes, we want the program to do something if data meets a condition, or otherwise, it is to do something else. This is called an else statement.</p> <p>A program could check that someone\u2019s age is greater than or equal to 17. If so, they are allowed to drive. </p> <p>If this is not so, they are not allowed to drive:</p> <p>Example</p> <pre><code>    # Ask the user for their age\n    age = int(input(\"Please enter your age\"))\n\n    # Old enough to drive?\n    if age &gt;= 17:\n        print(\"Broom broom\")\n    else:\n        print(\"Sorry, no drive yet\u201d)\n</code></pre> <p>In these examples, the program always does one thing, or the other. They are mutually exclusive. You cannot be both age &gt;= 17 and not &gt;= 17 at the same time, so only one branch of the decision is carried out.</p> <p>Note that, as before, the if and else statements end in a colon :</p> <p>The code that follows the if statement is indented (tabbed in). This means that it is only triggered if the if condition is true. The code after the else statement is indented. This means that the second print statement is only triggered if the condition is not true.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.4_Simple_Conditional_Statements/#elif-statements","title":"Elif Statements","text":"<p>Sometimes, information comes in multiple categories.</p> <p>We could ask for a test mark percentage. If the mark is greater than (or equal to) 70, the student gets an A. Otherwise, if their mark is greater than or equal to 60, they get a B. Otherwise (again), if their mark is greater than or equal to 50, they should get a C, and otherwise (finally) they receive no award.</p> <p>This could be represented on a flowchart:</p> <p>This is very efficient, because the program only needs to check for a B or C if the person did not get an A. If they did get enough marks for an A, the program never has to check those conditions.</p> <p>In Python, we create this with elif (short for else-if):</p> <p>Example</p> <pre><code>    # Ask for percentage mark\n    mark = int(input(\"Please enter percentage mark\"))\n\n    # Check which category mark goes in\n    if mark &gt;= 70:\n        grade = \u201cA\u201d\n    elif mark &gt;= 60:\n        grade = \u201cB\u201d\n    elif mark &gt;= 50:\n        grade = \u201cC\u201d\n    else:\n        grade = \u201cF\u201d\n\n    # Print the grade\n    print(grade)\n</code></pre> <p>Elif is followed by a new condition (e.g. \u201celse if mark is greater than or equal to 50\u2026\u201d)</p> <p>If the mark is not greater than or equal to 50, the only other option is the \u201celse\u201d branch, which sets grade to F.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.5_Complex_Conditional_Statements/","title":"Complex Conditional Statements","text":"<p>Quick Links</p> <ul> <li>AND, OR, NOT</li> <li>AND</li> <li>OR</li> <li>NOT</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.5_Complex_Conditional_Statements/#and-or-not","title":"AND, OR, NOT","text":"<p>Sometimes conditions can be more complicated. The logical operators and, or and not can be added to make complex conditions.</p> <p>Suppose we ask for a percentage, but it must be between 0 and 100. This could also be written as greater than or equal to 0, and less than or equal to 100.</p> <ul> <li>The number 53 meets this condition, because it is &gt;= 0, and it is &lt;= 100</li> <li>Although the number 110 is &gt;= 0, it is not &lt;= 100, so the condition is not true</li> <li>-273 is less than or equal to 100, but it is not &gt;= 0, so the condition is not true</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.5_Complex_Conditional_Statements/#and","title":"AND","text":"<p>Check if two conditions are both true</p> <p>Example</p> <pre><code>    if age &gt;= 17 and age &lt;= 100:\n        print(\u201cYou are between 17 and 100\u201d)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.5_Complex_Conditional_Statements/#or","title":"OR","text":"<p>Check if at least one (or both) of the conditions is true.</p> <p>Example</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n        print(\u201cIt is not nice weather today\u201d)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.5_Complex_Conditional_Statements/#not","title":"NOT","text":"<p>Check if a condition is not true.</p> <p>Example</p> <pre><code>    if not age &lt; 17\n        print(\u201cYou are not less than 17\u201d)\n        print(\u201cSo you must be at least 17 or over\u201d)\n</code></pre> \ud83d\udd11 Key Point Syntax Matters <p>You MUST always write the full condition out each time.</p> <p>You can\u2019t write:</p> <pre><code>    if weather == \u201crain\u201d or \u201ccloudy\u201d\n</code></pre> <p>You must write:</p> <pre><code>    if weather == \u201crain\u201d or weather == \u201ccloudy\u201d\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.6_Fixed_Loops_%28for%29/","title":"Fixed Loops (for)","text":"<p>So far, when ever we have wanted to output a word multiple times, we have always wrote a new print statement for each line.</p> <p>Example</p> <pre><code>    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n    print(\"Hello world\")\n</code></pre> <p>This is very inefficient.</p> <p>Suppose we wanted to change the message - we\u2019d have to go back and change every line individually, taking up time. </p> <p>To fix this we could instead, use a fixed loop.</p> <p>A fixed loop is a loop that repeats a certain (fixed) number of times. </p> <p>This example is exactly the same as the code above, but with much less code.</p> <p>Example</p> <pre><code>    for loop in range(1, 10):\n        print(\u201cHello world\u201d)\n</code></pre> <p>The word loop is a variable that we could use within our code. It is called the loop counter, because it counts how many times the loop has run so far. </p> <p>We could use any other variable name, say bananas:</p> <p>Example</p> <pre><code>    for bananas in range(0, 8):\n        print(bananas)\n</code></pre> <p>This (more complicated) example is a bitmore complicated as it asks the user to enter any number,ten times (0-9). </p> <p>Each time the loop repeats, it asks for another number, and adds it to its running total:</p> <p>Example</p> <pre><code>    # Example with a running total\n    total = 0\n\n    for loop in range(0, 10):\n        number = int(input(\"Please enter a number\"))\n        total = total + number\n\n    # Show total once the loop is done\n    print(total)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.7_Conditional_Loops_%28while%29/","title":"Conditional Loops (while)","text":"<p>A conditional loop (in Python, a while loop) repeats only while a condition is true. </p> <p>A conditional loop is like a combination of a fixed loop and an if statement and you can use all of the same conditions in a while loop that you would in an if statement.</p> <ul> <li> <p>In this example, the user is asked to enter a number. </p> </li> <li> <p>If the number is more than 100, part of the program repeats, asking them to enter the number again. </p> </li> <li> <p>It only repeats while their input is more than 100. Once that condition is met, the loop stops repeating and the program continues:</p> </li> </ul> <p>Example</p> <pre><code>    # Initialise the variable\n    mynumber = 0\n\n    # Ask the user to enter a number\n    mynumber = int(input(\"Please enter a number\"))\n\n    # Example of a while loop\n    while mynumber &gt; 100:\n        print(\"That number is too big!\")\n        mynumber = int(input(\"Please enter a number\"))\n</code></pre> <p>Warning - Don\u2019t get stuck in an infinite loop!</p> <p>Make sure that your condition will always end.</p> <p>For example, this loop would never end as 100 is always more than 5, so the loop will continue running indefinitely.</p> <pre><code>    while 100 &gt; 5:\n        print(\"One hundred is still more than five\")\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.8_Pre_Defined_Functions/","title":"Pre-Defined Functions","text":"<p>Quick Links</p> <ul> <li>Random</li> <li>Length</li> <li>Round</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.8_Pre_Defined_Functions/#random","title":"Random","text":"<p>Something that is random is open to chance - like rolling dice, or tossing a coin.</p> <p>Before we use a random number, we have to put this line at the top of the program:</p> <p>Example</p> <pre><code>    # This program is going to use random numbers\n    import random\n</code></pre> <p>Random will always returns an integer (a whole number) and will only generate a random number that is between two parameters:</p> <p>Example</p> <pre><code>    # Generate a random number from 1 to 6\n    dice = random.randint(1, 6)\n</code></pre> <p>The code above will generate a number that could be either 1, 2, 3, 4, 5 or 6.</p> <p>Complete example:</p> <p>The Random Number Game</p> <pre><code>    # Add the random module\n    import random\n\n    # Ask the user to enter a number\n    guess = int(input(\"What is your guess?\"))\n\n    target = random.randint(1, 10)\n\n    if guess == target:\n        print(\"Well done, you guessed correctly.\")\n    else:\n        print(\"Sorry, you guessed wrongly\")\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.8_Pre_Defined_Functions/#length","title":"Length","text":"<p>The length function, shortened to len() returns the length - the number of characters - in a string.</p> <p>For example, len(\u201chello\u201d) is 5, and len(\u201cabc\u201d) is 3:</p> <p>This example calculates the length of a word, stores it in a variable called \u201chow_long\u201d, and displays it on the screen.</p> <p>Example</p> <pre><code>    # Stores and displays how many characters are in the word \u201chello\u201d\n    how_long = len(\"hello\")\n\n    print(how_long)\n</code></pre> <p>You could also use len() to ask the user to enter a password, and tell them whether their password is long enough:</p> <p>Example</p> <pre><code>    # Ask the user to enter their password\n    passwd = input(\"Please enter your password\")\n\n    # The password must be at least 6 characters long\n    if len(passwd) &gt; 6:\n        print(\"Your password is long enough\")\n    else:\n        print(\"Your password is NOT long enough\")\n</code></pre> <p>This problem could be refined further by using a loop and asking the user to keep entering their password until it is valid.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.8_Pre_Defined_Functions/#round","title":"Round","text":"<p>Using a round function, we can round a real number either:</p> <ul> <li> <p>To the nearest whole number</p> </li> <li> <p>To a certain number of decimal places.</p> </li> </ul> <p>To round to the nearest whole number (integer):</p> <p>This code would display the number 3.</p> <pre><code>    num1 = round(3.14159265)\n\n    print(num1)\n</code></pre> <p>To round to 2 decimal places:</p> <p>This code would print 3.14.</p> <pre><code>    num2 = round(3.14159265, 2)\n\n    print(num2)\n</code></pre> <p>We could round to any number of decimal places by adding it as a parameter in brackets:</p> <p>This code would round to 5 decimal places (3.14159).</p> <pre><code>    num3 = round(3.14159265, 5)\n\n    print(num3)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.9_Traversing_a_1d_Array/","title":"Traversing an Array","text":"<p>We know that arrays are used for storing a list of data.</p> <p>The key benfit of arrays is that they reduce repetition. For example:</p> Without an Array<pre><code>var_1 = 1\nvar_2 = 2\nvar_3 = 3\nvar_4 = 4\nvar_5 = 5\n</code></pre> With an Array<pre><code>var_numbers = [1,2,3,4,5]\n</code></pre> <p>We also know that loops are used to reduce repetition in our lines of code. For example: </p> <p>We can use a loop to traverse the array - that means, to travel through it, or loop through it.</p> <p>Traversing an array is one of the standard algorithms.</p> <p>Without a Loop<pre><code>print (1)\nprint (2)\nprint (3)\nprint (4)\nprint (5)\n</code></pre> With a Loop<pre><code>for i in range(1,6):\n    print (i)\n</code></pre></p> <p>The Steps to This Algorithm are:</p> <pre><code>1.0 - Start a for loop, for the number of elements in the array\n        2.0 - Use the array element[counter]\n3.0 - End for loop\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L5/5.9_Traversing_a_1d_Array/#using-a-loop-to-traverse-an-array","title":"Using a Loop to Traverse an Array","text":"<p>In programming we use loops to traverse the elements of an array. </p> <p>Example: </p> <p>The Snow White Program</p> CodeExplanation <pre><code>names = [\u201cDopey\u201d, \u201cGrumpy\u201d, \u201cDoc\u201d, \u201cBashful\u201d, \u201cSneezy\u201d, \u201cSleepy\u201d, \u201cHappy\u201d]\n\nfor counter in range(0, 7):\n    print(names[counter])\n</code></pre> <p><code>Line 1</code></p> <p>Initialise the names list to hold 7 names.</p> <p><code>Line 2</code></p> <p>Start a loop that from 0 to 6 and print the name</p> <p><code>Line 4</code></p> <p>On each <code>iteration of the loop</code> output the data that is held within that element of the array.</p> <p>Remember</p> <p>Remember that the word counter is just a variable name. </p> <p>It could be anything:</p> <pre><code>names = [\u201cDopey\u201d, \u201cGrumpy\u201d, \u201cDoc\u201d, \u201cBashful\u201d, \u201cSneezy\u201d, \u201cSleepy\u201d, \u201cHappy\u201d]\n\nfor bannanas in range(0, 7):\n    print(names[bannanas])\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index%20copy/","title":"Software Implementation","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index%20copy/#data-types-and-structures","title":"Data Types and Structures","text":"<ul> <li> <p> Parallel 1D Arrays</p> <p> Parallel 1D Array Notes</p> </li> <li> <p> Records</p> <p> Go to Records Notes</p> </li> <li> <p> Arrays of Records</p> <p> Go to Array of Records Notes</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index%20copy/#computational-constructs","title":"Computational Constructs","text":"<ul> <li> <p> Parameter Passing</p> <p> Parameter Passing Notes</p> </li> <li> <p> Scope of Variables</p> <p> Scope of Variables Notes</p> </li> <li> <p> Procedures</p> <p> Procedures Notes</p> </li> <li> <p> Functions</p> <p> Functions Notes</p> </li> <li> <p> Pre-defined Functions</p> <p> Pre-defined Functions Notes</p> </li> <li> <p> File Handling (CSV)</p> <p> Go to Array of Records Notes</p> </li> <li> <p> File Handling (.txt)</p> <p> Go to Array of Records Notes</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index%20copy/#algorithm-specification","title":"Algorithm Specification","text":"<p> Algorithms(Linear Search)</p> <p> Algorithms(Finding Min and Max)</p> <p> Algorithms(Count Occurances)</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index/","title":"Software Implementation","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index/#data-types-and-structures","title":"Data Types and Structures","text":"<p> Parallel 1D Array</p> <p> Go to Records</p> <p> Go to Array of Records</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index/#computational-constructs","title":"Computational Constructs","text":"<p> Predefined Functions</p> <p> Parameter Passing</p> <p> Scope of Variables</p> <p> Procedures</p> <p> Functions</p> <p> File Handling (.txt)</p> <p> File Handling (.csv)</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index/#algorithm-specification","title":"Algorithm Specification","text":"<p> Algorithms(Linear Search)</p> <p> Algorithms(Finding Min and Max)</p> <p> Algorithms(Count Occurances)</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.0_index12/","title":"Software Implementation","text":"<p>Lesson One - Pre Defined Functions</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p> Pre-defined Functions Notes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.10_File_Handling%28.txt%29/","title":"Working with Files","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.10_File_Handling%28.txt%29/#explanation","title":"Explanation","text":"<p>In this lesson, we will learn about file handling, which allows our programs to manage large amounts of data efficiently, similar to how real-world systems work.</p> <p>While it\u2019s useful to create lists, make changes, and add new data, if your program resets every time it runs and your changes are lost, it\u2019s not very practical. That\u2019s why it\u2019s sometimes necessary to save data outside the program, so it can be stored and any changes you make are saved.</p> <p>In real-world systems that handle huge amounts of data, such as millions of inputs, this data is usually provided to the program through a file. </p> <p>File handling is often called sequential file processing because the program reads the data in the same order it appears in the file, and writes it back in a similar sequence. This ensures that data is saved and retrieved in an organized and efficient way.</p> <p>The easiest way to start learning about saving and loading data is by using a text file. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.10_File_Handling%28.txt%29/#read-write-append-a-whole-file","title":"Read, Write, Append (A Whole File)","text":"Write Mode \"w\" (write Mode) creates a new file and writes to that file. If the file already exists, a new file will be created, overwriting the existing file. Before using a file in a program, it must first be opened. To do this you must first link the file to an object by assigning it a reference name: <pre><code>    # Open the School-Reg file in 'read mode'. \n    file = open(\"School-Reg.txt\", \"w\")\n\n\n    file.write(\"Name: Peter, Age: 17, Reg: R1 \\n\")\n    file.write(\"Name: Laura, Age: 17, Reg: R1 \\n\")\n\n    # Close files once the program has finished using it.\n    file.close()\n</code></pre> <p>Task</p> <p>1 - Create a new file in VS Code called <code>Write-Read-Append.py</code></p> <p>2 - Copy the above code into your new file and <code>run</code> the program.</p> Read Mode \"r\" (Read Mode) opens for reading and will not allow you to make changes. Use the <code>open()</code> function to open the file in 'read mode'. This is done by passing the filename and the mode <code>'r'</code> to the function. <pre><code>    # Open the School-Reg file in 'read mode'. \n    file = open(\"School-Reg.txt\", \"r\")\n\n    # Display the entire file.\n    print(file.read())\n\n    # Close files once the program has finished using it.\n    file.close()\n</code></pre> <p>Task</p> <p>1 - Add the code above to the bottom of your <code>Write-Read-Append.py</code> file and run the program.</p> Append Mode \"a\" (Append Mode) used to add new data to the end of the file. Use the <code>append()</code> function to open the file in 'append mode'. This is done by passing the filename and the mode <code>'a'</code> to the function. Append will add a new entry to your .txt file at the end of the file <pre><code>    # Open the School-Reg file in 'append mode'\n    file = open(\"School-Reg.txt\", \"a\")\n\n    # Add another line to the file\n    file.write(\"Name: Karl, Age: 16, Reg: R1 \\n\")\n\n    # Close file once the program has finished using it. \n    # Note: if the file.close() line is not included, the changes will not be saved to the txt file.\n    file.close()\n</code></pre> <p>Task</p> <p>1 - Add the code above to the bottom of your <code>Write-Read-Append.py</code> file and run the program.</p> Task - Find the Highest Score A small gaming competition records each player\u2019s score in a text file called scores.txt. The organiser wants a program that reads in all the scores and finds the highest score achieved. The program should then display this result clearly to the screen so that the winner can be announced."},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.10_File_Handling%28.txt%29/#pseudocode","title":"Pseudocode","text":"Top Level Design <p>1 - Read scores from a text file. </p> <p>OUT: score1, score2, score3</p> <p>2 - Find the highest score. </p> <p>IN: score1, score2, score3</p> <p>OUT: highestScore</p> <p>3 - Display the highest score.</p> <p>IN: highestScore</p> Refinements <p>1.1  open file \"scores.txt\" for reading</p> <p>1.2  read score1 from file</p> <p>1.3  read score2 from file</p> <p>1.4  read score3 from file</p> <p>1.5  close file</p> 2.1  if score1 &gt; score2 and score1 &gt; score3 then 2.2      highest = score1 2.3  else if score2 &gt; score1 and score2 &gt; score3 then 2.4      highest = score2 2.5  else 2.6      highest = score3 2.7  end if 3.1  display \"The highest score is\", highest <p>Resources</p> Starter Code <pre><code>def read_Scores():\n\n\ndef find_highest():\n\n\ndef show_highest():\n</code></pre> txt File <pre><code>55\n72\n64\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.10_File_Handling%28.txt%29/#read-a-file-line-by-line","title":"Read a File Line by Line","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/","title":"Linear Searching","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/#explanation","title":"Explanation","text":"<p>You learned three standard algorithms for National 5:</p> <ul> <li>Input validation</li> <li>Running total in a loop</li> <li>Traversing an array (simply, looping through each item in the array, one at a time)</li> </ul> <p>For Higher, we add three more standard algorithms:</p> <ul> <li>Linear search</li> <li>Count occurrences</li> <li>Find minimum/maximum</li> </ul> <p>All of the above require you to be able to traverse an array.</p> <p>For each algorithm, you must be able to:</p> <ul> <li>Write it in pseudocode</li> <li>Write a memorised example in program code, then:</li> <li>Write it in the context of a question you\u2019re given, in the exam or assignment</li> </ul> <p>The first step is to learn/memorise the algorithms; then, you can apply them to unfamiliar contexts.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/#linear-search","title":"Linear Search","text":"<p>A linear search is used with one or more arrays of items. We traverse (loop through) the array, looking for a particular value. </p> <p>If one of the items in the array matches the search value, we do something. There are two variations of the algorithm: one simply records if something is found; the other records where in the list it is found. </p> <p>It should be clear from a question which one you\u2019re expected to use.</p> <p>The example below asks for a target (search term the user is looking for). </p> <ul> <li>It loops through 10 names. </li> <li>If each name matches the target, it switches the \u2018found\u2019 variable to true. </li> <li>At the end of the program, we could know if the name was in the list by checking the value of the found variable.</li> </ul> Algorithm ExampleSQA-style Marking Scheme for a Linear Search (4 marks) <pre><code>Set found to false\n\nInput target\n\nFor counter from 0 to 9\n\n        If names(counter) == target then\n\n        Set found to true\n\n    End if\n\nEnd for loop\n</code></pre> <ul> <li> <p>Initialise the variable (1 mark)</p> </li> <li> <p>Loop through the elements of the array (1 mark)</p> </li> <li> <p>Check if the element matches target (1 mark)</p> </li> <li> <p>Set variable to true (1 mark)</p> </li> </ul> <p>The final mark in the example (setting the variable to true) might be replaced with something else, depending on the question. </p> <p>For example, you might be asked to find the position of the element.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/#example-1-using-found","title":"Example 1 - Using Found","text":"PythonExplanation <pre><code>    # An array of seven names\n    names = [\"Dopey\", \"Grumpy\", \"Doc\", \"Bashful\", \"Sneezy\", \"Sleepy\", \"Happy\"]\n\n    target = input(\"Enter a name to look for\")\n    found = False\n\n    # Loop through each item\n    for counter in range(0,7):\n      # Check each item against the target\n      if names[counter] == target:\n        found = True\n\n    # Is the target in the list?\n    print(\"Item was found:\", found)\n</code></pre> <p>This program contains a list of names. It asks the user to enter a search target. Then it searches the list of names to see if any of them match the target. </p> <p>If they do, it confirms that the target was found.</p> <p>At the end of the program, the console should show a message confirming whether the target was in the list.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/#example-2-using-posistion","title":"Example 2 - Using Posistion","text":"PythonExplanation <pre><code>    # An array of seven names\n    names = [\"Dopey\", \"Grumpy\", \"Doc\", \"Bashful\", \"Sneezy\", \"Sleepy\", \"Happy\"]\n\n    target = input(\"Enter a name to look for\")\n    position = -1\n\n    # Loop through each item\n    for counter in range(0,7):\n      # Check each item against the target\n      if names[counter] == target:\n        position = counter\n\n    # Is the target in the list?\n    print(\"Item was found at position:\", position)\n</code></pre> <p>Sometimes, we want to know the position of an element in the array - for instance, the target was found at position 5. This example uses the same basic program as the one above, but instead of reporting whether the name is found, it reports its position.</p> <p>We set the starting position to -1. This is because it isn\u2019t possible to be at position -1 in the array. That way, we know that anything other than -1 must mean the item was found, so the position was changed.</p> <p>If, at the end of the program, the value of position was still -1, we would know that the target hadn\u2019t been found.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.11_Algorithms_%28Linear_Search%29/#example-3-using-posistion-with-parallel-arrays","title":"Example 3 - Using Posistion with Parallel Arrays","text":"PythonExplanation <pre><code># An array of pupil names, and a *parallel* array of marks\npupils = [\"Bob\", \"Bart\", \"Krusty\", \"Mel\", \"Lisa\"]\nmarks = [10, 2, 1, 8, 9]\n\n# Ask for a person's name, and print their mark\ntarget_name = input(\"Please enter a name:\")\nposition = -1\n\n# Loop through names\nfor counter in range(0, 5):\n  if pupils[counter] == target_name:\n    position = counter\n\n# If we found their name at [position], their mark must also be there\ntheir_mark = marks[position]\n</code></pre> <p>This program has two arrays: one of pupil names, and one of marks. </p> <p>Both arrays have the same number of elements. </p> <p>Looking at a name, we can find their mark by going to the corresponding element in the marks array (so the third name corresponds to the third mark). </p> <p>The program asks for a target name. </p> <p>It loops through the first array, and finds the position where that name is in the list. Later, we can find the corresponding mark, because if the name was found at pupils[position], their mark must be stored at marks[position].</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.12_Algorithms_%28Finding_Min_and_Max%29/","title":"Finding Minimum and Maximum","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.12_Algorithms_%28Finding_Min_and_Max%29/#explanation","title":"Explanation","text":"<p>The find minimum (find-min) and find maximum (find-max) algorithms are very similar, only differing in whether they use the &lt; or &gt; sign. </p> <p>These algorithms would only work on arrays of integers or real numbers (you can\u2019t find the \u201cmaximum name\u201d from an array of strings).</p> <p>For example, below is an array of 10 integers:</p> <p>To find the maximum (highest) value, we would look through the list one-by-one:</p> <ul> <li> <p>The first value is 33. We don\u2019t yet know any other values, so 33 must be the highest we\u2019ve found.</p> </li> <li> <p>The next value is 12. That is less than 33, so we ignore it (it isn\u2019t higher).</p> </li> <li> <p>The next value is 46. This is higher than 33 (the highest we\u2019ve found so far), so becomes the new highest.</p> </li> <li> <p>The next value is 18. This is lower than 46 (the current highest found), so we ignore it\u2026</p> </li> </ul> <p>On that basis, we would find that 49 (element 6) is the highest value in the array.</p> Find Maximum AlgorithmFind Minimum Algorithm <pre><code>Declare a maximum variable, and set it to the first item in the array (e.g. 33)\n\nLoop for each element in the array\n\n    If number(counter) &gt; maximum\n\n        Set maximum to number(counter)\n\n    End if\n\nEnd for loop\n</code></pre> <pre><code>Declare a minimum variable, and set it to the first item in the array (e.g. 33)\n\nLoop for each element in the array\n\n    If number(counter) &lt; maximum\n\n        Set minimum to number(counter)\n\n    End if\n\nEnd for loop\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.13_Algorithms_%28Count_Occurances%29/","title":"Count Occurrences","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.13_Algorithms_%28Count_Occurances%29/#explanation","title":"Explanation","text":"<p>Count occurrences are very similar to linear search:</p> <ul> <li> <p>The user enters a target/search-term.</p> </li> <li> <p>The algorithm then searches the array. </p> </li> <li> <p>If the target is found, instead of recording position, it adds +1 to a total/counter. </p> </li> </ul> <p>By doing this, it counts how often a particular condition is met.</p> <p>It could also be used to check for an exact match - for example, in a list of names, how many people are called Bob?</p> <p>However, we could also use it with other conditions:</p> <ul> <li> <p>In a list of percentages, how many are above 75%?</p> </li> <li> <p>In a list of integers, how many are even?</p> </li> <li> <p>In a list of letters, how many are upper-case?</p> </li> </ul> <p>Important</p> <ul> <li> <p>Do not confuse counting occurrences with keeping a running total: one counts how many of something there are, the other adds them all together.  </p> </li> <li> <p>There might be times when you are asked to do both on the same question.</p> </li> <li> <p>Do not confuse \u2018count\u2019 or \u2018counter\u2019 with the loop counter. </p> </li> <li> <p>Your loop counter (e.g. for counter in range...) might use a similar name, e.g. you call one count and the other counter. </p> </li> <li> <p>You could call your loop counter something like \u201cfor index in range(0,9)\u201d  to make sure you don\u2019t get confused.</p> </li> </ul> <p>The example below  asks the user to enter a target. It loops through a list of ten names. It checks if each element matches the target. If so, it adds 1 to the count. At the end, it displays how many were found.</p> Algorithm ExampleSQA-style Marking Scheme for a Linear Search (4 marks) <pre><code>   Set count to 0\n\n   Input target\n\n   For index from 0 to 9\n\n    If names(index) == target then\n\n        Set count to count + 1\n\n    End if\n\n   End for loop\n\n   Display count\n</code></pre> <ul> <li> <p>Initialise the count variable  (1 mark)</p> </li> <li> <p>Loop through the elements of the array (1 mark)</p> </li> <li> <p>Check if the element matches target (1 mark)</p> </li> <li> <p>Add 1 to the count variable (1 mark)</p> </li> </ul> <p>The final mark in the example (setting the variable to true) might be replaced with something else, depending on the question. </p> <p>For example, you might be asked to find the position of the element.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.13_Algorithms_%28Count_Occurances%29/#example-1-using-sign","title":"Example 1 - Using == Sign","text":"PythonExplanation <pre><code>    # A list of cars spotted on a road, recorded by make\n    cars = [\"Ford\", \"Ford\", \"Toyota\", \"Volkswagen\", \"Kia\", \"Nissan\", \"Honda\"]\n\n    # Ask the user to enter a target\n    make = input(\"Please enter a make:\")\n    count = 0\n\n    for index in range(0, 7):\n      if cars[index] == make:\n        count = count + 1\n\n    # Display how many\n    print(\"There were\", count, \"matching cars\")\n</code></pre> <p>This program contains data for cars spotted going down a road at a particular time. </p> <p>The programmer wants to be able to find how many Fords, Nissans or Hondas were recorded.</p> <p>The user enters a make.</p> <p>The program then searches through the list of cars, and if the make matches, it adds 1 to the counter.</p> <p>At the end of the program, it shows how many of that make were found.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.13_Algorithms_%28Count_Occurances%29/#example-2-using-sign","title":"Example 2 - Using &gt;= Sign","text":"PythonExplanation <pre><code>    # A list of percentages\n    percentages = [99.7, 100.0, 52.6, 13.9, 15.2, 88.1, 64.7, 22.5, 71.8]\n\n    # How many are at least 50%?\n    target = 50.0\n    count = 0\n\n    for index in range(0, 9):\n      if percentages[index] &gt;= target:\n        count = count + 1\n\n    # Show results\n    print(\"There were\", count, \"values of 50% or more\")\n</code></pre> <p>This program contains data for cars spotted going down a road at a particular time. </p> <p>The program sets a target of 50.0, and counts how many of the percentages are greater than or equal to the target.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.13_Algorithms_%28Count_Occurances%29/#example-3-odd-or-even","title":"Example 3 - Odd or Even","text":"PythonExplanation <pre><code>    # A list of integers\n    numbers = [99, 44, 55, 12, 19, 72, 60, 54, 13, 18, 2, 75]\n\n    # Are these odd or even?\n    odd_count = 0\n    even_count = 0\n\n    for index in range(0, 12):\n      if (numbers[index] % 2) == 0:\n        even_count = even_count + 1\n      else:\n        odd_count = odd_count + 1\n\n    print(\"There were\", even_count, \"even numbers\")\n    print(\"and\", odd_count, \"odd numbers in the list\")\n</code></pre> <p>This program has a list of numbers, and counts how many are odd and how many are even, using two counters:</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.1_Parallel_1D_Arrays/","title":"Parrllel 1D Arrays","text":"<p>What you need to Know</p> <p>You must be able to describe, exemplify and implement parallel 1D arrays.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.1_Parallel_1D_Arrays/#explanation","title":"Explanation","text":"<p>You already know that an array is a list of related values, called elements, that can be referred to by number, e.g. temperature[0], temperature[5] etc. </p> <p>This example below now adds a second array that records the date on which the temperature was taken.</p> <p>We can look up the temperature on the 8th of June, by looking for that date, and reading the corresponding temperature (14\u00b0). </p> <p>These are parallel arrays, because we can look up corresponding values, like a table.</p> <p>In this example, pupil marks are stored in one array, and pupil names are stored in another. </p> <p>We can see that Jack scored 23, and Lucy scored 24, by looking at the two arrays side-by-side, as if they were a table.</p> <p>There is no special syntax or different way to write these.</p> <p>We just declare two arrays.</p> <p>Example</p> <pre><code>          # Two *parallel* arrays of pupil names and marks\n          pupil_name = [\"Peter\", \"Laura\", \"Marie\"]\n          pupil_mark = [20, 21, 23]\n\n          # If we want to find the name and mark of the third pupil in the list, we would say:\n          print(pupil_name[2])\n          print(pupil_mark[2])\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.1_Parallel_1D_Arrays/#working-with-files","title":"Working with Files","text":"<p>This example is based on the Schools-Reg.csv file from earlier</p> <p>We would implement this program with three parallel arrays - one for name, age and reg group.</p> <p>This program reads the Schools.csv file, and produces an array of lines - each line of the file. </p> <p>We then split each line into parts (comma separated values), e.g.:</p> <p>Example</p> <pre><code>    import csv\n\n    # Open the file for reading\n    file = open(\"School-Reg.csv\", \"r\")\n\n    # Assign Parallel arrays for school reg data\n    name = [str] * 3\n    age = [int] * 3\n    regGroup = [str] * 3\n\n    # Loop through the array of lines\n    for line in range(0, 3):\n        data = file.readline()\n        # Strip characters that are not required\n        data = data.strip(\"\\n\")\n        # Split the data on the comma\n        data = data.split(\",\")\n\n       # Store the 'data' in the parallel arrays\n        name[line] = data[0]\n        age[line] = data[1]\n        regGroup[line] = data[2]\n\n    # Display the arrays\n    for i in range (0,3):\n      print(\"Name: \" + name[i] + \" Age: \" + str(age[i]) + \" Reg: \" + regGroup[i])\n\n    # Close the file\n    file.close()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/","title":"Working with Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#explanation","title":"Explanation","text":"<p>So far, we\u2019ve used only one type of data structure to store multiple values: the array. </p> <p>Remember, an array is like a list of related variables that all share the same data type. For example, an array could store a list of numbers or a list of names, but not both.</p> <p>While arrays can only hold one type of data, records allow us to store different types of data together in a single structure. For example, one record can store a name (string), an age (integer), and a status (Boolean) all in one place.</p> <p>Just like in a database, records help us organize related information more efficiently.</p> <p>By using records, we can keep all related data about a single person or object together in one structure, and we can use real-world names for each category (called fields) to make the data easier to understand and manage. </p> <p>This is especially useful because most systems we work with, like databases, organize data in this way.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#record-structures","title":"Record Structures","text":"<p>A record structure is like creating your own custom data type. </p> <p>As a programmer, you define a record with a name that represents something real, like \"Student\" or \"Product\" and specify different categories (fields) for storing information. </p> <p>Each field has a name and a specific data type (e.g., string, integer, Boolean), so the program knows how to store and handle each piece of data. </p> <p>This way, when the program creates actual records, it knows exactly what kind of information to expect in each field.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#creating-a-single-record-structure","title":"Creating a Single Record Structure","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#part-one","title":"Part One","text":"PythonExplanation <pre><code>from dataclasses import dataclass\n\n@dataclass\n</code></pre> <p>Line 1 - from dataclasses import Dataclass This line is like getting a special helper from a toolbox. It brings in something called dataclass, which makes it easier to create a class that stores information.</p> <p>Line 3 - @dataclass This is a special tag that tells Python, \"I want to make the next class a dataclass.\" This means Python will automatically help us with things like creating the class and keeping track of data inside it.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n</code></pre> <p>Line 5 - class SchoolReg Here, we are creating a class called SchoolReg. A class is like a blueprint or recipe. In this case, it helps us create something to store information about a school registration, like a student's name, age, and registration number.</p> <p>Line 6 - Name: str = \"\" Inside the class, we create a variable called Name. This will hold the student's name, and it's a string, which means it's a word or group of letters (like \"Peter\"). The empty quotes \" \" mean that we are starting with no name yet.</p> <p>Line 7 - Age: int = 0 This is another variable called Age. It will hold the student's age, and it's an integer (which means a whole number like 17). Right now, we start it at 0.</p> <p>Line 8 - Reg: str = \"\" This variable is called Reg, which stands for \"registration number.\" It\u2019s also a string (a group of letters or numbers). At first, it's an empty string \"\", but we will fill it in later.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n</code></pre> <p>Line 10 -  pupilRecord = SchoolReg() Now we create an object called pupilRecord from the SchoolReg class. Think of the class as a cookie cutter, and this object is a cookie made from it. This object will store a student's name, age, and registration number.</p> <p>Line 11 - pupilRecord.Name = \"Peter\" Here, we set the Name of the pupilRecord object to \"Peter\". Before it was empty (\"\"), but now it's filled with the name \"Peter\".</p> <p>Line 12 - pupilRecord.Age = 17 Next, we set the Age for pupilRecord to 17. Before, it was 0, but now we know Peter is 17 years old.</p> <p>__Line 13 - pupilRecord.Reg = \"r1\"_ Here, we set the registration number (Reg) to \"r1\". Now, the student Peter has a registration number \"r1\".</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.2_Records/#part-four","title":"Part Four","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n\n    print (pupilRecord.Name) \n    print (pupilRecord.Age) \n    print (pupilRecord.Reg) \n</code></pre> <p>Line 15 - print(pupilRecord.Name) This line tells the computer to print (show) the name of the student, which is \"Peter\". The computer will display \"Peter\" on the screen.</p> <p>Line 16 - print(pupilRecord.Age) This prints the student's age, which is 17. The computer will show 17 on the screen.</p> <p>Line 17 - print(pupilRecord.Reg) Finally, this prints the student's registration number, which is \"r1\". The computer will show \"r1\".</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/","title":"Working with Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#explanation","title":"Explanation","text":"<p>In Python, an array of records is like a list of boxes, where each box holds important information about a person, place, or thing. </p> <p>Each \"box\" (record) has labelled parts for details, like a name, age, or ID number. </p> <p>For example, if we have three students, we can store their name, age, and registration number in three separate boxes.</p> <p>These boxes are part of a record, and we can easily look inside each one to see or change the details. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#array-of-records-in-python-basic-method","title":"Array of Records in Python (basic method)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-one","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    # Create a class\n    class SchoolReg:\n        # Create variables to hold the pupil data\n        Name : str = \"\" \n        Age : int = 0\n        Reg : str = \"\"\n\n    # Create an empty list called pupilRecord to store 3 student records\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    # Add the first pupils data\n    for x in range(len(pupilRecord)):\n\n        pupilRecord[x].Name = str(input(\"Enter Name: \"))\n        pupilRecord[x].Age = int(input(\"Enter Age: \"))\n        pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    # Print the pupil data\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 10 - pupilRecord = [SchoolReg() for x in range(0,3)] This line creates a list called pupilRecord. A list is like a box where we can store many things. In this case, we are creating two empty student records because the range (0,3) means it will create three spots, one for pupilRecord[0], one for pupilRecord[1] and one for pupilRecord[2].</p> <p>In short, this line says:</p> <p>\"Make 3 empty student records using the SchoolReg class.\"</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n</code></pre> <p>Line 12 - pupilRecord[0].Name = \"Peter\" Here, we set the Name of the first student (pupilRecord[0]) to \"Peter\". Before, it was empty, but now it holds the name \"Peter.\"</p> <p>Line 13 - pupilRecord[0].Age = 17 Next, we set the Age of the first student (pupilRecord[0]) to 17. Before it was 0, and now it\u2019s set to 17 years old.</p> <p>Line 14 - pupilRecord[0].Reg = \"r1\" Here, we set the registration number (Reg) for the first student to \"r1\". Now Peter has the registration number \"r1\".</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n\n    print (pupilRecord[0].Name) \n    print (pupilRecord[0].Age) \n    print (pupilRecord[0].Reg) \n</code></pre> <p>Line 16 - print(pupilRecord[0].Name) This line tells the computer to print the name of the first student in the list, which is Peter.</p> <p>Line 17 - print(pupilRecord[0].Age) This prints the age of the first student in the list, which is 17. </p> <p>Line 18 - print(pupilRecord[0].Reg) Finally, this prints the registration number of the first student, which is \"r1\".</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#array-of-records-efficient-method","title":"Array of Records (efficient method)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-one_1","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 12 - for x in range(len(pupilRecord)): The range(len(pupilRecord)) makes the loop go through each student one at a time (three students in this case).</p> <p>Line 13 - pupilRecord[x].Name = str(input(\"Enter Name: \")) This line asks the user to type a name for each student using the input() function. Whatever the user types in is stored in the Name variable for each student in the list. For example, the first time the loop runs, it asks for the name of pupilRecord[0].</p> <p>Line 14 - pupilRecord[x].Age = int(input(\"Enter Age: \")) This line asks the user to type the student's age. The input() function is used again, and the number typed is stored as the student's age. It\u2019s converted into an integer (whole number). For example, the first time, it will store the age for pupilRecord[0].</p> <p>Line 15 - pupilRecord[x].Reg = str(input(\"Enter Reg: \")) This line asks the user to type the student's registration number. The registration number is stored as a string (letters and numbers) for each student. For example, the first time, it stores the registration number for pupilRecord[0].</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-two_1","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Line 17 - pupilRecord = [SchoolReg() for x in range(0,3)] This is another loop that goes through each student record in the pupilRecord list only this time it\u2019s going to print the details of every student one at a time.</p> <p>Line 18 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the name, age, and registration number for each student in the list.</p> <p>Example</p> <pre><code>    Name: Peter Age: 17 Reg: r1\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#array-of-records-with-files","title":"Array of Records (with Files)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-one_2","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n</code></pre> <p>Info</p> <p>Lines 1 - 10 are covered in Working with Records.</p> <p>Line 12 - file = open(\"School-Reg.csv\", \"r\") This line opens a file called \"School-Reg.csv\" in read mode so that we can read from it.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-two_2","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n</code></pre> <p>Line 14 A loop that will go through each of the three student records in the pupilRecord list one by one.</p> <p>Line 15 - data = file.readline() This line reads one line of data from the file. Each time the loop runs, it reads the next line from the file.</p> <p>Line 16 - data = data.strip(\"\\n\") This removes the newline character (\\n), which is an invisible character at the end of each line in a file. It's like cleaning up the data so there are no extra spaces or jumps to the next line.</p> <p>Line 17 - data = data.split(\",\") This splits the line of data at each comma. Since it's a CSV file, the data for each student is separated by commas. After splitting, we get a list of pieces of information, like the student's name, age, and registration number.</p> <p>For example, if the line was \"Peter,17,r1\", after splitting it, we would get:</p> <pre><code>``` text\n    data[0] = \"Peter\"\n    data[1] = \"17\"\n    data[2] = \"r1\"\n```\n</code></pre> <p>Line 19 - pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2]) This line takes the pieces of data from the file and creates a SchoolReg object for each student. It fills in the student's name (data[0]), age (data[1]), and registration number (data[2]). The int() function converts the age from a string to a number.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records%20copy/#part-three_1","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n    import CSV\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n\n    file.close()\n</code></pre> <p>Line 21 - for x in range(len(pupilRecord)): This is another loop. This time, it goes through each student's record in the list and prints out their information.</p> <p>Line 22 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the student's name, age, and registration number. </p> <p>Line 23 - file.close() This line closes the file after we are finished reading from it.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records/","title":"Working with Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records/#explanation","title":"Explanation","text":"<p>So far, we\u2019ve used only one type of data structure to store multiple values: the array. </p> <p>Remember, an array is like a list of related variables that all share the same data type. For example, an array could store a list of numbers or a list of names, but not both.</p> <p>While arrays can only hold one type of data, records allow us to store different types of data together in a single structure. For example, one record can store a name (string), an age (integer), and a status (Boolean) all in one place.</p> <p>Just like in a database, records help us organize related information more efficiently.</p> <p>By using records, we can keep all related data about a single person or object together in one structure, and we can use real-world names for each category (called fields) to make the data easier to understand and manage. </p> <p>This is especially useful because most systems we work with, like databases, organize data in this way.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records/#record-structure","title":"Record Structure","text":"<p>A record structure is like creating your own custom data type. </p> <p>As a programmer, you define a record with a name that represents something real, like \"Student\" or \"Product\" and specify different categories (fields) for storing information. </p> <p>Each field has a name and a specific data type (e.g., string, integer, Boolean), so the program knows how to store and handle each piece of data. </p> <p>This way, when the program creates actual records, it knows exactly what kind of information to expect in each field.</p> PythonTheory <pre><code># Import the dataclass function\nfrom dataclasses import dataclass\n\n# \n@dataclass\n\nclass SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n# Create an object called pupilRecord from the SchoolReg class\npupilRecord = SchoolReg()\n\n# Update the pupilRecord object with Name, Age and Reg\npupilRecord.Name = \"Peter\"\npupilRecord.Age = 17\npupilRecord.Reg = \"r1\"\n\n# Output the pupilRecord object\nprint (pupilRecord.Name) \nprint (pupilRecord.Age) \nprint (pupilRecord.Reg) \n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records/#arrays-of-records","title":"Arrays of Records","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.3_Arrays_of_Records/#explanation_1","title":"Explanation","text":"<p>In Python, an array of records is like a list of boxes, where each box holds important information about a person, place, or thing. </p> <p>Each \"box\" (record) has labelled parts for details, like a name, age, or ID number. </p> <p>For example, if we have three students, we can store their name, age, and registration number in three separate boxes.</p> <p>These boxes are part of a record, and we can easily look inside each one to see or change the details. </p> <p>Example</p> PythonReference Language <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    # Create a class\n    class SchoolReg:\n        # Create variables to hold the pupil data\n        Name : str = \"\" \n        Age : int = 0\n        Reg : str = \"\"\n\n    # Create an empty list called pupilRecord to store 3 student records\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    # Add pupil data\n    for x in range(len(pupilRecord)):\n\n        pupilRecord[x].Name = str(input(\"Enter Name: \"))\n        pupilRecord[x].Age = int(input(\"Enter Age: \"))\n        pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    # Print the pupil data\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.4_Parameter_Passing/","title":"Parameter Passing","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.4_Parameter_Passing/#parameter-passing","title":"Parameter Passing","text":"<p>A parameter is a value that is being passed in or out of a subprogram.  In the example below you can see two parameters being passed into the calculate sub-program. </p> <p>In all the software development we do we are going to follow the \u201cgood practice\u201d of using Local Variables within our sub-programs. </p> <p>This means we need to implement Parameter Passing to get the required data in and out of a module and so that it can used elsewhere in a program.</p> <p>In the example below you can see two parameters being passed into the calculate sub-program on line 6</p> <p>Example</p> <pre><code>def input_lunch_info():\n    lunch_cost = float(input(\"Enter the cost of lunch - \"))\n    years_member = int(input(\"Enter the years of membership - \"))\n    return lunch_cost, years_member\n\ndef calculate_final_cost (lunch_cost, years_member):\n    if lunch_cost &gt;= 55 or years_member &gt; 3:\n    print (\"\u00a3{:.2f}\".format(lunch_cost - 10)) \n    else:\n    print (\"\u00a3{:.2f}\".format(lunch_cost)) \n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.4_Parameter_Passing/#formal-parameters","title":"Formal Parameters","text":"<p>Formal parameters are placeholders within a subprogram for the values received from main program\u2019s actual parameters.  In the example below there is a \u2018validate\u2019 sub program. This has min, max and number as its parameters. The lines of code with the arrow pointing to it show different values are passed into the \u2018validate\u2019 sub program when it runs.  Within the validate sub-program the values that are passed in are known as min, max and number. This is why they are called placeholders for the values that are received from the main program.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.4_Parameter_Passing/#actual-parameters","title":"Actual Parameters","text":"<p>This is the actual data sent to a subprogram. </p> <p>It's found in the line of code that you call the function. </p> <p>In the example below you can see checkAnswer(userAnswer). </p> <p>Within that, userAnswer would be the actual parameter.</p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.5_Scope_of_Variables/","title":"Scope_of_Variables","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.5_Scope_of_Variables/#local-global-variables","title":"Local &amp; Global Variables","text":"<p>During National 5 you worked with variables throughout the entire scope of a program as well as accessing, using and changing their data values anywhere in the code, this is known as a Global Variable.</p> <p>A global variable is created in the main part of the program and can be passed/accessed by other parts of the program.</p> <p>A local variable however is only used within a single block of code and cannot be seen or accessed from other parts of the program.</p> <p>The scope of a variable defines which part of the program can see the variable and change its value. </p> <p>For example the scope of a local variable is the subroutine it is in.</p> <p>Example</p> <pre><code>    totalAppDownloads = 2305651\n\n    def downloadsForMonth():\n\n        print \"Current download amount: \", totalAppDownloads,\"downloads\"\n\n        monthDownloads = int(raw_input(\"How many downloads did the App have this month?  \"))\n\n        return monthDownloads\n\n    def newTotalDownloads(monthDownloads):\n\n        totalAppDownloads = totalAppDownloads + monthDownloads\n\n        return\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/","title":"Sub-programs","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/#modularity","title":"Modularity","text":"<p>Modularity is when a program is split up into smaller chunks called sub-programs. </p> <p>Each sub-program does a specific job. For example one sub-program may be to get user information. </p> <p>\ud83d\udd11 Each subprogram can be used in any order and can be reused multiple times. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/#procedures-and-functions","title":"Procedures and Functions","text":"<ul> <li>Procedures and functions both do things with data</li> <li>They\u2019re both subprograms or blocks of reusable code</li> <li>But the key difference lies in how they return results and how they are used in a program.</li> </ul> Procedure &amp; Functions Shared ComponentsExplanation <pre><code>def greet(name):\n\n    #Some code here....\n\ngreet(\"Alice\")\n</code></pre> <code>Line 1</code> <p>This line defines a subprogram called greet.</p> <ul> <li>def is the Python keyword used to declare a function or procedure.</li> <li>greet is the name of the subprogram.</li> <li>(name) is a parameter, which means this procedure expects some data (in this case, a name) to be passed into it when it is called.</li> </ul> <p>\ud83d\udca1 This is where the procedure is set up, but it won\u2019t run until it\u2019s called.</p> <code>Line 5</code> <p>This line calls the greet procedure and passes the value \"Alice\" to it as an argument.</p> <ul> <li>The value \"Alice\" replaces the name parameter inside the procedure.</li> <li>The code inside the procedure will now run using \"Alice\" as the input.</li> </ul> <p>\ud83d\udca1 This is where the procedure/function is actually used and executed.</p> <p>Procedures</p> <p>A procedure is a set of instructions that does a specific task in a program. </p> <p>Before you can use a procedure, you have to define it \u2014 this means giving it a name and telling the computer what kind of data it will need. </p> <p>That data is sent into the procedure using parameters.</p> <p>Once the procedure receives the data, it performs an action using it. This could be something like displaying a message on the screen or changing a value. </p> Procedure Example<pre><code>def greet(name):\n\n    print(f\"Hello, {name}!\") #This makes it a procedure\n\ngreet(\"Alice\")\n</code></pre> <p>\ud83d\udca1 With a procedure the result doesn\u2019t always come back to the main program \u2014 sometimes it just creates an effect. But if the result is passed back, it can be used in another part of the program.</p> <p>Functions</p> <p>A function is a set of instructions that does something and returns a result to the main program.</p> <p>Just like a procedure, before you can use a function, you have to define it (give it a name) and tell the computer what kind of data it will need. </p> <p>That data is sent into the function using parameters.</p> Function Example<pre><code>def square(x):\n\n    return x * x  # This makes it a function\n\nresult = square(5)  # result now equals 25\n</code></pre> <p>\ud83d\udca1 A function always returns a value back to the main program using the return keyword.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/#key-differences-procedure-vs-function","title":"\ud83d\udd11 Key Differences: Procedure vs Function","text":"Feature Procedure Function Returns a value? \u274c No \u2013 does not return a value \u2705 Yes \u2013 uses <code>return</code> to give a result Used in expressions? \ud83d\udeab No \u2013 usually called on its own \u2705 Yes \u2013 can be used in calculations or conditions Primary purpose To perform an action or task To compute and return a result Example (Python) <code>print_greeting(\"Sam\")</code> \u2192 prints output <code>total = add(5, 3)</code> \u2192 returns <code>8</code> Think of it as... A robot doing a task A calculator"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/#parameters","title":"Parameters","text":"<p>The movement fo data between sub programs is implemented using parameters.</p> <p>When a program uses a subprogram (like a function or a procedure), it often needs to send information to it. This information is called a parameter. </p> <p>\ud83d\udca1Parameters can be things like variables, arrays, or lists.</p> <p>There are two main types of parameters:</p> <ul> <li>In parameters: These are used to send data into a subprogram.</li> <li>Out parameters: These are used to send data out of a subprogram back to the main program.</li> </ul> <p>The process of sending this data is called parameter passing. </p> <p>When you see a top-level design:</p> <ul> <li> <p>If you see in: next to a piece of data, it means that the data is going into the subprogram (an in parameter). </p> </li> <li> <p>If you see out:, it means data is coming out of the subprogram (an out parameter).</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.6_Sub-Programs_%28Procedures%29/#actual-and-formal-parameters","title":"Actual and Formal Parameters","text":"<p>The actual parameters are the values being passed into the parameters</p> <p>The formal parameters are the values being used in the procedure/function.</p> Actual and Formal Parameters<pre><code># Function\ndef double(value):\n    result = value * 2\n    return result \n\n# Main program\noriginal = 5                 \ndoubled = double(original)   \n\nprint(\"Original:\", original)\nprint(\"Doubled:\", doubled)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.7_Sub-Programs_%28Functions%29/","title":"Sub-program Procedures","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.7_Sub-Programs_%28Functions%29/#modularity","title":"Modularity","text":"<p>Modularity means that when a program is written it is split up into smaller chunks called sub-programs. Imagine a program with millions of lines of. This would be split up into different programming teams to complete. </p> <p>Each of the sub-programs does a specific job. For example one sub-program may be to get user information. Each of the subprograms can be used in any order and can be reused multiple times. </p> <p>Example</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.7_Sub-Programs_%28Functions%29/#procedures-in-python","title":"Procedures in Python","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.7_Sub-Programs_%28Functions%29/#what-is-a-procedure","title":"What is a procedure?","text":"<p>We'll use an analogy here. Let's imagine that you're a dishwasher. Your process of washing a dish could be:</p> <ul> <li>Dip the dish into the water</li> <li>Cover every inch of the dish with soap </li> <li>Rinse and dry the dish</li> </ul> <p>So, every time you need to wash a dish, you do just that. Dip, soap, dry. Dip, soap, dry. Dip, soap, dry. Even when you go home, you dip, soap, dry. Dip, soap, dry. It's the same sequence, repeated over and over again. </p> <p>A procedure works the same way. People replace the process of dipping, soaping, and drying with the command \"wash the dishes\". When you call a procedure, it simply does the jobs that the procedure is supposed to do. </p> <p>By replacing a stack of instructions with one single statement, it makes code easier to read and debug. A procedure does not return a value.</p> <p>In Python we give a procedure a name, this is done by giving them a name after the, \u201cdef\u201d instruction. The brackets after the procedure name are used to pass in data that will be used in that block of code. This is known as parameter passing. </p> <p>Info</p> <p>A procedure literally just executes commands.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.8_Pre-Defined_Functions/","title":"Pre-defined Functions","text":"<p>What you need to know</p> <p>You must be able to describe and implement pre-defined functions (with parameters):</p> <ul> <li>to create substrings</li> <li>to convert from character to ASCII and vice versa</li> <li>to convert floating-point numbers to integers</li> <li>modulus</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.8_Pre-Defined_Functions/#explanation","title":"Explanation","text":"<p>A pre-defined function is a section of code that has been written, checked, tested, translated and saved in a function library for later use. </p> <p>In short, a pre-defined functions mean you don't have to write lots of code to do simple things. </p> Substrings <p>You know already that a string is a collection of characters:</p> 0 1 2 3 4 5 6 7 8 9 10 H e l l o W o r l d <p>A substring is an extract of the string, between two points. In the example above, the substring is \u201cHello\u201c.</p> <p>Uses for substrings:</p> <ul> <li>Find the first character in a word or sentence</li> <li>Extract one character at a time, e.g. to convert them to ASCII codes</li> <li>Search for the position of a space between two words</li> </ul> <p>We can extract (or slice) the substring with this syntax:</p> <pre><code>mystring = \"Hello world\"\nsub1 = mystring[ marker1 : marker2 ]\n</code></pre> <p>Where marker1 and marker2 are two integer numbers or variables, e.g. 0 and 4.</p> <pre><code>mystring = \"Hello world\"\nsub1 = mystring[0:4]\n</code></pre> <p>This would return the first four characters (0 to 4): Hello.</p> <p>Example</p> <p>This program has a string (Hello world) and uses a fixed loop to print out one character/letter at a time</p> PythonTheory <pre><code>mystring = \"Hello world\"\n\nfor counter in range(0, len(mystring)):\n\n    a = counter\n    b = counter + 1\n    letter = mystring[a:b]\n    print(letter)\n</code></pre> <pre><code>DECLARE mystring INITIALLY \"Hello world\"\nDECLARE letter INITIALLY \"\"\nDECLARE a INITIALLY 0\nDECLARE b INITIALLY 0\n\nFOR counter FROM 1 TO length(mystring) DO\n    SET a TO counter\n    SET b TO counter + 1\n    SET letter TO substring(mystring, a, b - a)\n    SEND letter TO DISPLAY\nENDFOR\n</code></pre> Ascii-to-character <p>Every character (every letter, digit or symbol) can be represented by a number. </p> <p>They use a system of ASCII (7 or 8 bit) or Unicode (16 bit).</p> ASCII Number Character 65 A 116 t 37 % <p>There are two functions that convert back and forth between ASCII codes and their associated characters.</p> <p>To get an ASCII number from a character:     </p> <p>ord() \u2018ord\u2019 is short for \u2018ordinal\u2019 <pre><code>mychar = input(\"Enter a character\")\nprint(ord(mychar))\n</code></pre></p> <p>To get a character from an ASCII number:     </p> <p>chr() <pre><code>mynumber = int(input(\"Enter an ascii code\"))\nprint(chr(mynumber))\n</code></pre></p> <p>Example</p> <p>This program asks the user to enter a letter. </p> <p>It tells them if they have entered an upper-case letter (ASCII 65-90), lower-case letter (ASCII 97-122) or some other character.</p> <p><pre><code>letter = input(\"Please enter an upper-case or lower-case letter\")\n\n# Convert to an ASCII integer number\nletter_code = ord(letter)\n\n# Check if an upper-case, lower-case or something else\nif letter_code &gt;= 65 and letter_code &lt;= 90:\nprint(\"Upper case letter\")\nelif letter_code &gt;= 97 and letter_code &lt;= 122:\nprint(\"Lower case letter\")\nelse:\nprint(\"That is not a letter\")\n</code></pre> Common uses for these functions are:</p> <ul> <li>Simple encryption programs (convert words and letters into numeric codes)</li> <li>Looking for capital letters in input validation (e.g. a password or spellcheck)</li> </ul> Floating Point to Integer <p>You can convert a floating-point number to an integer. It is known as \u201ctruncating\u201d the number and is not the same as rounding.</p> <p>When a number is truncated, it removes the fractional part.</p> <p>In maths, this is known as a floor function. </p> <p>It finds the last integer lower than the number passed.</p> <p>So, if we say:</p> <pre><code>num1 = int(3.14159265)\nprint(num1)\n</code></pre> <p>The program will display 3.</p> <p>However:</p> <p><pre><code>num1 = int(3.99999999)\nprint(num1)\n</code></pre> Will also display 3, not 4.</p> <p>Example</p> <p>This program begins with an array of floating-point numbers and uses a running total algorithm to add up the totals. </p> <p>However, it truncates each number before totalling. So, 3.91 becomes 3, 2.68 becomes 2, etc.</p> <pre><code># Get a list of temperatures\ntemperatures = [11.21, 2.68, 3.91, 4.11]\ntotal = 0\n\n# Loop through the numbers and add them to the total\nfor counter in range(0, 4):\n# Get the \u2018current\u2019 temperature and convert to integer\ntemp = temperatures[counter]\nshortened = int(temp)\n# Add shortened temp to the total\ntotal = total + shortened\n</code></pre> <p>Warning</p> <p>Do not confuse truncation with rounding. If you are asked to convert the number to an integer, without being told to round it, you should use this new function. If in doubt, use this one for Higher.</p> Modulus <p>If we divide 17 \u00f7 4, the answer is 4, with remainder 1. </p> <p>If we divide 22 \u00f7 4, the answer is 5, remainder 2.</p> <p>The modulus function returns the remainder only. </p> <p>The modulus function here would return 1, and 2.</p> <p>The syntax for modulus  is different from a \u201cproper\u201d function. It it is written like an operator:</p> <pre><code>remainder = 5 % 2\nprint(remainder)\n</code></pre> <p>This would divide 5 by 2, and print the remainder, 1. </p> <p>Example</p> <p>This program asks the user to enter a number. </p> <p>It identifies if the number is odd or even. </p> <p>It divides it by 2, and if there is no remainder, the number must be even; if the remainder is 1, the number is odd.</p> <pre><code># Ask the user to enter a number\nnum = int(input(\"Please enter a number\"))\n\n# Divide by 2 to get the remainder\nremainder = num % 2\n# If remainder is 0, number is even\nif remainder == 0:\nprint(\"This is an even number\")\nelse:\nprint(\"This is an odd number\")\n</code></pre> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.8_Pre-Defined_Functions/#characters-at-the-end-of-a-string","title":"Characters at the end of a string","text":"<p>Substring also allows us to work backwards.</p> <p>If we want the last character of the string, we could use -1 as a shortcut. This code returns \u2018d\u2019:</p> <p><pre><code>mystring = \"Hello world\"\nsub4 = mystring[-1]\n</code></pre> To find the last five characters, we would start at position -5 (5 from the end), and leave the second parameter blank. </p> <p>The variable sub5 would contain \u201crld\u201d, and sub6 would contain \u201cworld\u201d.</p> <pre><code>mystring = \"Hello world\"\nsub5 = mystring[-3:]\nsub6 = mystring[-5:]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/","title":"Working with .csv Files","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/#explanation","title":"Explanation","text":"<p>CSV stands for Comma Separated Values and is a format usually associated with importing and exporting from spreadsheets and databases.</p> <p>It allows greater control over the data than a simple text file, as each row is split up into identifiable columns. </p> <p>Below is an example of how the data is stored:</p> Name Age Reg Number Peter 17 r1 Laura 16 r1 Marie 16 r1 <p>A .csv file would store the above data as:</p> <p><pre><code>    Peter, 17, r1\n    Laura, 17, r1\n    Marie, 16, r1\n</code></pre> It may be easier to think of the data as being separated into columns and rows that use an index to identify them:</p> Name Age Reg Number 0 Peter 17 r1 1 Laura 16 r1 2 Marie 16 r1"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/#options-modes","title":"Options (modes)","text":"<p>When opening a .csv file to use, you must first specify how that file will be used.</p> <p>The options are:</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/#write-mode","title":"<code>Write Mode</code>","text":"<p>\"w\" (write Mode) creates a new file and writes to that file. If the file already exists, a new file will be created, overwriting the existing file.</p> <p>Example</p> <pre><code>    # This must be at the top of your program to allow Python to use the csv libary of commands.\n    import csv\n\n    # Create a new file called \"School-Reg.csv\", overwriting any previous files of the same name.\n    file = open(\"School-Reg.csv\", \"w\")\n\n    # Add 3 new records to the file\n    newRecord1 = (\"Peter,17,r1 \\n\")\n    newRecord2 = (\"Laura,17,r1 \\n\")\n    newRecord3 = (\"Marie,16,r1 \\n\")\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/#read-mode","title":"<code>Read Mode</code>","text":"<p>\"r\" (Read Mode) opens for reading and will not allow you to make changes.</p> <p>Example</p> <pre><code>    import csv\n\n    # Open \"School-Reg.csv\" in read mode.\n    file = open(\"School-Reg.csv\", \"r\")\n\n    # Display the records one row at a time.\n    for row in file:\n        print(row)\n\n    file.close()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L6/6.9_File_Handling%28.csv%29/#append-mode","title":"<code>Append Mode</code>","text":"<p>\"a\" (Append Mode) used to add new data to the end of the file.</p> <p>Example</p> <pre><code>    import csv\n\n    # Open \"School-Reg.csv\" in append mode.\n    file = open(\"School-Reg.csv\", \"a\")\n\n    # Ask user to enter name, age and reg\n    name = str(input(\"Enter Name: \"))\n    age = int(input(\"Enter Age: \"))\n    regNumber = str(input(\"Enter Reg: \"))\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/4.7-Class/","title":"Class","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/4.7-Class/#explanation","title":"Explanation","text":"<p>Definition</p> <p>Code that defines what an object will remember and the things it will be able to do.</p> <p>A class is like a blueprint or a recipe.</p> <p>If you wanted to build a car, you wouldn't just randomly start putting things together. </p> <p>You would use a blueprint that shows them how to make the car, what parts it will have, and how it will work.</p> <p>A <code>class</code> is the blueprint (or set of instructions) that tells <code>Python</code> how to \"build\" a car in your program.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/4.7-Class/#properties","title":"Properties","text":"<p>Properties are the characteristics or features of an object that are defined in the class. </p> <p>In Python, these are typically set in the init method and accessed using the self keyword.</p> <p>Creating a Class with Properties</p> CodeExplanation <pre><code>    class Car:\n        def __init__(self, make, model, year): \n\n            self.make = make  \n            self.model = model \n            self.year = year \n</code></pre> <p><code>Line 1</code></p> <p>This defines a class called <code>Car</code>.</p> <p><code>line 2</code> - </p> <p>This line defines a special method called <code>__init__</code>.</p> <p>The <code>__init__</code> method is called automatically when you create a new object (a car) from the Car class.</p> <p>It is used to set up the initial properties (like make, model, and year) for that object.</p> <p><code>The parameters</code>:</p> <ul> <li> <p><code>self</code>: Refers to the object being created. It allows the method to work with the object's properties.</p> </li> <li> <p><code>make</code>: A placeholder for the car's manufacturer (e.g., \"Tesla\").</p> </li> <li> <p><code>model</code>: A placeholder for the car's model (e.g., \"Model 3\").</p> </li> <li> <p><code>year</code>: A placeholder for the car's manufacturing year (e.g., 2024).</p> </li> </ul> <p><code>Line 5</code></p> <p>This line creates a property called <code>make</code> for the car object and sets it to the value of the <code>make parameter</code> provided when the car is created.</p> <p><code>Line 6</code></p> <p>This line creates a property called <code>model</code> for the car object and sets it to the value of the <code>model parameter</code> provided when the car is created.</p> <p><code>Line 7</code></p> <p>This line creates a property called <code>year</code> for the car object and sets it to the value of the <code>year parameter</code> provided when the car is created.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/4.7-Class/#methods","title":"Methods","text":"<p>Using the Car class, methods are the actions or things that the car can do. </p> <p>These are like the instructions in the class that tell the car how to behave.</p> <p>Methods can be thought of as the abilities a car gets when it's created from the class blueprint.</p> <p>Adding the Methods</p> CodeExplanation <pre><code>    class Car:\n        def __init__(self, make, model, year): \n\n            self.make = make  \n            self.model = model \n            self.year = year\n\n        def start_engine(self):\n            print(f\"The {self.year} {self.make} {self.model} engine has started.\")\n\n        def stop_engine(self):  \n            print(f\"The {self.year} {self.make} {self.model} engine has stopped.\")\n</code></pre> <p><code>Line 1</code></p> <p>This defines a class called <code>Car</code>.</p> <p><code>line 2</code> - </p> <p>This line defines a special method called <code>__init__</code>.</p> <p>The <code>__init__</code> method is called automatically when you create a new object (a car) from the Car class.</p> <p>It is used to set up the initial properties (like make, model, and year) for that object.</p> <p><code>The parameters</code>:</p> <ul> <li> <p><code>self</code>: Refers to the object being created. It allows the method to work with the object's properties.</p> </li> <li> <p><code>make</code>: A placeholder for the car's manufacturer (e.g., \"Tesla\").</p> </li> <li> <p><code>model</code>: A placeholder for the car's model (e.g., \"Model 3\").</p> </li> <li> <p><code>year</code>: A placeholder for the car's manufacturing year (e.g., 2024).</p> </li> </ul> <p><code>Line 5</code></p> <p>This line creates a property called <code>make</code> for the car object and sets it to the value of the <code>make parameter</code> provided when the car is created.</p> <p><code>Line 6</code></p> <p>This line creates a property called <code>model</code> for the car object and sets it to the value of the <code>model parameter</code> provided when the car is created.</p> <p><code>Line 7</code></p> <p>This line creates a property called <code>year</code> for the car object and sets it to the value of the <code>year parameter</code> provided when the car is created.</p> <p><code>Line 8</code></p> <p>Define the <code>start_engine()</code> instance method that makes the car\u2019s engine start.</p> <p><code>Line 9</code></p> <p>The instance method prints a message saying the car's engine has <code>started</code> using the car\u2019s attributes (<code>make</code>, <code>model</code>, and <code>year</code>) to make the message specific to the car.</p> <p><code>How It Works</code></p> <p>When you call <code>start_engine()</code> on a car object, the self parameter refers to that specific car.</p> <p>It grabs the car\u2019s year, make, and model and includes them in the message.</p> <p><code>Line 11</code></p> <p>Define the <code>start_engine()</code>instance method that makes the car\u2019s engine start.</p> <p><code>Line 12</code></p> <p>The instance method prints a message saying the car's engine has <code>stopped</code> using the car\u2019s attributes (<code>make</code>, <code>model</code>, and <code>year</code>) to make the message specific to the car.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/4.9-Objects/","title":"Objects","text":"<p>An object is a real thing (instance) created from a class.</p> <p>Each object has its own set of properties and can perform the actions (methods) defined by the class.</p> <p>When you create a car using the Car class, you\u2019re making a real instance of that class with specific details, like a car's make, model, and year. </p> <p>That instance is called an <code>object</code>.</p> <pre><code>class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def start_engine(self):\n        print(f\"The {self.year} {self.make} {self.model} engine has started.\")\n\n    def stop_engine(self):\n        print(f\"The {self.year} {self.make} {self.model} engine has stopped.\")\n\n# Creating objects (specific cars)\ncar1 = Car(\"Tesla\", \"Model 3\", 2024)  # Object 1\ncar2 = Car(\"Toyota\", \"Corolla\", 2020) # Object 2\n\n# Using the objects\ncar1.start_engine()  # The 2024 Tesla Model 3 engine has started.\ncar2.start_engine()  # The 2020 Toyota Corolla engine has started.\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/","title":"SQLite with Python","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-1-setting-up","title":"Step 1: Setting Up","text":"<p>SQLite is included in Python by default, so you don\u2019t need to install anything extra.</p> <pre><code>import sqlite3\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-2-connecting-to-a-database","title":"Step 2: Connecting to a Database","text":"<p>You need to establish a connection to an SQLite database. If the file doesn\u2019t exist, it will be created automatically.</p> <pre><code># Connect to (or create) a database\nconn = sqlite3.connect(\"my_database.db\")\n\n# Create a cursor object to interact with the database\ncursor = conn.cursor()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-3-creating-a-table","title":"Step 3: Creating a Table","text":"<p>Once connected, you can create tables using SQL.</p> <pre><code>cursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS students (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    age INTEGER,\n    grade TEXT\n)\n\"\"\")\nconn.commit()\n</code></pre> <p>Step 4: Inserting Data</p> <p>To add records to the table:</p> <pre><code>cursor.execute(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", \n               (\"Alice\", 14, \"A\"))\nconn.commit()\n</code></pre> <p>For multiple records:</p> <pre><code>students = [(\"Bob\", 15, \"B\"), (\"Charlie\", 14, \"A\"), (\"David\", 16, \"C\")]\ncursor.executemany(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", students)\nconn.commit()\n</code></pre> <p>Step 5: Retrieving Data</p> <p>To fetch data from the table:</p> <pre><code>cursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\nfor row in rows:\n    print(row)\n</code></pre> <p>If you need just one record:</p> <pre><code>cursor.execute(\"SELECT * FROM students WHERE name = ?\", (\"Alice\",))\nprint(cursor.fetchone())  \n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-6-updating-data","title":"Step 6: Updating Data","text":"<p>You can update a record like this:</p> <pre><code>cursor.execute(\"UPDATE students SET grade = ? WHERE name = ?\", (\"A+\", \"Bob\"))\nconn.commit()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-7-deleting-data","title":"Step 7: Deleting Data","text":"<p>To remove a record:</p> <pre><code>cursor.execute(\"DELETE FROM students WHERE name = ?\", (\"Charlie\",))\nconn.commit()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#step-8-closing-the-connection","title":"Step 8: Closing the Connection","text":"<p>Always close the connection when done.</p> <pre><code>conn.close()\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#storing-sqlite-data-in-parallel-arrays","title":"Storing SQLite Data in Parallel Arrays","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect(\"my_database.db\")\ncursor = conn.cursor()\n\n# Retrieve all data\ncursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\n# Create parallel lists\nids = []\nnames = []\nages = []\ngrades = []\n\n# Loop through the rows and store data in separate lists\nfor row in rows:\n    ids.append(row[0])      # First column (id)\n    names.append(row[1])    # Second column (name)\n    ages.append(row[2])     # Third column (age)\n    grades.append(row[3])   # Fourth column (grade)\n\n# Close the connection\nconn.close()\n\n# Display the lists\nprint(\"IDs:\", ids)\nprint(\"Names:\", names)\nprint(\"Ages:\", ages)\nprint(\"Grades:\", grades)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/5.1-SQLite-with-Python/#storing-sqlite-data-using-dataclasses","title":"Storing SQLite Data using Dataclasses","text":"<pre><code>from dataclasses import dataclass\nimport sqlite3\n\n# Define a dataclass\n@dataclass\nclass Student:\n    id: int\n    name: str\n    age: int\n    grade: str\n\n# Connect to the database\nconn = sqlite3.connect(\"my_database.db\")\ncursor = conn.cursor()\n\n# Retrieve all data\ncursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\n# Store data in a list of dataclass objects\nrecords = [Student(*row) for row in rows]\n\n# Close the connection\nconn.close()\n\n# Display records\nfor record in records:\n    print(record)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index%20copy/","title":"Software Implememntation","text":"<p>Data Types and Structures</p> <p>\ud83d\udea8 Note: the following have already been covered during the Higher Computing Science course:</p> <ul> <li>parallel 1-D arrays</li> <li>records</li> <li>arrays of records</li> </ul> <p>Should you need to revist these, please go to the relevent section.</p> <ul> <li> <p>01 - 2d Arrays </p> <p> Start lesson</p> </li> <li> <p>02 - Arrays of Objects</p> <p> Start Lesson</p> </li> <li> <p>03 - linked lists (double and single)</p> <p> Start Lesson</p> </li> </ul> <p>Computational Constructs</p> <p>Object Oriented Programming</p> <ul> <li> <p>01 - Class </p> <p> Start lesson</p> </li> <li> <p>01 - Objects </p> <p> Start lesson</p> </li> </ul> <p>Working with Databases</p> <p>Algorithm Specification</p> <ul> <li> <p>01 - Binary Searching </p> <p> Start lesson</p> </li> <li> <p>02 - Insertation Sort</p> <p> Start Lesson</p> </li> <li> <p>03 - Bubble Sort</p> <p> Start Lesson</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index/","title":"Software Implememntation","text":"<p>\ud83d\udea8 Note: the following have already been covered during the Higher Computing Science course:</p> <ul> <li>parallel 1-D arrays</li> <li>records</li> <li>arrays of records</li> </ul> <p>Should you need to revist these, please go to the relevent section.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index/#2d-arrays","title":"2D Arrays","text":"<p>Lesson Notes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index/#algorithm-specification","title":"Algorithm Specification","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index/#insertation-sort","title":"Insertation Sort","text":"<p>Lesson Notes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.0_index/#python-and-databases","title":"Python and Databases","text":"<p>Lesson Notes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/","title":"Binary Searching","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement binary search</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/#explanantion","title":"Explanantion","text":"<p>A binary search finds a value by continually halving a sorted list until a target is, or is not, found.</p> <p>The code begins by designating a start (S) point and an end (E) point in the list. These are initially the first and last elements of the array.</p> <p>From these, the target value positioned in the middle of the sorted list is identified\":</p> <p>( M=(E-S)/2 ).</p> <p>image to be added</p> <p>The algorithm compares the target to the value stored at M and makes one of three decisions:</p> <ol> <li> <p>If the middle value is larger than the target, then the target must be in the half of the list that contains smaller values.</p> </li> <li> <p>If the middle value is smaller, the target must be in the larger half of the list.</p> </li> <li> <p>If the middle value is equal to the target, then the position of the target has been identified and the search ends.</p> </li> </ol> <p>If either bullet points 1 or 2 are true, then the start or end are reassigned as required. </p> <p>The middle point is then calculated for the remaining list and the same decision is made again.</p> <p>image to be added</p> <p>This is carried out again, until a match is found at M.</p> <p>image to be added</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/#binary-search-of-sorted-integers","title":"Binary Search of Sorted Integers","text":"PythonExplanation <pre><code>numbers = [1, 2, 3, 4, 5, 6, 7]\n\ndef binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left &lt;= right:\n        middle = (left + right) // 2  # Find the middle index\n\n        middle_value = array[middle]  # Get the name at the middle index\n\n        if middle_value == target:\n            return f\"{target} found at index {middle}!\"\n        elif target &lt; middle_value:\n            right = middle - 1  # Focus on the left half\n        else:\n            left = middle + 1  # Focus on the right half\n\n    return f\"{target} is not in the list.\"\n\nprint(binary_search(numbers, 7))\n</code></pre> <code>Line 1</code> Implement the array of integers (sorted)    <code>Line 3</code> The lowest index point (S) is stored <code>Line 3</code>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/#binary-search-of-sorted-strings","title":"Binary Search of Sorted Strings","text":"PythonExplanation <pre><code>names = [\"Alice\", \"Charlie\", \"Emma\", \"Jack\", \"Olivia\", \"Sophia\", \"Zach\"]\n\ndef binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left &lt;= right:\n        middle = (left + right) // 2  # Find the middle index\n\n        middle_value = array[middle]  # Get the name at the middle index\n\n        if middle_value == target:\n            return f\"{target} found at index {middle}!\"\n        elif target &lt; middle_value:\n            right = middle - 1  # Focus on the left half\n        else:\n            left = middle + 1  # Focus on the right half\n\n    return f\"{target} is not in the list.\"\n\nprint(binary_search(names, \"Olivia\"))\n</code></pre> <code>Line 3 - Define the Function</code> <p>This line starts the definition of a function called insertion_sort that takes one argument, arr, which will be a list of numbers we want to sort.</p> <p>This function takes two inputs:     - <code>array</code>: The sorted list of names to search.     - <code>target</code>: The name we\u2019re searching for.</p> <code>Line 4 - Set the Starting Points</code> <p>left points to the first index of the list.</p> <code>Line 5 - Set the End Point</code> <p>right points to the last index of the list.</p> <code>Line 7 - Loop Until the Pointers Meet</code> <p>The loop continues as long as <code>left</code> is less than or equal to <code>right</code>. If <code>left</code> goes beyond <code>right</code>, the target is not in the list.</p> <code>Line 8 - Find the Middle</code> <p><code>middle</code> calculates the middle index of the current range.</p> <p><code>middle_value</code> retrieves the name at that index.</p> <code>Line 12 - Check if Middle Matches the Target</code> <p>If the middle name matches the target, the search is complete, and the function returns the result.</p> <code>Line 14 - Check if the Target is Smaller</code> <p>If the target name is alphabetically smaller than the middle name, the search continues in the left half of the list.</p> <code>Line 16 - Check if the Target is Larger</code> <p>If the target name is larger, the search continues in the right half of the list.</p> <code>Line 19 - Return if Not Found</code> <p>If the loop ends without finding the target, the function returns a message indicating the name is not in the list.   </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/#binary-search-2d-arrays","title":"Binary Search 2D Arrays","text":"PythonExplanation <pre><code># Step 1: Define a function for binary search on a 2D array\ndef binary_search_2d(array, target):\n\"\"\"\nThis function searches for a target number in a 2D array using binary search.\nThe array should be sorted row-wise and column-wise.\n\"\"\"\n\n# Step 2: Start from the top-right corner of the array\nrow = 0  # Start at the first row\ncol = len(array[0]) - 1  # Start at the last column\n\n# Step 3: Keep searching until we either find the number or run out of bounds\nwhile row &lt; len(array) and col &gt;= 0:\n    # Check the current number\n    current = array[row][col]\n\n    # If it's the target, return its position\n    if current == target:\n        return (row, col)\n\n    # If the current number is larger, move left (to a smaller number)\n    elif current &gt; target:\n        col -= 1\n\n    # If the current number is smaller, move down (to a larger number)\n    else:\n        row += 1\n\n# If we reach here, the target is not in the array\nreturn None\n\n# Step 4: Create a sorted 2D array to test\nmatrix = [ [1, 4, 7, 11] , [2, 5, 8, 12] , [3, 6, 9, 16] , [10, 13, 14, 17]]\n\n# Step 5: Call the function and print the result\ntarget = 9\nresult = binary_search_2d(matrix, target)\nprint(f\"The target {target} is at position: {result}\")\n</code></pre> <code>Line 3 -</code> <code>Line 4 -</code> <code>Line 5 -</code> <code>Line 7 -</code> <code>Line 8 -</code> <code>Line 12 -</code> <code>Line 14 -</code> <code>Line 16 -</code> <code>Line 19 -</code>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search%20copy/#binary-search-unsorted-2d-arrays","title":"Binary Search Unsorted 2D Arrays","text":"PythonExplanation <pre><code># Step 1: Create an unsorted 2D array\nunsorted_array = [\n    [5, 12, 7],\n    [3, 9, 1],\n    [8, 6, 2]\n    ]\n\n# Explanation: This is the unsorted 2D array. Each row has numbers in no particular order.\n\n# Step 2: Flatten the 2D array into a single list\nflat_array = [num for row in unsorted_array for num in row]\n\n# Explanation: We take all the numbers from the 2D array and put them into a single list.\n# Now `flat_array` is: [5, 12, 7, 3, 9, 1, 8, 6, 2]\n\n# Step 3: Sort the list\nflat_array.sort()\n\n# Explanation: Sorting arranges the numbers from smallest to largest.\n# Now `flat_array` is: [1, 2, 3, 5, 6, 7, 8, 9, 12]\n\n# Step 4: Define a function for binary search\ndef binary_search(array, target):\nlow = 0\nhigh = len(array) - 1\n\n# Explanation: `low` is the start of the list, and `high` is the end.\n\nwhile low &lt;= high:\nmid = (low + high) // 2\n# Explanation: `mid` is the middle index of the current part of the list.\n\nif array[mid] == target:\n    return mid\n# Explanation: If the number at `mid` is what we're looking for, return its index.\n\nelif array[mid] &lt; target:\n    low = mid + 1\n# Explanation: If the number at `mid` is too small, search the right half.\n\nelse:\n    high = mid - 1\n# Explanation: If the number at `mid` is too big, search the left half.\n\nreturn -1\n# Explanation: If we finish the loop without finding the number, return -1 (not found).\n\n# Step 5: Search for a number\ntarget = 7\nindex = binary_search(flat_array, target)\n\n# Explanation: Let's look for the number 7 in the sorted list.\n\n# Step 6: Print the result\nif index != -1:\n    print(f\"Found {target} at index {index} in the sorted array.\")\nelse:\n    print(f\"{target} is not in the array.\")\n\n# Explanation: If the number is found, it tells us where it is. If not, it says so.\n</code></pre> <code>Line 3 -</code> <code>Line 4 -</code> <code>Line 5 -</code> <code>Line 7 -</code> <code>Line 8 -</code> <code>Line 12 -</code> <code>Line 14 -</code> <code>Line 16 -</code> <code>Line 19 -</code>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/","title":"Linear Searching","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement linear search</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/#explanation","title":"Explanation","text":"<p>A linear search checks each element of a list one by one until the target value is found or the list ends. It does not require the list to be sorted.</p> <p>The algorithm works by: 1. Starting at the first element of the list. 2. Comparing the current element with the target value. 3. If a match is found, the index (position) is returned. 4. If no match is found by the end of the list, the search returns \"not found\".</p> <p>This makes linear search simple to implement, but slower than binary search for large datasets.</p> <p>image to be added</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/#linear-search-of-sorted-integers","title":"Linear Search of Sorted Integers","text":"PythonExplanation <pre><code>numbers = [5, 8, 2, 7, 3, 10]\n\ndef linear_search(array, target):\n    for index in range(len(array)):\n        if array[index] == target:\n            return f\"{target} found at index {index}!\"\n    return f\"{target} is not in the list.\"\n\nprint(linear_search(numbers, 7))\n</code></pre> <code>Line 1 - Create the list</code> An array of integers is created (unsorted in this case). <code>Line 3 - Define the function</code> The function <code>linear_search</code> takes the array and a target value. <code>Line 4 - Loop through the list</code> Each element is checked in turn using its index. <code>Line 5 - Compare with target</code> If the element matches the target, the index is returned. <code>Line 7 - If not found</code> If the loop ends without a match, a message is returned."},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/#linear-search-of-strings","title":"Linear Search of Strings","text":"PythonExplanation <pre><code>names = [\"Alice\", \"Charlie\", \"Emma\", \"Jack\", \"Olivia\", \"Sophia\", \"Zach\"]\n\ndef linear_search(array, target):\n    for index in range(len(array)):\n        if array[index] == target:\n            return f\"{target} found at index {index}!\"\n    return f\"{target} is not in the list.\"\n\nprint(linear_search(names, \"Olivia\"))\n</code></pre> <code>Line 1 - Create the list</code> A list of names is created. <code>Line 3 - Define the function</code> Function takes the list of names and the target name. <code>Line 4 - Loop through</code> Each name is checked one by one. <code>Line 5 - Compare with target</code> If the name matches, the index is returned. <code>Line 7 - If not found</code> Otherwise, the function returns that the name is not found."},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/#linear-search-2d-arrays","title":"Linear Search 2D Arrays","text":"PythonExplanation <pre><code># Step 1: Create a 2D array\nmatrix = [\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9]\n]\n\n# Step 2: Define linear search for 2D\ndef linear_search_2d(array, target):\n    for row in range(len(array)):\n        for col in range(len(array[row])):\n            if array[row][col] == target:\n                return (row, col)\n    return None\n\n# Step 3: Test the function\ntarget = 6\nresult = linear_search_2d(matrix, target)\nprint(f\"The target {target} is at position: {result}\")\n</code></pre> <code>Line 1 - Create the 2D array</code> A 3x3 grid of numbers. <code>Line 8 - Define the function</code> The function loops through rows and columns. <code>Line 10 - Check value</code> If the current element matches the target, return its position. <code>Line 13 - Not found</code> If not found after the full search, return None."},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.14_Binary_Search/#linear-search-in-unsorted-2d-arrays","title":"Linear Search in Unsorted 2D Arrays","text":"PythonExplanation <pre><code>unsorted_array = [\n    [5, 12, 7],\n    [3, 9, 1],\n    [8, 6, 2]\n]\n\ndef linear_search_2d(array, target):\n    for row in range(len(array)):\n        for col in range(len(array[row])):\n            if array[row][col] == target:\n                return (row, col)\n    return None\n\ntarget = 9\nresult = linear_search_2d(unsorted_array, target)\nprint(f\"The target {target} is at position: {result}\")\n</code></pre> <code>Line 1 - Create unsorted 2D array</code> The numbers are not in order. <code>Line 7 - Define function</code> Loops through rows and columns. <code>Line 9 - Check value</code> If the number matches the target, return position. <code>Line 12 - Not found</code> If search ends without match, return None."},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort/","title":"Insertion Sort","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement insertation sorts</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort/#explanantion","title":"Explanantion","text":"<p>An insertion sort traverses an array from the second element to the last. </p> <p>Each element is compared to the elements before in turn, working backwards down the list.  Values are swapped until the element being compared is placed in order.  <p></p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort/#examples","title":"Examples","text":"Insertion Sort (1D Arrays) Insertion Sort Algorithm for a 1D Array<pre><code>scores = [7, 2, 5, 3, 4]                                        # Initial unsorted list\n\n# --------- Insertation Sort ----------\n\n# Loop through each score starting from the second element\n\nfor i in range(1, len(scores)):                                 # Iterate from the second element to the end\n  current_score = scores[i]                                     # The score to insert\n  j = i - 1                                                     # Index of the previous element\n\n  # Shift scores greater than current_score to the right\n\n  while j &gt;= 0 and scores[j] &gt; current_score:                   # While not at start and previous score is greater\n    scores[j + 1] = scores[j]                                   # Move the score one position to the right\n    j -= 1                                                      # Move to the previous score\n\n  # Insert the current score into the correct position\n\n  scores[j + 1] = current_score                                 # Place current_score in its sorted position\n\n# Print the sorted list of scores\n\nprint(\"Sorted Scores:\")                                         # Output header\nfor score in scores:                                            # Loop through sorted scores\n  print(score)                                                  # Print each score\n</code></pre> Insertation Sort (2D Arrays) Insertion Sort Algorithm for a 2D Array<pre><code>students = [\n    [\"Alice\", 7],                                       # Student 1: name and test score\n    [\"Bob\", 2],                                         # Student 2: name and test score\n    [\"Charlie\", 5],                                     # Student 3: name and test score\n    [\"Diana\", 3],                                       # Student 4: name and test score\n    [\"Eve\", 4]                                          # Student 5: name and test score\n]\n\n# Sort students by test score using insertion sort\n\n# --------- Insertation Sort ----------\n\nfor i in range(1, len(students)):                       # Loop through each student starting from the second\n    current = students[i]                               # Store the current student\n    j = i - 1                                           # Set j to the index before i\n\n    # Compare test scores and shift students as needed\n\n    while j &gt;= 0 and students[j][1] &gt; current[1]:       # Shift students with higher scores to the right\n        students[j + 1] = students[j]                   # Shift student with higher score to the right\n        j -= 1                                          # Move to the previous student\n\n    students[j + 1] = current                           # Insert the current student at the correct position\n\n# Print sorted students\n\nprint(\"Sorted Students by Test Score:\")                 # Print header\n\nfor student in students:                                # Loop through sorted students\n    print(student)                                      # Print each student's name and test score\n</code></pre> Insertion Sort (Parallel Arrays) Insertion Sort Algorithm for a 2D Array<pre><code>names = [\"Alice\", \"Bob\", \"Charlie\"]                     # List of student names\nscores = [85, 72, 90]                                   # Corresponding list of test scores\n\n# --------- Insertation Sort ----------\n\nfor i in range(1, len(scores)):                         # Loop through each score starting from the second element\n    current_score = scores[i]                           # Store the current score to be inserted\n    current_name = names[i]                             # Store the corresponding name\n    j = i - 1                                           # Set j to the index before i\n\n    while j &gt;= 0 and scores[j] &gt; current_score:         # Shift scores greater than current_score to the right\n        scores[j + 1] = scores[j]                       # Move the higher score one position to the right\n        names[j + 1] = names[j]                         # Move the corresponding name as well\n        j -= 1                                          # Move to the previous index\n\n    scores[j + 1] = current_score                       # Insert the current score at the correct position\n    names[j + 1] = current_name                         # Insert the corresponding name at the same position\n\nprint(\"\\nSorted by Test Score:\")                        # Print header for sorted output\n\nfor i in range(len(names)):                             # Loop through the sorted arrays\n    print(\"Name:\", names[i], \"Score:\", scores[i])       # Print each name and corresponding score\n</code></pre> Insertion Sort (Array of Records) Insertion Sort Algorithm for an Array of Records<pre><code>from dataclasses import dataclass                                   # Import dataclass for easy class creation\n\n@dataclass  \nclass Student:\n    name: str = \"\"                                                  # Define a string attribute 'name' with a default value of empty string\n    score: int = 0                                                  # Define an integer attribute 'score' with a default value of 0\n\n# Pre-populate the list of students with data\nstudents = [\n    Student(name=\"Alice\", score=85),                                # Create a Student object for Alice with score 85\n    Student(name=\"Bob\", score=72),                                  # Create a Student object for Bob with score 72\n    Student(name=\"Charlie\", score=90)                               # Create a Student object for Charlie with score 90\n]\n\n# --------- Insertation Sort ----------\n\nfor i in range(1, len(students)):                                   # Loop through the list starting from the second element\n    current = students[i]                                           # Store the current student object to be inserted\n    j = i - 1                                                       # Set j to the index before i\n\n    while j &gt;= 0 and students[j].score &gt; current.score:             # While j is valid and previous student's score is greater\n        students[j + 1] = students[j]                               # Shift the previous student one position to the right\n        j -= 1                                                      # Move to the previous index\n\n    students[j + 1] = current                                       # Insert the current student at the correct position\n\nprint(\"\\nSorted by Test Score:\")                                    # Print a header for the sorted list\n\nfor student in students:                                            # Loop through each student in the sorted list\n    print(\"Name:\", student.name, \"Score:\", student.score)           # Print the student's name and score\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/","title":"Insertion Sort","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement insertation sorts</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#explanantion","title":"Explanantion","text":"<p>An insertion sort traverses an array from the second element to the last. </p> <p>Each element is compared to the elements before in turn, working backwards down the list.  Values are swapped until the element being compared is placed in order</p> <p>Consider the following  array</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertion-sort-iteration-1","title":"Insertion Sort - Iteration 1","text":"<p>Start with element 1 of the list to be sorted.  This value is temporarily stored.</p> <p>If the temp value is smaller than the value before it (element 0), then the value before it, is copied to the right (element 1).</p> <p>Each value, to the left of the element (where the temp value was originally stored) is compared until :</p> <ul> <li> <p>The value being compared is smaller that the stored temp value or </p> </li> <li> <p>the start of the list has been reached</p> </li> </ul> <p>When either of the above is true, the temp value is copied back into the list at the previous position.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertion-sort-iteration-2","title":"Insertion Sort - Iteration 2","text":"<p>The next value (99) is copied into the temp.</p> <p>When the next value (99) is examined, the value before it (45) is smaller, so no further action is required</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertion-sort-iteration-3","title":"Insertion Sort - Iteration 3","text":"<p>The next value (7) is copied into the temp.</p> <p>When the temp value (7) is compared with element 2 (99) , it is smaller so 99 is copied into element 3</p> <p>When the temp value (7) is compared with element 1 (45), it is smaller so 45 is copied into element 2</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertion-sort-1d-arrays","title":"Insertion Sort (1D Arrays)","text":"PythonExplanation <pre><code>numbers = [7, 2, 5, 3, 4]\n\nfor i in range(1, len(arr)):\n\ncurrent_number = arr[i]\n\nj = i - 1\n\nwhile j &gt;= 0 and arr[j] &gt; current_number:\n\n    arr[j + 1] = arr[j]\n\n    j -= 1\n\n    arr[j + 1] = current_number\n\nprint(\"Sorted Numbers:\")\n\nprint(numbers)\n</code></pre> <code>Line 1</code> This line starts the definition of a function called insertion_sort that takes one argument, arr, which will be a list of numbers we want to sort. <code>Line 3</code> <p>This loop goes through each item in the list, starting from the second item (i = 1). We don\u2019t need to start from the first item because, by itself, it\u2019s already \"sorted.\"</p> <p>current_number = arr[i]</p> <p>Here, we store the value of the current item in the list (the one we want to sort into the right place) in a variable called current_number.</p> <p>j = i - 1</p> <p>We set j to be the index of the item right before current_number. This helps us compare the current_number to the items that are already sorted.</p> <p>while j &gt;= 0 and arr[j] &gt; current_number:</p> <p>This line starts a loop. It checks if j is still within the list (not less than 0) and if the item at j is bigger than current_number. If both are true, we move the item at j one position to the right. This loop makes space for current_number to be in the right spot.</p> <p>arr[j + 1] = arr[j]</p> <p>Inside the while loop, this line shifts the number at position j one step to the right (to position j + 1), making room for current_number to move into the correct position.</p> <p>j -= 1</p> <p>We move j one step to the left to check the next item in the sorted portion of the list. This repeats until current_number finds the correct position.</p> <p>arr[j + 1] = current_number</p> <p>Once we\u2019ve found the correct spot for current_number, we place it there.</p> <p>return arr</p> <p>This line gives back the sorted list after we\u2019ve finished the sorting.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertation-sort-2d-arrays","title":"Insertation Sort (2D Arrays)","text":"PythonExplanation <pre><code>average_temps = [ [\"January\", \"8\"],[\"February\", \"2\"],[\"March\", \"22\"],[\"April\", \"16\"],[\"May\", \"28\"]]\n\nfor i in range(1, len(average_temps)):\n\n    key = average_temps[i]\n\n    j = i - 1\n\n    while j &gt;= 0 and int(average_temps[j][1]) &lt; int(key[1]):\n\n        average_temps[j + 1] = average_tempss[j]\n\n        j -= 1\n\n        average_temps[j + 1] = key\n\nprint(\"Sorted Average Temps:\")\n\nprint(average_temps)\n</code></pre> <code>Line 1</code> <p>This is the list of temps we want to sort from smallest to biggest. </p> <code>Line 3</code> <p>This line tells the computer to look at the list one number at a time, starting from the second number (at position 1, because lists start at position 0). </p> <code>Line 4</code> <p>Here, the computer stores the temp. we\u2019re currently looking at. </p> <p>Remember, we start at position 1.</p> <code>Line 5</code> The computer looks at the temp that is before the one we are holding. <code>Line 7</code> <p>This line is very important as it checks two things:</p> <ol> <li> <p>Is there a temp before the current one?</p> <pre><code>    while j &gt;= 0\n</code></pre> </li> <li> <p>Is this temp smaller than the current temp? </p> <pre><code>    and int(average_temps[j][1] &lt; key[1]):\n</code></pre> </li> </ol> If both answers are yes, it means the current player should be placed before the one we\u2019re looking at.  <code>Line 11</code> <p>This moves the bigger number to the right.</p> <code>Line 13</code> <p>The computer now looks at the next number to the left.</p> <code>Line 13</code> <p>Finally, The computer, when we find the right place for our current number, we put it there.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.15_Insertation_Sort1/#insertion-sort-array-of-records","title":"Insertion Sort (Array of Records)","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/","title":"2d Arrays","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#explanation","title":"Explanation","text":"<p>A 2D array is like a table or grid, made up of rows and columns. Each position in a 2D array can hold a value, much like how a cell in a spreadsheet works. </p> <p>This allows us to store and work with data efficiently.</p> <p>Example </p> <p>Imagine a chessboard, which has 8 rows and 8 columns. </p> <p>Each square on the board can hold a piece (like a pawn or bishop), and each piece can be positioned at a specific spot determined by its row and column number.</p> <p>Row 1, Column 1 might hold a white rook.</p> <p>Row 2, Column 3 might hold a black knight.</p> <p>This is exactly how a 2D array works! </p> <p>Each cell can be accessed using two indices: one for the row and one for the column.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#how-does-it-work","title":"How Does it Work?","text":"<p>Imagine a classroom with 12 pupils who sit in 3 rows of desks with 4 columns. </p> <p>You could create an array for each row:</p> <p><pre><code>row1 = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\nrow2 = [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"]\nrow3 = [\"Ian\", \"Jack\", \"Katie\", \"Liam\"]\n</code></pre> However, this is not always efficiant.</p> <p>Using a 2d array would allow each classroom to store their seating plan in one array:</p> <pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#accessing-elements","title":"Accessing Elements","text":"<p>To find a specific student's name, we use row and column indexes (counting starts at 0!):</p> <pre><code>print(students[1][2])  # Output: Grace\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#changing-values","title":"Changing Values","text":"<p><pre><code>students[2][3] = \"Lucas\"\nprint(students[2][3])  # Output: Lucas\n</code></pre> Now, <code>Liam</code> has been replaced with <code>Lucas</code>.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#looping-through-a-2d-array","title":"Looping Through a 2D Array","text":"<p>We can use loops to go through each row and column:</p> <pre><code>for row in students:\n    for name in row:\n        print(name, end=\" \")  # Prints all names in a single line\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#appending-to-a-2d-array","title":"Appending to a 2D Array","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#adding-a-new-row","title":"Adding a New Row","text":"<p>To add a new row to a 2D array, use <code>.append()</code>:</p> <pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n\nclassroom1.append([\"Paul\", \"Claire\",\" Shaun\"])\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.1_2d_Arrays/#adding-a-new-empty-column-to-each-row","title":"Adding a New (empty) Column, to Each Row","text":"<pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n\n# Adding a new column (adding \"Grace\" and \"Hannah\" to each row)\nfor row in classroom1:\n    row.append(\" \")  # You can change this value for each row\n\nprint(classroom1)\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/","title":"Object Oriented Programming - Objects","text":"<p>What You Need to Know</p> <p>You must be able to describe, identify and implement the following object-oriented constructs:</p> <ul> <li>Objects</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/#what-is-an-object","title":"What is an Object","text":"<p>In Object-Oriented Programming (OOP), an object is something that contains data and behaviours bundled together. </p> <p>You\u2019ve already seen variables and functions, but an object combines both into one structure. Think of it like a character in a game \u2014 it has:</p> <ul> <li>Attributes (facts/data) like a name, level, or health</li> <li>Methods (actions) like move, jump, or heal</li> </ul> <p>Objects are created from classes (like blueprints). Each object made from a class is called an instance.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/#youtube-video","title":"Youtube Video","text":"<p>A short introduction to Objects and Classes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/#example","title":"Example","text":"<p>Below is a simple Python program that shows how to define a class and create an object. This code is suitable for SQA Advanced Higher level.</p> <pre><code>class Car:\n    def __init__(self, make, model, year):\n        self._make = make\n        self._model = model\n        self._year = year\n\n    def get_details(self):\n        return f\"{self._year} {self._make} {self._model}\"\n\n# Creating an object (an instance of Car)\nmy_car = Car(\"Toyota\", \"Yaris\", 2018)\n\n# Calling a method on the object\nprint(my_car.get_details())\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/#breakdown","title":"\ud83d\udd0d Breakdown:","text":"<ul> <li><code>Car</code> is the class (blueprint).</li> <li><code>my_car</code> is the object created from that class.</li> <li>It has attributes: <code>_make</code>, <code>_model</code>, and <code>_year</code>.</li> <li>It has a method: <code>get_details()</code> that gives a summary of the car.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.4_OOP_Object/#summary","title":"Summary","text":"<ul> <li>An object is a combination of data (attributes) and functions (methods).</li> <li>Objects are created from classes.</li> <li>You access an object\u2019s behaviour by calling its methods.</li> <li>OOP helps you structure your code in a way that models real-world things clearly.</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/","title":"Object Oriented Programming - Class, Property, Method, Object","text":"<p>What You Need to Know</p> <p>You must be able to describe, identify and implement the following object-oriented constructs:</p> <ul> <li>Class</li> <li>Property</li> <li>Method</li> <li>Object</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/#youtube-video","title":"Youtube Video","text":"<p>A short introduction to classes, properties, methods, and objects</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/#what-is-a-class-property-method-and-object","title":"What is a Class, Property, Method, and Object?","text":"<p>Object-Oriented Programming (OOP) is a way of writing code that lets you build programs using objects \u2014 just like how the real world works. For example, think about your phone. It has data like brand and colour, and it can do things like make calls or take pictures. In programming, we model things like that using classes and objects.</p> <p>Here\u2019s a breakdown of the main ideas:</p> <ul> <li>Class: This is like a blueprint or recipe. It describes what something is and what it can do, but it\u2019s not the actual thing. A class defines the properties and methods an object will have.</li> <li>Property: This is a variable that holds information about the object, like its name, colour, or age. Properties are also called attributes.</li> <li>Method: This is a function inside the class that describes something the object can do. Methods often use the object\u2019s properties to decide what happens.</li> <li>Object: This is a real thing created from a class. You can make as many objects as you like from the same class, each with its own data.</li> </ul> <p>By using OOP, your code becomes easier to understand, reuse, and update \u2014 especially in bigger programs.</p> <p>Note</p> <p>You\u2019ll often see the word <code>self</code> used inside class methods. This just means \u201cthis object.\u201d </p> <p>When we write <code>self.name</code>, we\u2019re talking about the <code>name</code> property that belongs to the current object. </p> <p>It helps the object keep track of its own data, especially when there are lots of objects being used at the same time.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/#example","title":"Example","text":"<p>Here is a simple Python program that shows how to define a class, add properties and methods, and create an object from the class:</p> OOP Example<pre><code>class Dog:\n    def __init__(self, name, breed):\n        self._name = name        # Property\n        self._breed = breed      # Property\n\n    def speak(self):             # Method\n        return f\"{self._name} says woof!\"\n\n# Create an object from the Dog class\nmy_dog = Dog(\"Rex\", \"Labrador\")\n\n# Call a method on the object\nprint(my_dog.speak())\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/#breakdown","title":"\ud83d\udd0d Breakdown:","text":"<ul> <li><code>Dog</code> is the class</li> <li><code>self._name</code> and <code>self._breed</code> are properties of the object.</li> <li><code>my_dog</code> is the object created from the class.</li> <li><code>speak()</code> is a method that the object can use.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.7_OOP_Class/#summary","title":"Summary","text":"<ul> <li>A class is a plan for making something in code. It tells the computer what the object should know (properties) and what it should be able to do (methods).</li> <li>A property stores information about the object. Every object from a class can have different values for its properties.</li> <li>A method is an action that an object can perform \u2014 it\u2019s like a built-in ability.</li> <li>Using OOP helps you build programs that are neat, powerful, and more like how things work in real life.</li> <li>An object is something you make from a class \u2014 it\u2019s like the real version of the plan.</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/","title":"Object Oriented Programming - Objects","text":"<p>What You Need to Know</p> <p>You must be able to describe, identify and implement the following object-oriented constructs:</p> <ul> <li>Objects</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/#what-is-an-object","title":"What is an Object","text":"<p>In Object-Oriented Programming (OOP), an object is something that contains data and behaviours bundled together. </p> <p>You\u2019ve already seen variables and functions, but an object combines both into one structure. Think of it like a character in a game \u2014 it has:</p> <ul> <li>Attributes (facts/data) like a name, level, or health</li> <li>Methods (actions) like move, jump, or heal</li> </ul> <p>Objects are created from classes (like blueprints). Each object made from a class is called an instance.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/#youtube-video","title":"Youtube Video","text":"<p>A short introduction to Objects and Classes</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/#example","title":"Example","text":"<p>Below is a simple Python program that shows how to define a class and create an object. This code is suitable for SQA Advanced Higher level.</p> <pre><code>class Car:\n    def __init__(self, make, model, year):\n        self._make = make\n        self._model = model\n        self._year = year\n\n    def get_details(self):\n        return f\"{self._year} {self._make} {self._model}\"\n\n# Creating an object (an instance of Car)\nmy_car = Car(\"Toyota\", \"Yaris\", 2018)\n\n# Calling a method on the object\nprint(my_car.get_details())\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/#breakdown","title":"\ud83d\udd0d Breakdown:","text":"<ul> <li><code>Car</code> is the class (blueprint).</li> <li><code>my_car</code> is the object created from that class.</li> <li>It has attributes: <code>_make</code>, <code>_model</code>, and <code>_year</code>.</li> <li>It has a method: <code>get_details()</code> that gives a summary of the car.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/7.8_OOP_Sub_Class/#summary","title":"Summary","text":"<ul> <li>An object is a combination of data (attributes) and functions (methods).</li> <li>Objects are created from classes.</li> <li>You access an object\u2019s behaviour by calling its methods.</li> <li>OOP helps you structure your code in a way that models real-world things clearly.</li> </ul> <p> Back</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/","title":"Object-Oriented Programming","text":"<p>What you need to Know</p> <p>Describe, exemplify and implement UML class diagrams:</p> <ul> <li>class name</li> <li>instance variables and data types</li> <li>methods</li> <li>public and private</li> <li>inheritance</li> <li>constructor</li> <li>array of objects</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#explanation","title":"Explanation","text":"<p>In Object-Oriented Programming (OOP), objects are the main building blocks of our program. </p> <p>So far we have worked with functions/subroutines that use parameters to pass data around a program. </p> <p>We will now be building on our previous knowledge by creating objects that can store data and do things with that data.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#classes-objects-and-properties","title":"Classes, Objects and Properties","text":"<p>A class is a blueprint for an objects of the same type</p> <p>Each object has:</p> <ul> <li> <p>Properties (also called instance variables) \u2014 these hold the object\u2019s data.</p> </li> <li> <p>Methods \u2014 these are the actions or functions the object can perform.</p> </li> </ul> <p>Key Point</p> <p>All objects will have the same properties and methods</p> Object Example - Car <p>Properties</p> <ul> <li>make</li> <li>colour</li> <li>year</li> </ul> <p>Methods</p> <ul> <li>Move Forward</li> <li>Move Backwards</li> <li>Stop</li> </ul> <p>Think of it like a toy car:</p> <ul> <li> <p>You can look at the box and read the properties (Ferrari, Red, 2020).</p> </li> <li> <p>Then you can push a button and it does something (moves forward, moves backwards, stops) \u2014 those are the methods.</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#instantiation","title":"Instantiation","text":"<p>An object (one cookie) is one instance of a class.</p> <p>When an object is instantiated it will have:</p> <ul> <li> <p>its own set of instance variables (properties) </p> </li> <li> <p>have access to all the methods described in the class definition</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#uml-class-diagrams","title":"UML Class Diagrams","text":"<p>A UML class diagram is the design for a class. </p> <p>In the diagram below you can see the defined properties and methods contained within the class. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#visability","title":"Visability","text":"<p>The properties in the class should only be accessible by methods. </p> <p>For example:</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#uml-and-python","title":"UML and Python","text":""},{"location":"Levels/Senior_Phase/Unit_1_SDD/4.0_Software_Implementation/L7/Object_Oriented_Programming/#the-constructer-method","title":"The Constructer Method","text":"<p>The Constructor method, shown by <code>car()</code> in the UML diagram below is a method that is executed when an instance of a given class (object) is created. </p> <p>When the program is run, the ** Constructer Method** initialises instance variables using any supplied parameters or the default setup values. </p> <p>In short:</p> <ul> <li> <p>The constructor method initialises the instance variables of the new object</p> </li> <li> <p>The constructor method can run only once when a class is created and will run before all other code related to the class</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/","title":"Testing","text":"<p>Quick Links</p> <ul> <li>Normal, Extreme and Exceptional Test Data</li> <li>Types of Errors</li> <li>Syntax Errors</li> <li>Logic Errors</li> <li>Execution Errors</li> </ul> <p>Testing is something we as programmers do all the time. </p> <p>When you change a program, you run it to check if it works the way you expected. </p> <p>For National 5, we put it into a more formal process.</p> <p>What you Need to Know</p> <p>You must be able to Describe, identify, exemplify, and implement normal, extreme, and exceptional test data for a specific problem, using a test table.</p> <p>You must be able to describe and identify syntax, execution, and logic errors.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/#normal-extreme-and-exceptional-test-data","title":"Normal, Extreme and Exceptional Test Data","text":"<p>When we test a program, we use test data. You enter the test data as the inputs to the program. The data should try to capture a range of different scenarios - don\u2019t just test the program with one piece of data.</p> <p>As an example:</p> <p>You are asked to write a program that picks a random number. The user has to guess what number the program has picked. They are asked to enter a number between 0 and 10. If they enter a number outside that range, the program should show an error message.</p> <p>There are three types of data you need to be able to use and give examples of: normal, extreme and exceptional. In this example, the program expects a number between 0 and 10 (inclusive).</p> Normal Normal test data is data that is definitely within the expected range. In this case, we could choose 5 (for example), or 2. Both of those are clearly between 0 and 10. Extreme Extreme test data is on the edges of what\u2019s acceptable. In this case, 0 or 10. They should still be accepted by the program - they\u2019re just within range. Exceptional Exceptional test data is clearly and definitely invalid/wrong. For example, in this case, -50 or 10000. Those should definitely be rejected by the program. <p>We write this data into a test table. </p> <p>The test table shows the data we test the program with. </p> <p>We put one example in each row of the table (i.e. don\u2019t say \u201canything between 1 and 9\u201d - pick one!)</p> Test Data Type of Testing Expected Result 0 Normal Should be accepted 5 Extreme Should be accepted -50000 Exceptional Should be rejected <p>In the test table, you should say what you expect the program to do. Some test tables have another column for what actually happened, and you would record this afterwards.</p> <p>Take another example - rolling a dice. </p> <p>You are asked for four pieces of test data: one normal, two extreme and one exceptional. </p> <p>Remember that normal data is definitely within range, extreme is on the edge, but accepted, and exceptional is definitely incorrect. </p> <p>Which values would be valid for a standard 6-sided dice?</p> Test Data Type of Testing Expected Result 3 Normal Should be accepted 1 Extreme Should be accepted 6 Extreme Should be accepted 180 Exceptional Should be rejected <p>Here, the values 1 and 6 are the minimum and maximum the dice can roll, so they are extreme. They should still be accepted by the program - it\u2019s perfectly valid for a dice to roll 6. However, the dice can\u2019t roll 180, so that is clearly a piece of exceptional test data, because it\u2019s invalid.</p> <p>You could be asked to give examples of different types of test data, and sometimes to complete the test table.</p> <p>In the coursework assignment, you\u2019ll usually be given specific data to test your program with. For example, you might be asked to write a program that averages five numbers. Here, you would have to use the test data that you\u2019re given to test your program.</p> <p>Sometimes, you could be asked to state what the differences are between the three types of test data.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/#types-of-errors","title":"Types of Errors","text":"<p>There are three types of programming errors that you need to know about - syntax, logic and execution.</p> <p>If you\u2019re given an example of an error, you need to be able to say what type it is.</p> <p>Syntax and logic errors occur when you are writing the program; </p> <p>execution errors happen when the program is running. </p> <p>Of these, syntax errors are usually the easiest to spot.</p> <p>Good test data helps you to find and minimise these errors.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/#syntax-errors","title":"Syntax Errors","text":"<p>Syntax errors are quite common. You will already have experienced lots of these!</p> <p>Syntax errors happen when you make a mistake in typing your code. </p> <p>These could be spelling mistakes, typing words in the wrong order, or using the wrong symbols.</p> <p>For example:</p> <ul> <li>priiiint instead of print</li> <li>print(\u201cHello,\u201d name) instead of print(\u201cHello\u201d, name)</li> <li>range[0, 10] when it should be range(0, 10)</li> </ul> <p>Syntax errors are about breaking the rules of the language in some way.</p> <p>In Python (specifically), you would see an error message. </p> <p>Look at the message carefully - it tells you which line the error is on (so you don\u2019t need to check your whole program).</p> <p>When you\u2019re doing practical tasks, watch out for these common syntax errors in Python. </p> <p>If you\u2019re not sure what\u2019s causing an error, come back to this page and check your code to see if you\u2019ve included one!</p> Common Syntax ErrorsExplanation <pre><code>print (Hello World) \n\nif age = 17: \n    print(\u201cYou can drive\u201d)\n\nfor counter in range(0, 10)\nprint(\u201cThis happens 10 times\u201d)       \n\nif age &gt;= 17\n    print(\u201cYou can drive\u201d)\nelse:\n    print(\u201cYou can\u2019t drive\u201d)        \n</code></pre> <code>Line 1 - Missing Speechmarks</code> <p>Missing speech marks around a string. It should be (\u201cHello world\u201d).    </p> <code>Line 3 and 5 - Incorrect use of Comparison Operators</code> <p>Should be the double-equals == Remember to use == when you\u2019re checking if two things are equal</p> <code>Line 6 and 7 - Forgot to Indent</code> <p>The line that repeats (print) should be indented (tabbed in) as it\u2019s inside the loop.</p> <code>Line 9, 10, 11 and 12 - Missing Colon</code> <p>Missing the colon ':'\u00a0 at the end of the first line.  If, else and loops should always have a colon, e.g.</p> <pre><code>if age &gt;= 17:\n    print(...)  \n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/#logic-errors","title":"Logic Errors","text":"<p>Logic errors are a bit  trickier to spot. Logic errors don\u2019t produce error messages. </p> <p>The program still runs, but it doesn\u2019t do what you\u2019d expect.</p> <p>A program is created to check if a number is between 0 and 10.</p> <pre><code>if rating &gt;= 0 and rating &lt;= 100:\n    print(\u201cThat is a rating out of 10\u201d)   \n</code></pre> <p>== This is a logic error, because I typed 100 instead of 10.==</p> <p>The program would still run. There\u2019s no syntax error, so I wouldn\u2019t see an error message. Instead, my logic is wrong.</p> <p>Another example:</p> <p>A program should ask a person\u2019s name and age, and then greet them with their name.</p> <p><pre><code>name = input(\u201cWhat is your name?\u201d)\nage = input(\u201cHow old are you?\u201d)\nprint(\u201cHello\u201d, age, \u201c. You are\u201d, name, \u201cyears old.\u201d)\n</code></pre> That program would still run, but the output wouldn\u2019t make much sense. </p> <p>If Bob, aged 15, enters his name and age, the program as it stands would output \u201cHello 15. You are Bob years old\u201d.</p> <p>Testing with appropriate test data is the best way of tracking down logic errors.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L5/5.0_Home/#execution-errors","title":"Execution Errors","text":"<p>Execution errors happen when the program is running. </p> <p>Typically, the program will crash with an error message.</p> <p>a program asks for two numbers. It plans to divide them.</p> <p>If the user enters 100 and 0, there will probably be an execution error - the program will crash, because it\u2019s impossible to divide by 0. </p> <p>A really good program will check the numbers first, and if one of them is invalid, it will ask the user to enter it again. </p> <p>This avoids the program crashing, so saves you from the execution error.</p> <p>Common execution errors in Python could involve:</p> <ul> <li>The program asks for a number, but the user enters some text (a string). What happens?</li> <li>Lists (you will study these later): if a list has 10 items, but you try to access the 11th item</li> </ul> <p>We find and (mostly) eliminate execution errors by testing. Exceptional test data is a good way to test for execution errors.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/5.0_Testing/L6/6.1-Trace-Tables/","title":"TRACE TABLES","text":"<p>It\u2019s common for you to be asked to complete a trace table in an exam. </p> <p>An example of a question is shown below with the trace table complete.</p> <p>Stephen wants to search for an item of data held in an array. </p> <p>He writes the following algorithm.</p> <pre><code>SET list to [27, 16, 86, 47, 87, 99]\nSET target to 47\nSET found to false\n\nFOR counter FROM 0 to 5 DO\n    IF list [counter] =target THEN\n        SET found to true\n    ELSE\n        SET found to false\n    END IF\nEND FOR\n\nIF found =true THEN\n    SEND \u201cItem found\u201d TO DISPLAY\nELSE\n    SEND \u201cNot found\u201d TO DISPLAY\nEND IF\n</code></pre> <p>A trace table is shown below which shows the line numbers where a variable has changed. </p> <p>Work your way through the table below to see if you get the same answers.</p> Line List Target Counter Found 1 [27,16,86,47,87,99] 2 47 3 FALSE 4 0 6 TRUE 4 1 8 FALSE"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/","title":"Evaluation","text":"<p>Quick Links</p> <ul> <li>Fitness for Purpose</li> <li>Efficient use of Coding Constructs</li> <li>Robustness</li> <li>Readability</li> <li>Summary</li> </ul> <p>What you Need to Know</p> <p>Describe, identify, and exemplify the evaluation of a solution in terms of:</p> <ul> <li>fitness for purpose</li> <li>efficient use of coding constructs</li> <li>robustness</li> <li> <p>readability:</p> <p>\u2014 internal commentary</p> <p>\u2014 meaningful identifiers</p> <p>\u2014 indentation</p> <p>\u2014 white space</p> </li> </ul> <p>In your practical assignment and exam you will have to be able to evaluate a program - either yours, or one you\u2019re given - in four categories:</p> <ul> <li>Fitness for purpose</li> <li>Efficient use of coding constructs</li> <li>Robustness</li> <li>Readability</li> </ul> <p>These are very important. </p> <p>You\u2019ll usually be asked for two of these in the assignment. </p> <p>You have to be able to give examples that fit all of these types of evaluation.</p> <p> In the course assignment, it\u2019s really important that you evaluate your own program accurately. If you say that your program is readable, and it isn\u2019t, you would not get the mark. If you evaluate that your program isn\u2019t as readable as it could be, and that\u2019s correct, you would get the mark. In the assignment, the marks are for being honest! </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#fitness-for-purpose","title":"Fitness for Purpose","text":"<p>If your program is fit for purpose, it means it does what it\u2019s supposed to do. </p> <p>If the program meets all of the functional requirements you set out in the analysis, then it is fit for purpose - it does all the things it\u2019s supposed to. </p> <p>If it doesn\u2019t meet one or more, it must not be fit for purpose.</p> <p>When you are doing the evaluation, use the term \u2018fit for purpose\u2019 or \u2018not fit for purpose\u2019 - be explicit. </p> <p>Say why it is or isn\u2019t fit for purpose, mentioning the specific requirement e.g.:</p> <ul> <li> <p>The program is fit for purpose, because it asks the user their age, and shows an error if they enter a negative number</p> </li> <li> <p>The program is not fit for purpose, as it is only supposed to accept percentages between 0 and 100, but it accepts values outside this range</p> </li> </ul> <p>Try to link your answer to exactly which requirement it is. </p> <p>Make sure that your answer links to the program you\u2019re being asked about - don\u2019t say \u201cit doesn\u2019t meet the requirement\u201d, because that could apply to any program. </p> <p>Which requirements are specific to this program?</p> <p>Exam Tip</p> <p>The SQA will sometimes give you programs they\u2019ve written, and ask if they are fit for purpose. </p> <p>Don\u2019t be too kind! </p> <p>If it isn\u2019t fit for purpose, say so. </p> <p>If you try to be polite, and say it\u2019s err\u2026 sorta fit for purpose, when it\u2019s not, you won\u2019t get the mark. Be honest!</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#efficient-use-of-coding-constructs","title":"Efficient use of Coding Constructs","text":"<p>Efficient use of coding constructs can seem confusing at first. </p> <p>In your exam or the assignment, the SQA tend to be really clear i.e. they usually give you a really bad program that\u2019s very inefficient.</p> <p>Efficiency is about using as few lines as possible. </p> <p>Example</p> InefficentEfficent <pre><code>print(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\nprint(\"Hello. My name is Bob.\")\n</code></pre> <pre><code>for loop in range(0, 5):\n    print(\"Hello. My name is Bob.\")\n</code></pre> <p>The program on the left isn\u2019t efficient. It says the same thing over and over again - something that could be done with a loop. </p> <p>The program on the right shows the same message, but it loops 5 times.</p> <p>The program on the right does the same thing much more efficiently because it uses fewer lines of code to achieve the same goal. </p> <p>You\u2019ll get much better at spotting these as you become experienced with Python. </p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#robustness","title":"Robustness","text":"<p>A robust program doesn\u2019t crash when the user enters exceptional data. </p> <p>Example</p> <p>A program is created to take the age of a person. </p> <p>If the user enters a negative number (no one has a negative age!) the program shouldn\u2019t just crash - it should show an error message and ask them to enter it again.</p> <p>You can test robustness using exceptional test data i.e. how does the program behave if you enter exceptional data? If it crashes, the program isn\u2019t robust. </p> <p>If it can cope with errors (e.g. by asking them nicely to enter it again), it is robust, and you can say this in your evaluation.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#readability","title":"Readability","text":"<p>Readability is about making your program easy for you, or other programmers after you, to read and understand. </p> <p>There are four ways that you can make your code readable, and you are expected to do these in your work. </p> <p>The coursework assignment includes marks for readable code using these four methods.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#internal-commentary","title":"Internal Commentary","text":"<p>Your code should contain internal commentary. </p> <p>Comments are notes that you leave to yourself, or other programmers, to explain what\u2019s going on. </p> <p>The computer ignores them when translating the program.</p> <p>I always use internal commentary in the examples I give you, and you\u2019re expected to do the same. </p> <p>Example of Internal Commentary in Python</p> <pre><code># This is an internal comment\n# The computer ignores these lines\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#meaningful-identifiers","title":"Meaningful identifiers","text":"<p>Sometimes also called meaningful variable names. </p> <p>When you look at your program, do the variable names help you to understand it? If so, you\u2019ve probably used meaningful names.</p> <p>In short, don\u2019t call your variables things like x or k. </p> <p>Give them more suitable names like age, password, multiplier - whatever! Although the computer ignores the names of variables, you gain marks for using names that make the program easier for humans to understand.</p> <p>Example</p> Not MeaningfulMeaningful <pre><code>p = input(\u201cWhat is your age?\u201d)\n= input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, x)\nprint(\u201cYou are\u201d, p, \u201cyears old.\u201d)\n</code></pre> <pre><code>age = input(\u201cWhat is your age?\u201d)\nname = input(\u201cWhat is your name?\u201d)\n\nprint(\u201cHello\u201d, name)\nprint(\u201cYou are\u201d, age, \u201cyears old.\u201d)\n</code></pre> <p>The program on the left is shorter, but the programmer is more likely to make a mistake and mix up x and p.</p> <p>This becomes even worse in longer programs. Save yourself the trouble by using meaningful variable names.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#indentation","title":"Indentation","text":"<p>Indentation means that code is \u201ctabbed in\u201d from the side, so that it\u2019s clear what loops or if statements it belongs to. </p> <p>This is especially true in Python, because in fact, code has to be indented to work properly.</p> <p>Example</p> Not IndentedIndented <pre><code>if age &gt;= 17:\nprint(\u201cYou can learn to drive\u201d)\nelse:\nprint(\u201cYou can\u2019t learn yet...\")\n</code></pre> <pre><code>if age &gt;= 17:\n    print(\u201cYou can learn to drive\u201d)\nelse:\n    print(\u201cYou can\u2019t learn yet...\")\n</code></pre> <p>In the program on the right, it\u2019s easier to see that the two print lines belong to the if and else.</p> <p>You already do this in Python, just remember to talk about it in your evaluation!</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#whitespace","title":"Whitespace","text":"<p>Whitespace is about leaving blank lines between pieces of code. This spaces things out and makes it a little easier to see what belongs together. </p> <p>I always leave whitespace in the practical examples I give you - blank lines so that related pieces of code are grouped together. </p> <p>I\u2019ve done it with paragraphs in these lesson notes!</p> <p>Real programs often run into thousands of lines of code. </p> <p>Think how hard those would be to read if the lines were all jammed together with no blank spaces.</p>"},{"location":"Levels/Senior_Phase/Unit_1_SDD/6.0_Evaluation/L5/5.0_Home/#evaluation-summary","title":"Evaluation Summary","text":"<p>Make sure that you can evaluate your program in the four areas - fitness for purpose, robustness, readability and efficiency of coding constructs. You\u2019ll normally be given the names, but you have to recall what they mean.</p> <p>For example, the coursework assignment usually contains a section laid out like this:</p> <p>Evaluate your program in terms of:</p> <p><code>Fitness for purpose (1 mark)</code> - My program is fit for purpose because .......</p> <p><code>Robustness (1 mark)</code> - My program is not robust, because if the user enters a string instead of a number the program crashes (an execution error).</p> <p><code>Readability (2 marks)</code> - My program is readable because I used meaningful variable names like \u201cscore\u201d instead of just calling it num1, num2, etc.  However, I could have made it more readable if I had used internal commentary.</p> <p>You are expected to make points in each box - this can be a good way to gain marks in the programming part of the assignment, so long as you prepare! </p> <p>Be honest - you get more marks for constructive criticism than saying the program does something, when it doesn\u2019t.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/1.0_Data_Representation/L5/5.0_Home/","title":"Representing Data","text":"<p>Quick Links</p> <ul> <li>Number Representation</li> <li>Floating Point Representation</li> <li>Storing Characters - ASCII</li> <li>Storing Graphics</li> </ul> <p>Computer Systems covers all of the super-fast, minute workings, inside devices.  We study the various technological devices and equipment we rely on and use every day through to all-encompassing networks we are ever connected through.</p> <p>Everything in devices is kept and worked with in Binary numbers, 1s and 0s.  </p> <p>A single instruction, of the millions of lines of programming running in memory, can take up 64 bits (binary digits) each.  </p> <p>The multimedia data you use in your programs also range from a few hundred bits for a text file all the way through to billions and billions of bits for a full movie. </p> <p>The number of bits required to be processed and stored is mind blowing in our ever-shrinking devices.  It does not seem sensible or simple to us, but Binary is actually very easy to represent in electronics using a high voltage for 1 and a low voltage for 0.  The super speeds of our devices mean they can work with billions of bits per second. </p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/1.0_Data_Representation/L5/5.0_Home/#number-representation","title":"Number Representation","text":"<p>We use the Decimal number system to represent the numbers we think about and work with.  Decimal is base 10 meaning we have 10 digits, 0 \u2013 9 (start counting at zero!).  Think about how the positioning of the number can affect its value.</p> <p>Binary numbers also have their own mathematical system which is base 2 (0, 1) and can be used to represent Positive Integer numbers.</p> <p>Binary to Decimal Conversion</p> <p>To convert a Binary number into Decimal we need to remember the conversion table.  </p> <p>A good way to remember the bit values is that it starts with a 1 over the right most bit and doubles each time.</p> <p>Add all the parts that have a 1 above them together to get the Decimal version of the number.</p> <p>In the exam you will have to remember the rule on how to write the conversion table above the binary number.  </p> <p>Note</p> <p>Take time with the basic arithmetic, show your working and re-check your final answer.</p> <p>Decimal to Binary Conversion</p> <p>The conversion table shows the value of each Bit as their position moves to the left similar to our decimal units/tens/hundreds.</p> <p>Now that we know the decimal equivalent to the base two system we can use a simple table to help convert a number into binary.</p> <p>For example, lets convert the number 76 to binary. </p> <p>All we need to do is start at the left of the table and see if we can take away the number without going below 0.</p> <ol> <li>Can we take 128 away from 76? No. So we put a 0 inside that box.</li> <li>Can we take 64 away from 76? Yes. So we put a 1 in there. We now have 12 left (76-64=12)</li> <li>Can we take 32 away from 12? No. So we put a 0 in there.</li> <li>Can we take 16 away from 12? No. So we put a 0 in there.</li> <li>Can we take 8 away from 12? Yes. So we put a 1 in there. We now have 4 left (12 - 8 = 4)</li> <li>Can we take 4 away from 4? Yes. So we put a 1 in there. We now have 0 left (4 \u2013 4 = 0)</li> <li>As we are now at 0 we fill the remaining boxes in with 0.</li> </ol> <p>So the number 76 is represented in binary as '01001100'</p> <p>Advantages of Using Binary Numbers</p> <ol> <li> <p>Binary is a simple two-state system (1 or 0) which is ideal when representing a two state system of power on/power off</p> </li> <li> <p>There are only a few rules for addition, making calculations simpler.</p> </li> <li> <p>A degraded signal can still be detected as representing 1.</p> </li> </ol>"},{"location":"Levels/Senior_Phase/Unit_2_CS/1.0_Data_Representation/L5/5.0_Home/#floating-point-representation","title":"Floating Point Representation","text":"<p>Now that we know how to representent positive whole numbers we now have to consider how to represent very large and very small numbers. </p> <p>If we used conventional binary methods, then too much memory would be used just to represent numbers.</p> <p>The technique used to solve this problem is similar to standard form, which you are taught in mathematics, and it is called floating point representation.</p> <p>In standard form you are taught to write the number <code>421212.79</code> as:</p> <p>Info</p> <p>The rule is to place the decimal point just after the first digit and to count the number of places that it has been moved. This number is then written as the power. In this case the point was moved five places.</p> <p>Now that we have looked at how floating point representation is used with decimal numbers we now need to understand how it is used with binary. </p> <p>When using binary we just follow the same process as binary has a binary point just like a decimal point.</p> <p>For example, the binary number <code>1101.001101110010</code> is written as:</p> <p>Notice that we have <code>moved the binary point four places</code> but the <code>exponent is written as 00000100</code>. </p> <p>This is not one hundred; it is the number 4 in binary.</p> <p>In the example above we have allocated 2 bytes for the mantissa and 1 byte for the exponent. Computers more commonly allow 4 bytes for the mantissa and at least 1 byte for the exponent.</p> <p>The computer only needs to store the value of the mantissa and the exponent to represent any real number. </p> <p>Computers use floating point is easy to implement and saves storage space.</p> <p>Remember</p> <p>The exponent is the number of places you have moved the decimal point to the left.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/1.0_Data_Representation/L5/5.0_Home/#storing-characters-ascii","title":"Storing Characters - ASCII","text":"<p>When you are using a program and you press a key on the keyboard the program has to have some way of identifying which key you pressed. </p> <p>This is true for any program whether it is a word processing package, spreadsheet or game. </p> <p>Each character on the keyboard has a unique binary code allocated to it.</p> <p>This is called ASCII. It stands for American Standard Code for Information Interchange. </p> <p>ASCII can represent 256 characters. </p> <p>ASCII code includes:</p> <ul> <li> <p>Non-printing characters: ,  <li> <p>Numbers: 0-9</p> </li> <li> <p>Upper and Lower Case Letters: A-Z, a-z</p> </li> <li> <p>Punctuation and other symbols: $, %, !, ?, @</p> </li> <p>All of the above are examples of the character set. </p> <p>This is the group of letters and numbers and characters that a computer can represent and manipulate. </p> <p>Exam Tip</p> <p>In you exam you are highly unlikely to get a question on control characters. You are more likely to recieve a question that: </p> <ul> <li> <p>asks you to provide the leter A in binary. </p> </li> <li> <p>asks how many letters can be reprsented by extended ASCII (<code>255</code>)</p> </li> <li> <p>asks how many bits are used to display \"Hello\" (<code>8 bits per letter so \"Hello = 5 * 8\"</code>)</p> </li> </ul> <p>I have added the main symbols/characters below. Try to memorise the decimal number of each sequence, from there you can just continue the sequence.</p> 0-9A-Z (Upper Case)a-z (Lower Case) Decimal Binary Symbol 48 110000 0 49 110001 1 50 110010 2 51 110011 3 52 110100 4 53 110101 5 54 110110 6 55 110111 7 56 111000 8 57 111001 9 Decimal Binary Symbol 65 1000001 A 66 1000010 B 67 1000011 C 68 1000100 D 69 1000101 E 70 1000110 F 71 1000111 G 72 1001000 H 73 1001001 I 74 1001010 J 75 1001011 K 76 1001100 L 77 1001101 M 78 1001110 N 79 1001111 O 80 1010000 P 81 1010001 Q 82 1010010 R 83 1010011 S 84 1010100 T 85 1010101 U 86 1010110 V 87 1010111 W 88 1011000 X 89 1011001 Y 90 1011010 Z Decimal Binary Symbol 97 1100001 a 98 1100010 b 99 1100011 c 100 1100100 d 101 1100101 e 102 1100110 f 103 1100111 g 104 1101000 h 105 1101001 i 106 1101010 j 107 1101011 k 108 1101100 l 109 1101101 m 110 1101110 n 111 1101111 o 112 1110000 p 113 1110001 q 114 1110010 r 115 1110011 s 116 1110100 t 117 1110101 u 118 1110110 v 119 1110111 w 120 1111000 x 121 1111001 y 122 1111010 z"},{"location":"Levels/Senior_Phase/Unit_2_CS/1.0_Data_Representation/L5/5.0_Home/#storing-graphics","title":"Storing Graphics","text":"<p>A pixel is the most basic component of any computer graphic. Pixel stands for picture element. </p> <p>It corresponds to the smallest element that can be drawn on a computer screen. Every computer graphic is made up of a grid of pixels. When these pixels are painted onto the screen, they form an image.</p> <p>The picture above shows when zoomed into the woman\u2019s eye you can see lots of little blocks. </p> <p>These are pixels. </p> <p>Each pixel stores a separate colour. Today\u2019s cameras take high-resolution photographs that store thousands of pixels, which create a great clear image. </p> <p>The above image would be stored as a grid of pixels. Each pixel would also have its own a binary value.</p> <p>Storing Black and White Graphics</p> <p>The above graphic is a really simple black and white image saying \u201cHI\u201d. This image is displayed in a 8 x 8 grid table with each box represents a pixel. </p> <p>In black and white, each pixel can be represented by 1 bit: 1 if the pixel is black or 0 if the pixel is white. The computer represents the image in memory as a file of 0s and 1s. </p> <p>The computer opens this file then starts looking for numbers that describe image information. Every time it comes to a 0 it draws a white pixel. When it comes to a 1 it draws a black pixel. </p> <p>The file is known as a bit map. </p> <p>In the 8 x 8 bit-mapped grid above each pixel requires 1 bit of storage. </p> <p>There are 64 pixels so this means the image needs 64 bits or 8 bytes of storage (8 bits = 1 byte). </p> <p>Note</p> <p>Graphics tend to be much larger than this simple example.</p> <p>Storing Vector Graphics</p> <p>In a program such as Serif or Photoshop the computer stores information about an object by its attributes i.e., a description of how it is to be drawn.  </p> <p>For a rectangle these attributes might be x and y position, height, width, thickness and colour of the lines, colour fill etc. </p> <p>This means that the rectangle can be selected at any later time and altered by changing its length, dragging it to a new position etc.  </p> <p>Though the image on the screen is still stored as a bitmap, the drawing package stores the attributes for each object (rectangle, line, circle, ellipse, text etc.) that is drawn. </p> <p>When the drawing is saved, only the list of objects and their attributes is stored which greatly reduces the file size.  </p> <p>When the drawing is loaded the drawing package redraws all the objects.  This means that if you increase the resolution of the screen the object will remain clear and crisp.</p> <p>How Vector Graphics are Stored</p> <p>The attributes are shown in bold, their values come immediately after the = sign.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/","title":"Computer Architecture","text":"<p>This is a simple representation of how a computer works.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#the-processor-cpu","title":"The Processor (CPU)","text":"<p>The processor is the brains of the computer and deals with all the movement of data and any calculations to be carried out. </p> <p>Computers can carry out instructions very quickly because the CPU can process billions of instructions every second although it only does one at a time. </p> <p>The processor is made up from: </p> <ul> <li> <p>The Control Unit (CU) </p> </li> <li> <p>The Arithmetic and Logic Unit (ALU) </p> </li> <li> <p>Registers</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#the-control-unit-cu","title":"The Control Unit (CU)","text":"<ul> <li> <p>Sends out signals that fetch instructions from the main memory</p> </li> <li> <p>To understand these instructions</p> </li> <li> <p>Carry out the instructions that are fetched from main memory</p> </li> </ul> <p>In short, the control unit is responsible for running programs that are loaded into main memory.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#the-arithmetic-and-logic-unit-alu","title":"The Arithmetic and Logic Unit (ALU)","text":"<ul> <li> <p>Carries out computers arithmetical functions such as addition, subtraction, multiplication etc</p> </li> <li> <p>Carries out the computers logical functions such as comparing values using IF, AND, &gt;, &lt;, WHILE</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#registers","title":"Registers","text":"<ul> <li>Registers are small temporary memory locations located on the processor. They are used to store the data for the current instruction being processed.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#main-memory-ram-and-rom","title":"Main Memory (RAM and ROM)","text":"<p>People often get confused between main memory and backing storage, they are not the same. </p> <p>Main memory is located inside the computer system. </p> <p>It can either be RAM or ROM. </p> <p>Backing storage is outside the main processor, e.g. Hard Drives, CD/DVD drives, USB Flash Memory (Pen Drives). </p> <p>Main memory in today\u2019s computers is on average around 4-16 Gb of RAM. </p> <p>Backing Storage is much bigger with average computers having around 500 Gb or more. </p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#rom-read-only-memory","title":"ROM (Read only Memory)","text":"<p>ROM is used to store a small part of the operating system called the bootstrap loader.</p> <ul> <li> <p>Data is stored permanently in ROM</p> </li> <li> <p>Data is not lost when the power goes off</p> </li> <li> <p>Data in ROM cannot be changed</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#ram-random-access-memory","title":"RAM (Random Access Memory)","text":"<p>This is where the operating system is stored; it also holds all programs and data. </p> <p>You can purchase additional RAM chips and install them in your desktop computer, which normally speeds up multi-tasking.</p> <ul> <li> <p>The processor can write to and read from RAM at high speed</p> </li> <li> <p>Data held in RAM can be changed</p> </li> <li> <p>All data in RAM is lost when the power is switched off</p> </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#buses","title":"Buses","text":"<p>The Processor (CPU) has buses. </p> <p>These are multiple lines that connect the processor and main memory and used to transfer data and send signals between them.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#address-bus","title":"Address Bus","text":"<p>The Address Bus is used to specify the address of the memory location that is to be read from or written to. </p> <p>The bus is uni-directional (one way).  </p> <p>The address bus is made up of parallel wires each carrying a single bit.  </p> <p>The size of the address bus will determine how many memory locations can be directly accessed,  2 <sup>  = Number of Unique addresses possible </sup></p> <p>Modern computers will typically have an address bus 32 lines wide although 64-bit address buses are now becoming normal in everyday computers.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/2.0_Computer_Architecture/L5/5.0_Home/#data-bus","title":"Data Bus","text":"<p>This bus is used to transfer data between main memory and the processor. </p> <p>It is bi-directional (two way) since data can be transferred from a memory location and vice versa.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/3.0_Security_and_Encryption/L5/5.0_Home/","title":"Security Precautions","text":""},{"location":"Levels/Senior_Phase/Unit_2_CS/3.0_Security_and_Encryption/L5/5.0_Home/#encryption","title":"Encryption","text":"<p>Encryption means to scramble a message in such a way that only the people who are meant to read it can do so. </p> <p>A message sent 'in the clear' looks like:</p> <p>\"This is a message anyone can read\"</p> <p>and the encrypted message looks like gibberish:</p> <p>fu11^&amp;$$HHPPHDYhg&amp;&amp;\u00a3--20dkmama@()@88787399(&amp;*&amp;))OJKK@_D</p> <p>Encryption works by both people making use of a secret <code>key</code> that only they know (or at least their computers know). </p> <p>The original message is mixed in with the key to create a secret message. </p> <p>This is done by some very crafty mathematics so that it is very very hard for someone to crack the code - very powerful computers working for a long time would be needed to crack a good code.</p>"},{"location":"Levels/Senior_Phase/Unit_2_CS/3.0_Security_and_Encryption/L5/5.0_Home/#firewalls","title":"Firewalls","text":"<p>A firewall is designed to help protect a computer network from intruders. It does this by controlling what data can and cannot pass through it. </p> <p>A firewall can either be:</p> <ul> <li> <p>A piece of software e.g. Windows has a built in Firewall, Zone Alarm is a free firewall or you can purchase commercial software firewalls.</p> </li> <li> <p>A piece of hardware. These boxes are much faster than the software version but they are also much more expensive and tricky to set up.</p> </li> </ul> <p>You would expect home networks to be protected by a software firewall but a large corporation would have several layers of hardware firewalls protecting their networks as well as intruder detection software applications looking for odd behaviour on their networks. </p> <p>In short, the more valuable or sensitive the information, the higher the level of protection expected. </p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/","title":"Database Design and Development","text":"Module Outcomes Analysis Identify the end-user and functional requirements of a database problem that relates to the implementation at this level. Design Describe and identify the implications for individuals and businesses of the UK General Data Protection Regulation (UK GDPR) that data must be: <ul> <li>processed lawfully, fairly and in a transparent manner in relation to individuals.</li> <li>used for the declared purpose only</li> <li>limited to the data needed for the declared purpose</li> <li>accurate</li> <li>not kept for longer than necessary</li> <li>held securely</li> </ul>      Describe and exemplify entity-relationship diagrams with two entities indicating:     <ul> <li>entity name</li> <li>attribute name</li> <li>primary and foreign key</li> <li>attribute type:</li> <ul> <li>text</li> <li>number</li> <li>date</li> <li>time</li> <li>boolean</li> </ul> <li>attribute size</li> <li>validation:</li> <ul> <li>presence check</li> <li>restricted choice</li> <li>field length</li> <li>range</li> </ul> </ul>      Exemplify a design of a solution to the query:     <ul> <li>multiple tables</li> <li>fields</li> <li>search criteria</li> <li>sort order</li> </ul> Implementation    Implement relational databases with two linked tables, to match the design with referential integrity.    Describe, exemplify and implement SQL operations for pre-populated relational databases, with a maximum of two linked tables:   <ul> <li>select</li> <ul> <li>from</li> <li>where:</li> <ul> <li>AND, OR, &lt;, &gt;, = </li> <li>order by with a maximum of two fields</li> </ul> </ul> <li>insert</li> <li>update</li> <li>delete</li> <li>equi-join between tables</li> </ul>    Read and explain code that makes use of the above SQL.         Testing      Describe and exemplify testing: <ul> <li>SQL operations work correctly at this level</li> </ul> Evaluation      Evaluate solution in terms of: <ul> <li>fitness for purpose</li> <li>accuracy of output</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/1.0_Database_Structure/L4%7C5%7C6%7C7/4.0_index/","title":"Database Structure","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/1.0_Database_Structure/L4%7C5%7C6%7C7/4.0_index/#what-is-a-database","title":"What is a Database?","text":"<p>A database is an organized collection of information or data. Putting information into a computer database gives you far more flexibility in organising, displaying and printing that information. Almost everyone who uses a computer will use a database system for something:</p> <ul> <li>Banks use a database package for storing customers' accounts information</li> <li>Your school will use a database package to store information on all the pupils in the school</li> <li>Police use databases to keep information on people with criminal records</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/1.0_Database_Structure/L4%7C5%7C6%7C7/4.0_index/#flat-file-databases","title":"Flat File Databases","text":"<p>A flat file database is a database that stores all data in a single table:</p> <ul> <li>Only one table is used.</li> <li>All data is stored in rows and columns within that one table.</li> </ul> <p></p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/1.0_Database_Structure/L4%7C5%7C6%7C7/4.0_index/#structure-of-a-flat-file-database","title":"Structure of a Flat File Database","text":"<p>Fields</p> <p>A 'Field' holds one piece of data at a time \u2013 for example, a person's name, age, or phone number.</p> <p></p> <p>Records</p> <p>A 'Record' holds all the data for one entry in the table \u2013 for example, all the information about a single customer.</p> <p></p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/1.0_Database_Structure/L4%7C5%7C6%7C7/4.0_index/#relational-databases","title":"Relational Databases","text":"<p>A relational database consists of two or more tables that are linked through relationships (Primary and Foreign keys) and the data they store.</p> <p>Primary Keys</p> <p>A primary key is a field that uniquely identifies each record in a table. No two records can have the same value in the primary key field, and it cannot be left blank.</p> <p>\u2705 Example: In the Membership table, the User ID could be the primary key because each user must have a unique ID.</p> <p>Foreign Keys</p> <p>A foreign key is a field in one table that links to the primary key in another table.</p> <p>This relationship connects the data between tables and helps maintain consistency in the database.</p> <p>\u2705 Example: Our database has a Membership table and a Gym Details table.</p> <ul> <li> <p>In the Gym Details table, the Gym ID is the primary key.</p> </li> <li> <p>In the Membership table, each member record includes a Gym ID as a foreign key to show which gym the member belongs to.</p> </li> </ul> <p></p> <p>\ud83d\udea8 Note</p> <p>In database design, each <code>Table</code> in a relational database represents an Entity \u2014 a real-world object like a Customer or Product.</p> <p>Each <code>Field</code> (or column) in the table represents an Attribute \u2014 a property of that entity, such as Name or Price.</p> <p>This difference is important when designing the structure of your database, even though software like Access may still use the terms table and field.</p> <p>\u26a0\ufe0f Don\u2019t confuse a record with an entity. In a flat file database, each record is one instance of an entity (e.g. one customer). In relational databases, the table represents the entity.</p> <p>Advantages of Using a Relational Database</p> <ul> <li>Avoids data duplication.</li> <li>Complex queries can be carried out on multiple tables.</li> <li>Easier to maintain security.</li> <li>Easier to change/update data.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/2.0_Analysis/L5/5.0_index/","title":"Analysis","text":"<p>What you need to know</p> <p>You must be able to identify the end-user and functional requirements of a database problem that relates to the implementation at this level.</p> <p>When designing a database, it's important to understand what the people using the system need it to do. This means identifying:</p> <ul> <li>End-user requirements \u2013 what the users want to be able to do with the database</li> <li>Functional requirements \u2013 what the database must include and be able to do</li> </ul> <p>We will use a School Library example to help explain these ideas.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/2.0_Analysis/L5/5.0_index/#end-user-requiremnts-and-functional-requirements","title":"End-user Requiremnts and Functional Requirements","text":"<p>Before creating a database, we must find out what the people who will use it want it to do. These are called the end-user requirements:</p> <ul> <li>the users are the people who are going to be using the database </li> <li>their requirements are the tasks they expect to be able to do using the database </li> </ul> <p>We also need to know what the database itself must include and be able to do to meet those needs \u2014 these are the functional requirements:</p> <ul> <li>processes and activities that the system has to perform  </li> <li>information that the system has to contain to be able to carry out its functions </li> </ul> <p>During the analysis stage of Database Development, you will need to identify the following requirements:</p> <p>These requirements help:  </p> <ul> <li>clarify the design of the database </li> <li>identify the features to be implemented on the database  </li> <li>evaluate whether the system is fit for purpose after development is complete</li> </ul> <p>Example</p> <p>A secondary school wants to create a database to keep track of its library books, the pupils who borrow them, and the borrowing history.</p> <p>The database will help school staff manage books and allow pupils to search for and borrow books.</p> <p>The database will have the following tables:</p> <ol> <li>Book \u2013 to store details of books in the library  </li> <li>Pupil \u2013 to store details of pupils who borrow books  </li> <li>Loan \u2013 to store details of which books have been borrowed and returned</li> </ol> <p>End-User Requirements</p> <p>Remember, these are the things the users of the database need it to do. In this case, the users are the library staff and pupils.</p> <p>They database should be able to:</p> <ul> <li>Search for books by title, author, or genre</li> <li>See if a book is available or already on loan</li> <li>View a list of books a pupil has borrowed</li> <li>Check which books are overdue</li> <li>Sort books by title or date added</li> </ul> <p>Top Tip</p> <p>Think about what the users need the database to do \u2014 what tasks will help them?</p> <p>Functional Requirements</p> <p>Remember, these describe what the database must contain and what it must do to meet the needs of the users.</p> <p>The database will include three tables: Book, Pupil, and Loan.</p> <p>Each table needs a primary key \u2013 a unique ID to identify each record. The Loan table will also need __foreign keys_ to link to the Book and Pupil tables.</p> <p>In addition to a primary key and any necessary foreign keys, the following fields are required:</p> <ul> <li> <p> Book</p> <ul> <li>Book ID (primary key)  </li> <li>Title  </li> <li>Author  </li> <li>Genre  </li> <li>Year Published  </li> <li>Available (Yes/No)</li> </ul> </li> <li> <p> Pupil</p> <ul> <li>Pupil ID (primary key)  </li> <li>First Name  </li> <li>Surname  </li> <li>Class</li> </ul> </li> <li> <p> Loan</p> <ul> <li>Loan ID (primary key)  </li> <li>Book ID (foreign key)  </li> <li>Pupil ID (foreign key)  </li> <li>Date Borrowed  </li> <li>Date Returned  </li> </ul> </li> <li> <p> The database must also be able to:</p> <ul> <li>Search for books based on different fields (title, author, genre)</li> <li>Sort results alphabetically or by date</li> <li>Check if a book is available</li> <li>List all books borrowed by a pupil</li> <li>Identify overdue books</li> </ul> </li> </ul> <p>By clearly identifying the end-user and functional requirements, you can make sure your database is designed with the right users and tasks in mind. This helps avoid problems later in development and ensures the final system does exactly what it needs to. Good analysis at this stage sets the foundation for a successful project.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/2.0_Analysis/L5/Data%20Protection/","title":"Data Protection","text":"<p>Functional Requirements The relational database will have four tables: Hotel, Resort, Booking and Customer.</p> <p>Each table requires a suitable primary key field, with foreign keys linking the four tables.</p> <p>In addition to a primary key and any necessary foreign keys, the following fields are required:</p> <p>Hotel \u25cf   hotel name \u25cf   start of season date \u25cf   check-in time \u25cf   price per night \u25cf   meal plan \u25cf   swimming pool \u25cf   star rating Resort \u25cf   resort name \u25cf   resort type \u25cf   train station Customer \u25cf   first name \u25cf   surname \u25cf   address \u25cf   town \u25cf   postcode Booking \u25cf   start date \u25cf   number in party \u25cf   number of nights</p> <p>Use the following: \u25cf   simple and complex queries to search the database \u25cf   a simple sort to order the query results \u25cf   a calculation to work out the total cost of a booking \u25cf   an aggregate function to work out the number of 4-star hotels located in resorts that have a train station</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/2.0_Analysis/L6/6.0_index/","title":"Analysis","text":"<p>What you need to know</p> <p>You must be able to identify the end-user and functional requirements of a database problem that relates to the implementation at this level. </p> <p>When developing a database, it is important to understand exactly what the end-users need the system to do. This involves identifying the end-user requirements as well as the functional requirements. </p> <p>For this lesson we will use a travel agency example to help you understand how to gather and define these requirements clearly. </p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/2.0_Analysis/L6/6.0_index/#end-user-requiremnts-and-functional-requirements","title":"End User Requiremnts and Functional Requirements","text":"<p>Before creating a database, we must find out what the people who will use it want it to do. These are called the end-user requirements:</p> <ul> <li>the users are the people who are going to be using the database </li> <li>their requirements are the tasks they expect to be able to do using the database </li> </ul> <p>We also need to know what the database itself must include and be able to do to meet those needs \u2014 these are the functional requirements:</p> <ul> <li>processes and activities that the system has to perform  </li> <li>information that the system has to contain to be able to carry out its functions </li> </ul> <p>During the analysis stage of Database Development, you will need to identify the following requirements:</p> <p>These requirements help:  </p> <ul> <li>clarify the design of the database </li> <li>identify the features to be implemented on the database  </li> <li>evaluate whether the system is fit for purpose after development is complete</li> </ul> <p>Example</p> <p>A travel agency wants to create a relational database to store details of bookings for hotels in Scottish holiday resorts. </p> <p>The database will allow travel agents to view details of hotels and make bookings for customers. </p> <p>Four separate entities (tables) are required: </p> <ol> <li>Hotel (used to store details of hotels in each resort) </li> <li>Resort (used to store details of Scottish holiday resorts) </li> <li>Customer (used to store details of customers who make holiday bookings) </li> <li>Booking (used to store details of hotel bookings) </li> </ol> <p>They have appointed a developer team to carry out an analysis of the database requirements. </p> <p>The developers ask some of the travel agency staff about the features they would expect to see in the completed database.</p> <p>The following are a few of the comments made by the staff: </p> <p>End-User Requirements</p> <p>Travel agency staff should be able to perform a range of searches to display:</p> <ul> <li>full details of any booking</li> <li>availability of hotels in a particular resort, with specified facilities (meal plan or pool)</li> <li>details of hotels in a particular type of resort</li> <li>details of hotels available for a specified star rating</li> <li>resorts that have train stations</li> </ul> <p>Staff should be able to sort search results in order of ascending order of price and should be able to calculate:</p> <ul> <li>the total cost of any holiday booking</li> <li>the number of hotels within a certain price range or available on a certain start date</li> </ul> <p>Top Tip</p> <p>Keep the focus on the end user - what do they want to use the database for?</p> <p>Functional Requirements</p> <p>The relational database will have four tables: </p> <ul> <li> <p> Hotel</p> <ul> <li>hotel name (PK)</li> <li>start of season date</li> <li>check-in time</li> <li>price per night</li> <li>meal plan</li> <li>swimming pool</li> <li>star rating</li> </ul> </li> <li> <p> Resort</p> <ul> <li>resort name (PK)</li> <li>resort type</li> <li>train station</li> </ul> </li> <li> <p> Customer</p> <ul> <li>Customer ID (PK)</li> <li>first name</li> <li>surname</li> <li>address</li> <li>town</li> <li>postcode</li> </ul> </li> <li> <p> Booking</p> <ul> <li>Booking ID (PK)</li> <li>start date</li> <li>number in party</li> <li>number of nights</li> </ul> </li> </ul> <p>Each table requires a suitable primary key field, with foreign keys linking the four tables.</p> <p>Primary Keys</p> <p>Foreign Keys</p> <p>In addition, the database must also have the following:</p> <ul> <li>simple and complex queries to search the database</li> <li>a simple sort to order the query results</li> <li>a calculation to work out the total cost of a booking</li> <li>Calculate the number of 4-star hotels located in resorts that have a train station</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.1-DB-Relationships/","title":"Realtionships","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.1-DB-Relationships/#database-relationships-one-to-many","title":"Database Relationships (One to Many)","text":"<p>Database relationships can be shown in the form of a diagram. </p> <p>This diagram is known as an 'entity relationship diagram'. </p> <p>As part of your exam, you will have to either draw or interpret one of these diagrams. </p> <p>A one-to-many relationship is the most common type of relationship between database entities. In this type of relationship, a row in table A can have many matching rows in table B, but a row in table B can have only one matching row in table A. </p> <p>For example, the publishers and titles tables have a one-to-many relationship: each publisher produces many titles, but each title comes from only one publisher.</p> <p>Think about a mother and her children. A mother can have many children. A child can have only one mother. </p> <p>Dog Walkers is a company that walks dogs when their owners are at work. The company has a database to store details of the dogs, their owners and the walkers. The data is stored in the following tables.</p> <p>The one-to-many relationships that exist between the tables are:</p> <ul> <li> <p>Walker and Walk - there is only one walker to many walks. For example, a dog walker can do many different walks.</p> </li> <li> <p>Dog and Walk - there is one dog to many walks. For example, one dog can go on many different walks.</p> </li> <li> <p>Owner and Dog - there is one owner to many dogs. For example, one owner may have many different dogs.</p> </li> </ul> <p>Mother and Child Full Example</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.1-DB-Relationships/#referential-integrity","title":"Referential integrity","text":"<p>Referential integrity is a rule in relational databases that ensures relationships between tables remain valid and consistent. It prevents orphan records, meaning every foreign key in a table must match a valid primary key in another table.</p> <p>For example, in a school database:</p> <p>The Students table has a primary key (StudentID).</p> <p>The Enrolments table records which courses students take and includes a foreign key (StudentID).</p> <p>Referential integrity ensures that every StudentID in Enrolments exists in Students, preventing enrolments for non-existent students.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.1-DB-Relationships/#why-is-this-important","title":"Why is this important?","text":"<ul> <li>Prevents data inconsistencies and errors.</li> <li>Ensures linked data remains accurate and complete.</li> <li>Maintains the reliability of relationships between tables.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/","title":"Data Dictionaries","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#explanation","title":"Explanation","text":"<p>A data dictionary is a structured document that describes the data in a database. It provides details about each field in a table, helping database designers and users understand how the data is stored and used.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#why-is-a-data-dictionary-important","title":"Why is a Data Dictionary Important?","text":"<ul> <li>Ensures consistency in data entry and structure.</li> <li>Helps developers and database administrators understand the database.</li> <li>Reduces errors by clearly defining field requirements.</li> <li>Supports efficient database design and maintenance.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#key-elements-of-a-data-dictionary","title":"Key Elements of a Data Dictionary","text":"<p>Each field in a table is described using the following properties:</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#-attribute-size","title":"- Attribute Size","text":"<p>The size of an attribute refers to the amount of data it can store. It is important to set an appropriate size to optimize database performance and storage.</p> <ul> <li>Text fields have a maximum number of characters (e.g., First_Name: 20 characters).</li> <li>Integer fields have a defined range (e.g., Student_ID: 6 digits).</li> <li>Date fields must follow a standard format (e.g., DD/MM/YYYY).</li> <li>Boolean fields are limited to two possible values (True/False).</li> <li>Choosing the right size ensures efficient storage and prevents data truncation or unnecessary space usage.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#-primary-and-foreign-keys","title":"- Primary and Foreign Keys","text":"<p>In relational databases, keys help establish relationships between tables:</p> <ul> <li> <p>Primary Key (PK) \u2013 A unique identifier for each record in a table. No two records can have the same primary key. (Example: Student_ID in the Students table)</p> </li> <li> <p>Foreign Key (FK) \u2013 A field that links to the primary key in another table to create a relationship. (Example: Class_ID in the Students table, which links to Class_ID in the Classes table)</p> </li> </ul> <p>These keys ensure data integrity and help prevent duplication.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#-attribute-data-types","title":"- Attribute Data Types","text":"<ul> <li>Text (String) \u2013 Used for words or characters (e.g., names, addresses).</li> <li>Integer (Number) \u2013 Whole numbers (e.g., Student ID, Age).</li> <li>Decimal (Float) \u2013 Numbers with decimal points (e.g., Price, GPA).</li> <li>Boolean \u2013 True or False values (e.g., Enrolled: Yes/No).</li> <li>Date/Time \u2013 Stores date and time values (e.g., Date of Birth).</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#-validation","title":"- Validation","text":"<p>Validation is used to ensure that only correct and meaningful data is entered into the database. It helps reduce errors and improves data quality. Common validation types include:</p> <ul> <li>Presence Check \u2013 Ensures that a field is not left empty (e.g., Student_ID cannot be blank).</li> <li>Range Check \u2013 Ensures a value falls within a specific range (e.g., Age must be between 11 and 18 for a school database).</li> <li>Length Check \u2013 Ensures text fields are not too short or too long (e.g., Postcodes must be exactly 6-8 characters).</li> <li>Restricted Choice - Ensures that the value entered in a field must be selected from a predefined list of acceptable options. </li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.2-Data-Dictionaries/#database-data-types","title":"Database Data Types","text":"<p>Text</p> <p>Text fields will store characters or words.  Can be a combination of text and numbers such as a postcode or an address with a street number (PH33 7BP or 14 High Street)</p> <p>A telephone number would be a text field. This is because we don't perform calculations with the number and also because some phone numbers are a combination of letters and numbers.</p> <p>Even though a telephone number contains only digits, we treat it as text because we don\u2019t perform calculations on it.</p> <p>Number</p> <p>Number field types can store whole numbers (integers) such as 8,99,236 or numbers with decimal places (real numbers) such as 76.33, 2.11, 4.5.</p> <p>Date</p> <p>This field type will store dates. These can be stored in different formats. You will decide when you design the table what format you would like to choose. </p> <p>Time</p> <p>A time field stores the time of day. This will normally be in 24-hour format such as 15:30</p> <p>Boolean</p> <p>A Boolean field is either true or false / yes or no. A Boolean field is used when there are only two possible values, such as Yes/No, On/Off, or True/False.</p> <p>For example: \u201cHas Paid?\u201d or \u201cIs Member?\u201d</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/","title":"Query Design","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#understanding-the-problem","title":"Understanding the Problem","text":"<p>Before designing a query, you must first make sure you understand the question being asked. For example:</p> <ul> <li>What information do you need? (e.g., student names and grades)</li> <li>Which table(s) contain the required data?</li> <li>Do you need to filter, sort, or combine data?</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#identifying-the-required-sql-commands","title":"Identifying the Required SQL Commands","text":"<p>To design a query effectively, you must know the key SQL commands:</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#select-from","title":"SELECT ... FROM ...","text":"<p>The <code>SELECT</code> statement specifies which columns to display, while <code>FROM</code> indicates the table where the data is stored.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#where-filtering-data","title":"WHERE (Filtering Data)","text":"<p>Use the WHERE clause to filter results based on a condition.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#order-by-sorting-data","title":"ORDER BY (Sorting Data)","text":"<p>To arrange the results in <code>ascending (ASC)</code> or <code>descending (DESC)</code> order, use <code>ORDER BY</code>.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#update-modifying-data","title":"UPDATE - Modifying Data","text":"<p>Use UPDATE to change existing records.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#delete-removing-data","title":"DELETE - Removing Data","text":"<p>Use DELETE to remove specific records.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#example-question","title":"Example Question","text":"<p>Question</p> <p>Design a query that would output the model, number of seats and the showroom manager for all the Jaguar cars located in Glasgow.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/3.0_Design/L5/3.3-Query-Design/#answer","title":"Answer","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/","title":"SQL Select Operations","text":"<p>At National 5 you are required to be able to carry out various operations on a database using the SQL language, Conditional Operators and Logical Operators. </p> <p>The first operations we will look at is <code>SELECT...FROM...</code> and <code>SELECT... FROM... WHERE...</code> operations including <code>ORDER BY</code></p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#selectfrom","title":"SELECT...FROM...","text":"<p>SELECT...FROM... is used to return complete data sets from an entity. These data sets can either be the whole entity or select colmuns.</p> <p>The syntax below demonstrates how a a SELECT...FROM... query works:</p> <p>EXAMPLE 1 - SELECT...FROM...<pre><code>SELECT * -- returns all data from the entity\nFROM entity_name;\n</code></pre> EXAMPLE 2 - SELECT...FROM...<pre><code>SELECT column1, column2 -- column1, column2, are the attribute names of the entity you want to select data from. \nFROM entity_name;\n</code></pre></p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#selectfromwhere","title":"SELECT...FROM...WHERE...","text":"<p>The <code>SELECT ... FROM ... WHERE</code> statement in SQL is used to retrieve specific data from a table based on defined conditions. <code>SELECT</code>specifies the columns to be retrieved, <code>FROM</code>indicates the table from which the data is pulled, and <code>WHERE</code> filters the results by applying conditions. For example:</p> SELECT...FROM...WHERE<pre><code>SELECT column1, column2, column 3 \nFROM entity name \nWHERE column 3 &gt; ...;\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#conditional-operators","title":"Conditional Operators","text":"<p>Conditional operators in SQL are used to apply conditions and control the flow of data retrieval or manipulation based on certain criteria. </p> <p>These operators help filter, compare, and return specific values or perform specific actions depending on conditions. </p> Conditional Operators<pre><code>=  --  Equal to\n&gt;  --  Greater than\n&lt;  --  Less than\n&gt;= --  Greater than or equal to\n&lt;= --  Less than or equal to\n&lt;&gt; --  Not equal to\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#logical-operators-and-or","title":"Logical Operators (AND, OR)","text":"<p>Logical operators are used to combine multiple conditions in a WHERE clause.</p> Logical Operators<pre><code>AND -- Returns true if all conditions are true.\nOR  -- Returns true if at least one condition is true.\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#order-by","title":"ORDER BY","text":"<p>The <code>ORDER BY</code> clause in SQL is used to sort query results in either ascending <code>(ASC)</code> or descending <code>(DESC)</code> order. </p> <p>By default, <code>ORDER BY</code> sorts in ascending order if <code>ASC</code>is not specified. For example:</p> ORDER BY Ascending (ASC)<pre><code>SELECT column1,column2, column3\nFROM entity name\nORDER BY column3 ASC;\n</code></pre> ORDER BY Ascending (DESC)<pre><code>SELECT column1,column2, column3\nFROM entity name\nORDER BY column3 DESC;\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#example-pupils-database","title":"Example - Pupils Database","text":"<p>In the example below the <code>Pupils</code> database contains the attributes <code>name, age and guidance house</code>. </p> <p>Entity/Table Name = Pupils</p> StudentNum Name Age House 1 Stephen Stewart 13 Nevis 2 Lynsey MacG 15 Rannoch 3 Daniel Kerr 17 Lochiel 4 Bob Jordan 11 Nevis 6 Eilidh Ralston 16 Nevis"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.1-SQL-Select/#example-sql-select-operations-on-the-pupil-databse","title":"Example SQL SELECT Operations on the Pupil Databse","text":"SQLPlain English Select All<pre><code>SELECT * \nFROM Pupils;\n</code></pre> <p>This will print out all the information in the database called Pupils using an astrix <code>*</code></p> <p></p> SQLPlain English Equals<pre><code>SELECT * \nFROM Pupils\nWHERE House = 'Nevis';\n</code></pre> <p>This will print out only the pupils who are in the guidance house Nevis from the Pupils table. Note there is speech marks around a string value.</p> <p></p> SQLPlain English Greater Than<pre><code>SELECT name, age \nFROM Pupils\nWHERE age &gt; 15;\n</code></pre> <p>This will print out only the attributes name and age from the Pupils table where the age is greater than or equal to 12.</p> <p></p> SQLPlain English Less Than<pre><code>SELECT name, age \nFROM Pupils\nWHERE age &lt; 15;\n</code></pre> <p>This will print out only the attributes name and age from the Pupils table where the age is greater than or equal to 12.</p> <p></p> SQLPlain English Greater Than or Equal too<pre><code>SELECT name, age \nFROM Pupils\nWHERE age &gt;= 12;\n</code></pre> <p>This will print out only the attributes name and age from the Pupils table where the age is greater than or equal to 12.</p> <p></p> SQLPlain English Less Than or Equal too<pre><code>SELECT name, age \nFROM Pupils\nWHERE age &lt;= 15;\n</code></pre> <p>This will print out only the attributes name and age from the Pupils table where the age is greater than or equal to 12.</p> <p></p> SQLPlain English AND<pre><code>SELECT * \nFROM Pupils\nWHERE age &gt;= 12 AND age &lt;= 16;\n</code></pre> <p>This will print out only the pupils who are aged greater than or equal to 16 and in guidance house Lochiel from the Pupils table.</p> <p></p> SQLPlain English OR<pre><code>SELECT * \nFROM Pupils\nWHERE age &gt;= 12 OR age &lt;= 16;\n</code></pre> <p>This will print out only the pupils who are aged greater than or equal to 16 and in guidance house Lochiel from the Pupils table.</p> <p></p> SQLPlain English Show Results in Ascending<pre><code>SELECT name, age, house \nFROM Pupils\nWHERE age &lt; 15\nORDER BY age ASC;\n</code></pre> <p>This will print out the attributes name, age and house from the pupils table that are less than 15 years old. The results will be sorted by the age attribute in ascending order.</p> <p></p> SQLPlain English Show Results in Descending Order<pre><code>SELECT name, age, house \nFROM Pupils\nWHERE age &lt; 15\nORDER BY age DESC;\n</code></pre> <p>This will print out the attributes name, age and house from the pupils table that are less than 15 years old. The results will be sorted by the age attribute in ascending order.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.2-SQL-Insert/","title":"SQL INSERT, UPDATE AND DELETE Operations","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.2-SQL-Insert/#insert-operations","title":"INSERT Operations","text":"<p>The <code>INSERT</code> statement in SQL is used to add new records to a table. It specifies the table name, the columns to be filled, and the values to be inserted. For example:</p> Insert Syntax<pre><code>INSERT INTO entity (attribute1, attribute2, attribute3)\nVALUES (value1, value2, value3, \u2026);\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.2-SQL-Insert/#update-operations","title":"UPDATE Operations","text":"<p>The UPDATE statement in SQL is used to modify existing records in a table. It specifies the table name, the columns to be updated, the new values, and a WHERE clause to filter the affected rows. For example:</p> Update Pupils Database<pre><code>UPDATE entity name\nSET column1 = ...\nWHERE column1 = ...;\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.2-SQL-Insert/#delete-operations","title":"DELETE Operations","text":"<p>The <code>DELETE</code> statement in SQL is used to remove records from a table based on a specified condition. It includes the <code>WHERE</code> clause to define which rows should be deleted. For example: You can use SQL to delete a record from a database. </p> Delete Syntax<pre><code>DELETE FROM entity name\nWHERE column1 CONDITION ...;\n</code></pre> <p>Warning</p> <p>Delete will delete <code>ANY</code> records for the condition you have set. Always check twice before running a <code>DELETE</code> operation.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.3-SQL-Equi-Joins/","title":"4.3 SQL Equi Joins","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/4.0_Implementation/L4-5/4.3-SQL-Equi-Joins/#sql-equi-join-operations","title":"SQL Equi-Join Operations","text":"<p>You can use SQL to perform a query to show information from multiple tables where there is matching data using an equi-join to show <code>guidance</code> and <code>pupil information</code> together. The syntax can be seen below:</p> Equi-Join Syntax<pre><code>SELECT *\nFROM entity1,entity2\nWHERE entity1.column1 = entity2.column1;\n</code></pre> <p>Below is a separate entity/table for guidance staff information. </p> <p>Entity = Guidance</p> EmployeeNum Title Surname House 1 Mr Stewart Nevis 2 Miss Kelly Locheil 3 Mr Macdonald Rannoch 4 Mrs Jordan Shiel <p>The entity relationship diagram above explains the relationship between the guidance and pupils entities. One guidance teacher can have many pupils to support. The matching data and relationship between these tables/entities is the house field.</p> <p>We can use an equi-join to display the pupils and guidance information together. </p> Equi-Joins<pre><code>SELECT * \nFROM Pupils,Guidance\nWHERE Pupils.House = Guidance.House;\n</code></pre> <p>The above SQL would select all the information from the Pupils table and join it with the Guidance table. It would join the records where the house attribute on the guidance and pupils table match. </p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/5.0_Testing/5.1-DB-Testing/","title":"Testing","text":""},{"location":"Levels/Senior_Phase/Unit_3_DDD/5.0_Testing/5.1-DB-Testing/#explanation","title":"Explanation","text":"<p>Testing ensures that a database and its queries work correctly and return accurate results. Without testing, errors could lead to incorrect data retrieval, processing, or even data loss.</p> <p>Testing helps to:</p> <ul> <li>Identify and fix errors in SQL queries.</li> <li>Ensure queries return the expected results.</li> <li>Verify that the database structure meets requirements.</li> <li>Improve database performance and efficiency.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/5.0_Testing/5.1-DB-Testing/#types-of-testing","title":"Types of Testing","text":"<ol> <li> <p>Syntax Testing - Checks that SQL commands follow the correct rules and structure. If there are mistakes in SQL keywords, punctuation, or spelling, an error message will appear.</p> </li> <li> <p>Execution Testing (Functional Testing) - Ensures that queries return the expected results. Uses sample data to check if the query outputs correct and complete results.</p> </li> <li> <p>Normal, Extreme, and Exceptional Testing. To fully test a query, different types of data must be used:</p> <ol> <li> <p>Normal Data (Valid Data) \u2013 Typical inputs that should work. </p> </li> <li> <p>Extreme Data (Edge Cases) \u2013 Values at the limits of what the database should handle. </p> </li> <li> <p>Exceptional Data (Invalid Data) \u2013 Inputs that should cause an error or be rejected.</p> </li> </ol> </li> </ol>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/6.0_Evaluation/5.2-DB-Evaluation/","title":"Evaluation","text":"<p>Once testing is complete, the database must be evaluated to ensure it meets all requirements. </p> <p>Evaluation involves checking the following key aspects:</p> <ol> <li> <p>Does the Database Meet User Requirements?</p> <ol> <li>Does it store all necessary data?</li> <li>Do queries return the correct results?</li> <li>Are relationships between tables correctly defined?</li> </ol> </li> <li> <p>Is the Database Efficient?</p> <ol> <li>Do queries execute quickly?</li> <li>Are only the necessary columns selected? (e.g., avoiding SELECT * when specific fields are needed)</li> <li>Are indexes used effectively to speed up searches?</li> </ol> </li> <li> <p>Is the Database Secure?</p> <ol> <li>Are access rights correctly configured?</li> <li>Can unauthorized users modify or access data?</li> </ol> </li> <li> <p>Is the Data Accurate and Reliable?</p> <ol> <li>Does the data reflect real-world values?</li> <li>Are there any errors in the query results?</li> </ol> </li> </ol> <p>If the system does not meet these expectations, it may be difficult to use and require modifications.</p>"},{"location":"Levels/Senior_Phase/Unit_3_DDD/6.0_Evaluation/5.2-DB-Evaluation/#applying-evaluation-in-your-coursework","title":"Applying Evaluation in Your Coursework","text":"<p>In the National 5 Computing Science exam, you may be given database tables along with SQL queries. You will need to:</p> <ul> <li>Predict the expected outcome of the queries.</li> <li>Identify any errors or issues in the SQL statements.</li> <li>Explain what is wrong and suggest how to fix it.</li> <li>By understanding how to test and evaluate a database system, you will be well-prepared to analyze database queries and improve system functionality.</li> </ul>"},{"location":"Levels/Senior_Phase/Unit_4_WDD/Div_Class_Div_ID/","title":"Div Class ID and Div Class","text":""},{"location":"Levels/Senior_Phase/Unit_4_WDD/Div_Class_Div_ID/#div","title":"Div","text":"<p>The HTML  tag is used for defining a section of your document.  <p>With the  tag, you can group large sections of HTML together and format them with CSS. <pre><code>&lt;div&gt;\n\n    &lt;h1&gt; Coding is Fun!&lt;/h1&gt;\n\n&lt;/div&gt;\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_4_WDD/Div_Class_Div_ID/#class","title":"Class","text":"<p>The HTML class attribute is used to assigned some properties to HTML elements. </p> <p>All HTML elements within the same class attributed will have the same format and style. </p> <pre><code>&lt;style&gt;\n\n.coding{ background-color: blue;}\n\n\n\n&lt;/style&gt;\n\n&lt;div class = \"coding\"&gt;\n\n    &lt;h1&gt; Coding is Fun!&lt;/h1&gt;\n\n&lt;/div&gt;\n</code></pre>"},{"location":"Levels/Senior_Phase/Unit_4_WDD/Div_Class_Div_ID/#id","title":"ID","text":"<p>The HTML ID attribute is used to specify a unique ID for an HTML element. </p> <p>You cannot have more than one element with the same ID in an HTL document. </p> <pre><code>&lt;style&gt;\n\n.coding{ background-color: blue;}\n\n#header {color: yellow;}\n\n&lt;/style&gt;\n\n&lt;div class = \"coding\"&gt;\n\n    &lt;h1 id = \"header\"&gt; Coding is Fun!&lt;/h1&gt;\n\n&lt;/div&gt;\n</code></pre>"}]}